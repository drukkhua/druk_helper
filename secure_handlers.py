"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards import create_main_menu_keyboard
from models import UserStates
from security_decorators import (
    admin_only,
    rate_limit,
    validate_callback_data,
    validate_message_text,
    validate_user_id,
)


@validate_user_id
@rate_limit(calls_per_minute=10)
async def secure_start(message: types.Message, state: FSMContext, template_manager):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–ª—ñ—î–Ω—Ç–∞–º.\n\n"
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ—Ç–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:"
        if template_manager.get_user_language(user_id) == "ukr"
        else "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º.\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤:"
    )

    await message.answer(
        welcome_text, reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )
    await state.set_state(UserStates.main_menu)


@validate_user_id
@validate_callback_data
@rate_limit(calls_per_minute=20)
async def secure_category_selection(
    callback: CallbackQuery, state: FSMContext, template_manager
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    from keyboards import create_category_menu_keyboard, get_category_title

    category = callback.data.replace("category_", "")
    user_id = callback.from_user.id

    lang = template_manager.get_user_language(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (
        category not in template_manager.templates
        or not template_manager.templates[category]
    ):
        error_text = (
            f"‚è≥ –®–∞–±–ª–æ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.\n–ó'—è–≤–ª—è—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
            if lang == "ukr"
            else f"‚è≥ –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n–ü–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        await callback.answer(error_text)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    title = get_category_title(category, lang)
    subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == "ukr" else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

    await callback.message.edit_text(
        f"{title}\n\n{subtitle}",
        reply_markup=create_category_menu_keyboard(category, user_id, template_manager),
    )

    await state.update_data(current_category=category)
    await state.set_state(UserStates.category_menu)


@validate_user_id
@validate_message_text
@rate_limit(calls_per_minute=15)
async def secure_search_query(
    message: types.Message, state: FSMContext, template_manager
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    user_id = message.from_user.id
    query = message.text.strip()

    # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ (—É–∂–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤–Ω—É—Ç—Ä–∏)
    found_templates = template_manager.search_templates(query)

    if not found_templates:
        lang = template_manager.get_user_language(user_id)
        no_results_text = (
            f"‚ùå –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞."
            if lang == "ukr"
            else f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
        )
        await message.answer(no_results_text)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    builder = InlineKeyboardBuilder()

    for template in found_templates[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        builder.row(
            InlineKeyboardButton(
                text=f"{template.button_text}",
                callback_data=f"template_{template.category}_{template.subcategory}",
            )
        )

    lang = template_manager.get_user_language(user_id)
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ukr" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    results_text = (
        f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_templates)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}':"
        if lang == "ukr"
        else f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_templates)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':"
    )

    await message.answer(results_text, reply_markup=builder.as_markup())


@validate_user_id
@admin_only
@rate_limit(calls_per_minute=5)
async def secure_admin_stats(callback: CallbackQuery, template_manager):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    stats_text = template_manager.stats.get_stats_summary()
    await callback.message.answer(stats_text)
