#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∏–Ω—Ç–µ—Ä–æ–≤
Auto-fix script that applies formatting and fixes linting issues
"""
import subprocess

import os
import sys

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
VENV_PATH = "venv/bin/activate"
if os.path.exists(VENV_PATH):
    activate_cmd = f"source {VENV_PATH} && "
else:
    activate_cmd = ""

# –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
FILES_TO_CHECK = "*.py tests/"


def run_command(name: str, cmd: str, ignore_errors: bool = False) -> bool:
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\n{'=' * 60}")
    print(f"üîß {name}")
    print(f"{'=' * 60}")

    full_cmd = activate_cmd + cmd
    result = subprocess.run(full_cmd, shell=True, capture_output=True, text=True)

    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(result.stderr)

    if result.returncode == 0 or ignore_errors:
        print(f"‚úÖ {name} - COMPLETED")
        return True
    else:
        print(f"‚ùå {name} - FAILED")
        return False


def fix_whitespace_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ W291 (trailing whitespace) –∏ W293 (blank line contains whitespace)"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (W291, W293)")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ (–∏—Å–∫–ª—é—á–∞—è venv –∏ test_env)
    import glob
    import re

    python_files = []
    for pattern in ["*.py", "src/**/*.py", "tests/**/*.py"]:
        python_files.extend(glob.glob(pattern, recursive=True))

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    python_files = [f for f in python_files if not f.startswith(("venv/", "test_env/"))]

    fixed_files = 0
    w291_fixes = 0  # trailing whitespace
    w293_fixes = 0  # blank line contains whitespace

    for file_path in python_files:
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                lines = f.readlines()

            modified = False
            new_lines = []

            for line in lines:
                original_line = line

                # W291: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º trailing whitespace (–ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫)
                if line.rstrip() != line.rstrip("\n\r"):  # –ï—Å—Ç—å trailing whitespace
                    line = line.rstrip() + "\n" if line.endswith("\n") else line.rstrip()
                    w291_fixes += 1
                    modified = True

                # W293: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º blank lines with whitespace (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
                if re.match(r"^[ \t]+$", line):  # –°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±—ã
                    line = "\n" if line.endswith("\n") else ""
                    w293_fixes += 1
                    modified = True

                new_lines.append(line)

            if modified:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.writelines(new_lines)
                fixed_files += 1
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")

    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")
    print(f"   ‚Ä¢ W291 (trailing whitespace): {w291_fixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print(f"   ‚Ä¢ W293 (blank line whitespace): {w293_fixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")


def main() -> int:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞")
    print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    # 1. Black - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    run_command("Black - Auto Format", f"black --line-length 100 {FILES_TO_CHECK}")

    # 2. Isort - —É–±—Ä–∞–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Å–ª–∏—à–∫–æ–º –∫–∞–ø—Ä–∏–∑–Ω—ã–π)
    # run_command("Isort - Auto Sort Imports", f"isort {FILES_TO_CHECK}")

    # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (W291, W293)
    fix_whitespace_issues()

    # 4. Autopep8 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PEP8 (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if (
        subprocess.run(activate_cmd + "which autopep8", shell=True, capture_output=True).returncode
        == 0
    ):
        run_command(
            "Autopep8 - Fix PEP8 Issues",
            f"autopep8 --in-place --aggressive --aggressive --max-line-length 100 {FILES_TO_CHECK}",
            ignore_errors=True,
        )

    print(f"\n{'=' * 60}")
    print("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ lint_check.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print("   python lint_check.py")
    print("   make lint-check")
    print(f"{'=' * 60}\n")

    return 0


if __name__ == "__main__":
    sys.exit(main())
