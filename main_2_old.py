import asyncio
import os
import sys

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage

import handlers
from config import BOT_TOKEN, logger
from models import UserStates
from template_manager import TemplateManager
from exceptions import *
from error_handler import error_handler


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    if not BOT_TOKEN:
        raise ConfigurationError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤
    template_manager = TemplateManager()
    BOT_VERSION = "1.05"  # –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —ç—Ç—É –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    
except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# @dp.message(Command("start"))
# async def cmd_start_wrapper(message, state):
#     await handlers.cmd_start(message, state, template_manager)
@dp.message(Command("start"))
async def cmd_start_wrapper(message, state):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    current_user_version = user_data.get('bot_version')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
    if current_user_version != BOT_VERSION:
        # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(bot_version=BOT_VERSION)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if current_user_version:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            await message.answer("üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é...")

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start
    await handlers.cmd_start(message, state, template_manager)


@dp.message(Command("stats"))
async def cmd_stats_wrapper(message):
    await handlers.cmd_stats(message, template_manager)


@dp.callback_query(lambda c: c.data.startswith("category_"))
async def process_category_selection_wrapper(callback, state):
    await handlers.process_category_selection(callback, state, template_manager)


@dp.callback_query(lambda c: c.data.startswith("template_"))
async def process_template_selection_wrapper(callback, state):
    await handlers.process_template_selection(callback, state, template_manager)


@dp.callback_query(lambda c: c.data == "copy_template")
async def copy_template_text_wrapper(callback, state):
    await handlers.copy_template_text(callback, state, template_manager)


@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats_wrapper(callback):
    await handlers.admin_stats(callback, template_manager)


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu_wrapper(callback, state):
    await handlers.back_to_main_menu(callback, state, template_manager)


@dp.callback_query(lambda c: c.data == "back_to_category")
async def back_to_category_menu_wrapper(callback, state):
    await handlers.back_to_category_menu(callback, state, template_manager)


@dp.callback_query(lambda c: c.data == "switch_language")
async def switch_language_wrapper(callback, state):
    await handlers.switch_language(callback, state, template_manager)


@dp.callback_query(lambda c: c.data == "search")
async def start_search_wrapper(callback, state):
    await handlers.start_search(callback, state, template_manager)


@dp.message(StateFilter(UserStates.search_mode))
async def process_search_query_wrapper(message, state):
    await handlers.process_search_query(message, state, template_manager)


@dp.callback_query(lambda c: c.data == "coming_soon")
async def coming_soon_wrapper(callback):
    await handlers.coming_soon(callback, template_manager)


async def global_error_handler(event, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è dispatcher"""
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
    await error_handler.handle_error(exception, event)
    return True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('./data', exist_ok=True)
        os.makedirs('./logs', exist_ok=True)

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(template_manager.templates.keys())}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è dispatcher
        dp.errors.register(global_error_handler)
        
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await error_handler.handle_error(e)
        sys.exit(1)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")


if __name__ == '__main__':
    asyncio.run(main())
