#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.ai.service import ai_service
from src.ai.conversation_memory import conversation_memory


@pytest.mark.asyncio
async def test_conversation_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò –†–ê–ó–ì–û–í–û–†–ê")
    print("=" * 50)

    user_id = 12345

    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    conversation_memory.clear_session(user_id)

    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    conversation = [
        ("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", "ukr"),
        ("–ê —Ñ—É—Ç–±–æ–ª–∫–∏?", "ukr"),  # –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        ("–ú–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –µ–∫—Å–ø—Ä–µ—Å-–¥–æ—Å—Ç–∞–≤–∫—É?", "ukr"),
    ]

    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    print()

    for i, (question, lang) in enumerate(conversation, 1):
        print(f'üìù –°–æ–æ–±—â–µ–Ω–∏–µ {i}: "{question}"')
        print("-" * 40)

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            result = await ai_service.process_query(question, user_id, lang)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {result['answer']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            stats = conversation_memory.get_session_stats(user_id)
            print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏: {stats['message_count']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if i < len(conversation):
                context = conversation_memory.get_conversation_context(user_id)
                print(f"üí≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(context)} —Å–æ–æ–±—â–µ–Ω–∏–π")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print()

    print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    stats = conversation_memory.get_session_stats(user_id)
    if stats["exists"]:
        print(f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏: {stats['message_count']}")
        print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {stats['created_at']}")
        print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity']}")
        print(f"  ‚Ä¢ –Ø–∑—ã–∫: {stats['language']}")
        print(f"  ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏: {stats['age_hours']:.2f} —á–∞—Å–æ–≤")
    else:
        print("  ‚Ä¢ –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@pytest.mark.asyncio
async def test_context_understanding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüéØ –¢–ï–°–¢ –ü–û–ù–ò–ú–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê")
    print("=" * 50)

    user_id = 54321
    conversation_memory.clear_session(user_id)

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    print("üë§ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
    result1 = await ai_service.process_query("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –≤–∏–∑–∏—Ç–∫–∞—Ö", user_id, "rus")
    print(f"ü§ñ –û—Ç–≤–µ—Ç 1: {result1['answer'][:100]}...")

    print("\nüë§ –ó–∞–¥–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
    result2 = await ai_service.process_query("–ê —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å?", user_id, "rus")
    print(f"ü§ñ –û—Ç–≤–µ—Ç 2: {result2['answer']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∑–∏—Ç–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
    if (
        "–≤–∏–∑–∏—Ç" in result2["answer"].lower()
        or "158" in result2["answer"]
        or "920" in result2["answer"]
    ):
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –≤–∏–∑–∏—Ç–∫–∞—Ö!")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")


if __name__ == "__main__":
    asyncio.run(test_conversation_memory())
    asyncio.run(test_context_understanding())
