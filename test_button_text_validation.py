#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ button_text
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —à–∞–±–ª–æ–Ω—ã –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ button_text –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –º–µ–Ω—é
"""

import csv
import tempfile
import os
from src.core.template_manager import TemplateManager


def create_test_csv():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏ button_text"""
    test_data = [
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        [
            "category",
            "subcategory",
            "button_text",
            "keywords",
            "answer_ukr",
            "answer_rus",
            "sort_order",
        ],
        # –í–∞–ª–∏–¥–Ω—ã–µ button_text - –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é
        ["–≤–∏–∑–∏—Ç–∫–∏", "valid1", "üí∞ –¶–µ–Ω–∞ –≤–∏–∑–∏—Ç–æ–∫", "—Ü–µ–Ω–∞,—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "1"],
        ["–≤–∏–∑–∏—Ç–∫–∏", "valid2", "üìè –†–∞–∑–º–µ—Ä—ã –≤–∏–∑–∏—Ç–æ–∫", "—Ä–∞–∑–º–µ—Ä,—Ñ–æ—Ä–º–∞—Ç", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "2"],
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ button_text - –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        ["–≤–∏–∑–∏—Ç–∫–∏", "invalid1", "", "–º–∞—Ç–µ—Ä–∏–∞–ª,–±—É–º–∞–≥–∞", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "3"],  # –ü—É—Å—Ç–æ–π
        ["–≤–∏–∑–∏—Ç–∫–∏", "invalid2", "-", "–ø–æ–∫—Ä—ã—Ç–∏–µ,–ª–∞–º–∏–Ω–∞—Ç", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "4"],  # –î–µ—Ñ–∏—Å
        [
            "–≤–∏–∑–∏—Ç–∫–∏",
            "invalid3",
            "_",
            "–ø–µ—á–∞—Ç—å,–∫–∞—á–µ—Å—Ç–≤–æ",
            "–û—Ç–≤–µ—Ç —É–∫—Ä",
            "–û—Ç–≤–µ—Ç —Ä—É—Å",
            "5",
        ],  # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        ["–≤–∏–∑–∏—Ç–∫–∏", "invalid4", ".", "–¥–æ—Å—Ç–∞–≤–∫–∞,–≤—Ä–µ–º—è", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "6"],  # –¢–æ—á–∫–∞
        ["–≤–∏–∑–∏—Ç–∫–∏", "invalid5", "todo", "–º–∞–∫–µ—Ç,–¥–∏–∑–∞–π–Ω", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "7"],  # TODO
        ["–≤–∏–∑–∏—Ç–∫–∏", "invalid6", "TBD", "—Å—Ä–æ–∫,–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", "–û—Ç–≤–µ—Ç —É–∫—Ä", "–û—Ç–≤–µ—Ç —Ä—É—Å", "8"],  # TBD
        [
            "–≤–∏–∑–∏—Ç–∫–∏",
            "invalid7",
            "x",
            "–ª–æ–≥–æ—Ç–∏–ø,–±—Ä–µ–Ω–¥–∏–Ω–≥",
            "–û—Ç–≤–µ—Ç —É–∫—Ä",
            "–û—Ç–≤–µ—Ç —Ä—É—Å",
            "9",
        ],  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        # –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        [
            "–≤–∏–∑–∏—Ç–∫–∏",
            "edge1",
            "AB",
            "—Ç–µ—Å—Ç1,—Ç–µ—Å—Ç2",
            "–û—Ç–≤–µ—Ç —É–∫—Ä",
            "–û—Ç–≤–µ—Ç —Ä—É—Å",
            "10",
        ],  # –ú–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∞–ª–∏–¥–Ω—ã–π)
        [
            "–≤–∏–∑–∏—Ç–∫–∏",
            "edge2",
            "A" * 100,
            "—Ç–µ—Å—Ç3,—Ç–µ—Å—Ç4",
            "–û—Ç–≤–µ—Ç —É–∫—Ä",
            "–û—Ç–≤–µ—Ç —Ä—É—Å",
            "11",
        ],  # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∞–ª–∏–¥–Ω—ã–π)
        [
            "–≤–∏–∑–∏—Ç–∫–∏",
            "edge3",
            "A" * 101,
            "—Ç–µ—Å—Ç5,—Ç–µ—Å—Ç6",
            "–û—Ç–≤–µ—Ç —É–∫—Ä",
            "–û—Ç–≤–µ—Ç —Ä—É—Å",
            "12",
        ],  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π)
    ]

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(mode="w", suffix=".csv", delete=False, encoding="utf-8")

    writer = csv.writer(temp_file, delimiter=";")
    for row in test_data:
        writer.writerow(row)

    temp_file.close()
    return temp_file.name


def test_button_text_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ button_text"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ button_text...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV
    test_csv_path = create_test_csv()

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        original_visitki_path = os.environ.get("VISITKI_CSV_PATH")
        os.environ["VISITKI_CSV_PATH"] = test_csv_path

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TemplateManager
        tm = TemplateManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        all_templates = tm.get_category_templates("–≤–∏–∑–∏—Ç–∫–∏")
        menu_templates = tm.get_menu_templates("–≤–∏–∑–∏—Ç–∫–∏")
        knowledge_templates = tm.get_knowledge_base_templates("–≤–∏–∑–∏—Ç–∫–∏")

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(all_templates)}")
        print(f"‚Ä¢ –í –º–µ–Ω—é: {len(menu_templates)}")
        print(f"‚Ä¢ –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {len(knowledge_templates)}")
        print(f"‚Ä¢ –¢–æ–ª—å–∫–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {len(all_templates) - len(menu_templates)}")

        print(f"\n‚úÖ –®–∞–±–ª–æ–Ω—ã –≤ –º–µ–Ω—é:")
        for template in menu_templates:
            print(f"  ‚Ä¢ {template.subcategory}: '{template.button_text}'")

        print(f"\nüîç –®–∞–±–ª–æ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:")
        knowledge_only = [t for t in all_templates if not getattr(t, "has_menu_button", True)]
        for template in knowledge_only:
            print(
                f"  ‚Ä¢ {template.subcategory}: '{template.button_text}' (keywords: {', '.join(template.keywords)})"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:")

        # –í–∞–ª–∏–¥–Ω—ã–µ —Å–ª—É—á–∞–∏
        valid_cases = ["valid1", "valid2", "edge1", "edge2"]
        for case in valid_cases:
            template = next((t for t in all_templates if t.subcategory == case), None)
            if template:
                has_menu = getattr(template, "has_menu_button", True)
                status = "‚úÖ –í –º–µ–Ω—é" if has_menu else "‚ùå –ù–µ –≤ –º–µ–Ω—é"
                print(f"  ‚Ä¢ {case}: {status} - '{template.button_text}'")

        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–ª—É—á–∞–∏
        invalid_cases = [
            "invalid1",
            "invalid2",
            "invalid3",
            "invalid4",
            "invalid5",
            "invalid6",
            "invalid7",
            "edge3",
        ]
        for case in invalid_cases:
            template = next((t for t in all_templates if t.subcategory == case), None)
            if template:
                has_menu = getattr(template, "has_menu_button", True)
                status = "‚ùå –ù–µ –≤ –º–µ–Ω—é" if not has_menu else "‚úÖ –í –º–µ–Ω—é (–æ—à–∏–±–∫–∞!)"
                print(f"  ‚Ä¢ {case}: {status} - '{template.button_text}'")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print(f"\nüî¨ –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ _is_valid_button_text:")
        test_values = [
            ("", False),
            ("-", False),
            ("_", False),
            (".", False),
            ("todo", False),
            ("TBD", False),
            ("x", False),
            ("AB", True),
            ("üí∞ –¶–µ–Ω–∞ –≤–∏–∑–∏—Ç–æ–∫", True),
            ("A" * 100, True),
            ("A" * 101, False),
        ]

        for value, expected in test_values:
            result = tm._is_valid_button_text(value)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"  {status} '{value}' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

    finally:
        # –û—á–∏—â–∞–µ–º
        if original_visitki_path:
            os.environ["VISITKI_CSV_PATH"] = original_visitki_path
        else:
            os.environ.pop("VISITKI_CSV_PATH", None)

        os.unlink(test_csv_path)

    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    test_button_text_validation()
