"""
–¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö, –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.ai.knowledge_base import knowledge_base
from src.ai.rag_service import rag_service


@pytest.mark.asyncio
async def test_knowledge_base():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    success = knowledge_base.populate_vector_store(force_reload=True)
    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = knowledge_base.get_statistics()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    print(f"  üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 0)}")
    print(f"  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(stats.get('categories', {}).keys())}")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    test_queries = [
        ("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", "ukr"),
        ("—Ü–µ–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∏", "rus"),
        ("—Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è", "ukr"),
        ("–∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏", "rus"),
        ("—á—Ç–æ-—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ", "ukr"),
    ]

    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:")
    print("=" * 60)

    for i, (query, lang) in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}' (—è–∑—ã–∫: {lang})")

        # –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        results = knowledge_base.search_knowledge(query, lang, n_results=2)

        if results:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for j, result in enumerate(results, 1):
                relevance = result.get("relevance_score", 0)
                category = result.get("category", "unknown")
                answer = (
                    result.get("answer", "")[:100] + "..."
                    if len(result.get("answer", "")) > 100
                    else result.get("answer", "")
                )
                print(f"      {j}. [{category}] –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.3f}")
                print(f"         –û—Ç–≤–µ—Ç: {answer}")
        else:
            print("   ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


@pytest.mark.asyncio
async def test_rag_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG —Å–µ—Ä–≤–∏—Å"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞...")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        ("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", "ukr"),
        ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —Ñ—É—Ç–±–æ–ª–∫–∏?", "rus"),
        ("–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è?", "ukr"),
        ("–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω?", "rus"),
    ]

    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
    print("=" * 60)

    for i, (query, lang) in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}' (—è–∑—ã–∫: {lang})")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await rag_service.get_context_for_query(query, lang)

        if context:
            print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {context[:200]}{'...' if len(context) > 200 else ''}")

            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = rag_service.create_system_prompt(lang, context)
            print(f"   üìã –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print("   ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = rag_service.create_system_prompt(lang)
            print(f"   üìã –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")


@pytest.mark.asyncio
async def test_csv_data_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ CSV –¥–∞–Ω–Ω—ã—Ö...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    csv_data = knowledge_base.load_csv_data()

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(csv_data)}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for item in csv_data:
        category = item["category"]
        if category not in categories:
            categories[category] = []
        categories[category].append(item)

    print("\nüìÇ –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, items in categories.items():
        print(f"  {category}: {len(items)} –∑–∞–ø–∏—Å–µ–π")
        if items:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
            first_item = items[0]
            keywords = first_item.get("keywords", "")[:50]
            answer_ukr = first_item.get("answer_ukr", "")[:50]
            print(f"    –ü—Ä–∏–º–µ—Ä - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}...")
            print(f"           - –û—Ç–≤–µ—Ç (—É–∫—Ä): {answer_ukr}...")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    try:
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ CSV –¥–∞–Ω–Ω—ã—Ö
        await test_csv_data_loading()

        # –¢–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        await test_knowledge_base()

        # –¢–µ—Å—Ç RAG —Å–µ—Ä–≤–∏—Å–∞
        await test_rag_service()

        print("\n" + "=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
