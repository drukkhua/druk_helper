"""
–¢–µ—Å—Ç—ã –¥–ª—è handlers
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –±–æ—Ç–∞
"""

import asyncio
import pytest
from unittest.mock import AsyncMock, Mock, patch

from handlers import (
    cmd_reload,
    cmd_start,
    cmd_stats,
    process_category_selection,
    process_template_selection,
)


class TestHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_cmd_start_new_user(self, mock_telegram_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_telegram_message.answer = AsyncMock()

        with patch("handlers.create_main_menu_keyboard") as mock_keyboard:
            mock_keyboard.return_value = Mock()
            mock_template_manager = Mock()
            mock_template_manager.get_user_language.return_value = "ukr"
            await cmd_start(mock_telegram_message, Mock(), mock_template_manager)

            mock_telegram_message.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            call_args = mock_telegram_message.answer.call_args
            assert "reply_markup" in call_args.kwargs

    @pytest.mark.asyncio
    async def test_cmd_start_admin_user(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()

        with patch("handlers.create_main_menu_keyboard") as mock_keyboard:
            mock_keyboard.return_value = Mock()
            mock_template_manager = Mock()
            mock_template_manager.get_user_language.return_value = "ukr"
            await cmd_start(mock_telegram_message, Mock(), mock_template_manager)

            mock_telegram_message.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_cmd_stats_admin(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()

        mock_stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:\nüìá –í–∏–∑–∏—Ç–∫–∏: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"

        mock_stats_manager = Mock()
        mock_stats_manager.get_stats_summary.return_value = mock_stats_text
        mock_tm = Mock()
        mock_tm.stats = mock_stats_manager

        with patch("handlers.ADMIN_USER_IDS", [123456789]):
            await cmd_stats(mock_telegram_message, mock_tm)

            mock_telegram_message.answer.assert_called_once()
            call_args = mock_telegram_message.answer.call_args[0][0]
            assert "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in call_args

    @pytest.mark.asyncio
    async def test_cmd_stats_non_admin(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_telegram_message.from_user.id = 999999999  # –ù–µ –∞–¥–º–∏–Ω
        mock_telegram_message.answer = AsyncMock()

        with patch("handlers.ADMIN_USER_IDS", [123456789]):
            await cmd_stats(mock_telegram_message, Mock())

            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
            mock_telegram_message.answer.assert_not_called()

    @pytest.mark.asyncio
    async def test_cmd_reload_admin_success(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /reload –¥–ª—è –∞–¥–º–∏–Ω–∞ - —É—Å–ø–µ—à–Ω–æ"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()

        with (
            patch("google_sheets_updater.update_templates_from_sheets") as mock_update,
            patch("handlers.ADMIN_USER_IDS", [123456789]),
        ):
            mock_update.return_value = asyncio.Future()
            mock_update.return_value.set_result(True)
            mock_tm = Mock()
            mock_tm.reload_templates.return_value = None
            mock_tm.templates = {"–≤–∏–∑–∏—Ç–∫–∏": [1, 2, 3], "—Ñ—É—Ç–±–æ–ª–∫–∏": [1, 2, 3]}

            await cmd_reload(mock_telegram_message, mock_tm)

            mock_telegram_message.answer.assert_called()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ)
            assert mock_telegram_message.answer.call_count >= 2

    @pytest.mark.asyncio
    async def test_cmd_reload_admin_failure(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /reload –¥–ª—è –∞–¥–º–∏–Ω–∞ - –æ—à–∏–±–∫–∞"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()

        with (
            patch("google_sheets_updater.update_templates_from_sheets") as mock_update,
            patch("handlers.ADMIN_USER_IDS", [123456789]),
        ):
            mock_update.return_value = asyncio.Future()
            mock_update.return_value.set_result(False)

            await cmd_reload(mock_telegram_message, Mock())

            mock_telegram_message.answer.assert_called()

    @pytest.mark.asyncio
    async def test_callback_category_valid(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        mock_callback_query.data = "category_–≤–∏–∑–∏—Ç–∫–∏"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        mock_state = AsyncMock()
        mock_state.update_data = AsyncMock()
        mock_template_manager = Mock()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        template1 = Mock()
        template1.subcategory = "1"
        template1.button_text = "üí∞ –¶–µ–Ω–∞"
        template1.sort_order = 1

        template2 = Mock()
        template2.subcategory = "2"
        template2.button_text = "üé® –ú–∞–∫–µ—Ç"
        template2.sort_order = 2

        sample_templates = [template1, template2]

        mock_template_manager.templates = {"–≤–∏–∑–∏—Ç–∫–∏": sample_templates}
        mock_template_manager.get_user_language.return_value = "ukr"

        with (
            patch("keyboards.create_category_menu_keyboard") as mock_keyboard,
            patch("keyboards.get_category_title") as mock_title,
        ):
            mock_keyboard.return_value = Mock()
            mock_title.return_value = "üìá –í—ñ–∑–∏—Ç–∫–∏"

            await process_category_selection(
                mock_callback_query, mock_state, mock_template_manager
            )

            mock_callback_query.message.edit_text.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_category_empty(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤"""
        mock_callback_query.data = "category_–ø—É—Å—Ç–∞—è"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        mock_state = Mock()
        mock_template_manager = Mock()

        mock_template_manager.templates = {}
        mock_template_manager.get_user_language.return_value = "ukr"

        await process_category_selection(
            mock_callback_query, mock_state, mock_template_manager
        )

        mock_callback_query.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_template_found(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        mock_callback_query.data = "template_–≤–∏–∑–∏—Ç–∫–∏_1"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()

        sample_template = Mock()
        sample_template.sort_order = 1
        sample_template.category = "–≤–∏–∑–∏—Ç–∫–∏"
        sample_template.subcategory = "1"

        mock_tm = Mock()
        mock_tm.get_template_by_subcategory.return_value = sample_template
        mock_tm.get_template_text.return_value = "–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"
        mock_tm.get_user_language.return_value = "ukr"
        mock_tm.stats = Mock()

        with patch("keyboards.create_template_keyboard") as mock_keyboard:
            mock_keyboard.return_value = Mock()

            # –°–æ–∑–¥–∞–µ–º AsyncMock –¥–ª—è state
            mock_state = AsyncMock()
            mock_state.update_data = AsyncMock()

            await process_template_selection(mock_callback_query, mock_state, mock_tm)

            mock_callback_query.message.edit_text.assert_called_once()
            mock_tm.stats.log_template_usage.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_template_not_found(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        mock_callback_query.data = "template_–≤–∏–∑–∏—Ç–∫–∏_999"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()

        mock_tm = Mock()
        mock_tm.get_template_by_subcategory.return_value = None
        mock_tm.get_user_language.return_value = "rus"

        # –°–æ–∑–¥–∞–µ–º AsyncMock –¥–ª—è state
        mock_state = AsyncMock()
        mock_state.update_data = AsyncMock()

        await process_template_selection(mock_callback_query, mock_state, mock_tm)

        mock_callback_query.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_template_language_preference(self, mock_callback_query):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        mock_callback_query.data = "template_–≤–∏–∑–∏—Ç–∫–∏_1"
        mock_callback_query.from_user.language_code = "uk"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()

        sample_template = Mock()
        sample_template.sort_order = 1
        sample_template.category = "–≤–∏–∑–∏—Ç–∫–∏"
        sample_template.subcategory = "1"

        mock_tm = Mock()
        mock_tm.get_template_by_subcategory.return_value = sample_template
        mock_tm.get_user_language.return_value = "ukr"
        mock_tm.get_template_text.return_value = "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç"
        mock_tm.stats = Mock()

        with patch("keyboards.create_template_keyboard") as mock_keyboard:
            mock_keyboard.return_value = Mock()

            # –°–æ–∑–¥–∞–µ–º AsyncMock –¥–ª—è state
            mock_state = AsyncMock()
            mock_state.update_data = AsyncMock()

            await process_template_selection(mock_callback_query, mock_state, mock_tm)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            call_args = mock_callback_query.message.edit_text.call_args[0][0]
            assert "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç" in call_args
