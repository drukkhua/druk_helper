"""
–¢–µ—Å—Ç—ã –¥–ª—è handlers
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –±–æ—Ç–∞
"""

import pytest
from unittest.mock import Mock, patch, AsyncMock

from handlers import cmd_start, cmd_stats, cmd_reload, callback_category, callback_template


class TestHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_cmd_start_new_user(self, mock_telegram_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_telegram_message.answer = AsyncMock()
        
        with patch('handlers.get_main_keyboard') as mock_keyboard:
            mock_keyboard.return_value = Mock()
            await cmd_start(mock_telegram_message)
            
            mock_telegram_message.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            call_args = mock_telegram_message.answer.call_args
            assert 'reply_markup' in call_args.kwargs

    @pytest.mark.asyncio
    async def test_cmd_start_admin_user(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()
        
        with patch('handlers.Config', mock_config), \
             patch('handlers.get_main_keyboard') as mock_keyboard:
            mock_keyboard.return_value = Mock()
            await cmd_start(mock_telegram_message)
            
            mock_telegram_message.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_cmd_stats_admin(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()
        
        mock_stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:\nüìá –í–∏–∑–∏—Ç–∫–∏: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        
        with patch('handlers.Config', mock_config), \
             patch('handlers.get_stats_text') as mock_get_stats:
            mock_get_stats.return_value = mock_stats_text
            await cmd_stats(mock_telegram_message)
            
            mock_telegram_message.answer.assert_called_once()
            call_args = mock_telegram_message.answer.call_args[0][0]
            assert "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in call_args

    @pytest.mark.asyncio
    async def test_cmd_stats_non_admin(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_telegram_message.from_user.id = 999999999  # –ù–µ –∞–¥–º–∏–Ω
        mock_telegram_message.answer = AsyncMock()
        
        with patch('handlers.Config', mock_config):
            await cmd_stats(mock_telegram_message)
            
            mock_telegram_message.answer.assert_called_once()
            call_args = mock_telegram_message.answer.call_args[0][0]
            assert "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤" in call_args

    @pytest.mark.asyncio
    async def test_cmd_reload_admin_success(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /reload –¥–ª—è –∞–¥–º–∏–Ω–∞ - —É—Å–ø–µ—à–Ω–æ"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()
        
        with patch('handlers.Config', mock_config), \
             patch('handlers.update_templates_from_sheets') as mock_update, \
             patch('handlers.template_manager') as mock_tm:
            mock_update.return_value = True
            mock_tm.load_templates.return_value = True
            mock_tm.get_total_templates_count.return_value = 84
            
            await cmd_reload(mock_telegram_message)
            
            mock_telegram_message.answer.assert_called()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—Ö)
            last_call = mock_telegram_message.answer.call_args_list[-1][0][0]
            assert "‚úÖ" in last_call and "84" in last_call

    @pytest.mark.asyncio
    async def test_cmd_reload_admin_failure(self, mock_telegram_message, mock_config):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /reload –¥–ª—è –∞–¥–º–∏–Ω–∞ - –æ—à–∏–±–∫–∞"""
        mock_telegram_message.from_user.id = 123456789  # ID –∞–¥–º–∏–Ω–∞
        mock_telegram_message.answer = AsyncMock()
        
        with patch('handlers.Config', mock_config), \
             patch('handlers.update_templates_from_sheets') as mock_update:
            mock_update.return_value = False
            
            await cmd_reload(mock_telegram_message)
            
            mock_telegram_message.answer.assert_called()
            last_call = mock_telegram_message.answer.call_args_list[-1][0][0]
            assert "‚ùå" in last_call

    @pytest.mark.asyncio
    async def test_callback_category_valid(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        mock_callback_query.data = "category_–≤–∏–∑–∏—Ç–∫–∏"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        
        sample_templates = [
            {'subcategory': '1', 'button_text': 'üí∞ –¶–µ–Ω–∞', 'sort_order': '1'},
            {'subcategory': '2', 'button_text': 'üé® –ú–∞–∫–µ—Ç', 'sort_order': '2'}
        ]
        
        with patch('handlers.template_manager') as mock_tm, \
             patch('handlers.get_category_keyboard') as mock_keyboard:
            mock_tm.get_templates_by_category.return_value = sample_templates
            mock_keyboard.return_value = Mock()
            
            await callback_category(mock_callback_query)
            
            mock_callback_query.answer.assert_called_once()
            mock_callback_query.message.edit_text.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_category_empty(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤"""
        mock_callback_query.data = "category_–ø—É—Å—Ç–∞—è"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        
        with patch('handlers.template_manager') as mock_tm:
            mock_tm.get_templates_by_category.return_value = []
            
            await callback_category(mock_callback_query)
            
            mock_callback_query.answer.assert_called_once()
            call_args = mock_callback_query.message.edit_text.call_args[0][0]
            assert "—à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in call_args

    @pytest.mark.asyncio
    async def test_callback_template_found(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        mock_callback_query.data = "template_–≤–∏–∑–∏—Ç–∫–∏_1"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        
        sample_template = {
            'category': '–≤–∏–∑–∏—Ç–∫–∏',
            'subcategory': '1',
            'button_text': 'üí∞ –¶–µ–Ω–∞',
            'answer_ukr': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç',
            'answer_rus': '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
        }
        
        with patch('handlers.template_manager') as mock_tm, \
             patch('handlers.get_template_keyboard') as mock_keyboard, \
             patch('handlers.update_template_stats') as mock_stats:
            mock_tm.get_template_by_subcategory.return_value = sample_template
            mock_keyboard.return_value = Mock()
            
            await callback_template(mock_callback_query)
            
            mock_callback_query.answer.assert_called_once()
            mock_callback_query.message.edit_text.assert_called_once()
            mock_stats.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_template_not_found(self, mock_callback_query):
        """–¢–µ—Å—Ç callback –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        mock_callback_query.data = "template_–≤–∏–∑–∏—Ç–∫–∏_999"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        
        with patch('handlers.template_manager') as mock_tm:
            mock_tm.get_template_by_subcategory.return_value = None
            
            await callback_template(mock_callback_query)
            
            mock_callback_query.answer.assert_called_once()
            call_args = mock_callback_query.message.edit_text.call_args[0][0]
            assert "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" in call_args

    @pytest.mark.asyncio
    async def test_callback_template_language_preference(self, mock_callback_query):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        mock_callback_query.data = "template_–≤–∏–∑–∏—Ç–∫–∏_1"
        mock_callback_query.from_user.language_code = "uk"
        mock_callback_query.answer = AsyncMock()
        mock_callback_query.message.edit_text = AsyncMock()
        
        sample_template = {
            'category': '–≤–∏–∑–∏—Ç–∫–∏',
            'subcategory': '1',
            'button_text': 'üí∞ –¶–µ–Ω–∞',
            'answer_ukr': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç',
            'answer_rus': '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
        }
        
        with patch('handlers.template_manager') as mock_tm, \
             patch('handlers.get_template_keyboard') as mock_keyboard, \
             patch('handlers.update_template_stats') as mock_stats:
            mock_tm.get_template_by_subcategory.return_value = sample_template
            mock_keyboard.return_value = Mock()
            
            await callback_template(mock_callback_query)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            call_args = mock_callback_query.message.edit_text.call_args[0][0]
            assert "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç" in call_args