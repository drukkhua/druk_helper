"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è pytest
–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
"""

import shutil
import tempfile

import os
import pytest
import sys
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
from src.core.template_manager import TemplateManager


@pytest.fixture
def mock_config():
    """–ú–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    config = Mock(spec=Config)
    config.BOT_TOKEN = "test_token"
    config.ADMIN_USER_IDS = [123456789]
    config.GOOGLE_SHEETS_API_KEY = "test_api_key"
    config.DEBUG = True
    return config


@pytest.fixture
def temp_data_dir():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    temp_dir = tempfile.mkdtemp()
    yield temp_dir
    shutil.rmtree(temp_dir)


@pytest.fixture
def sample_csv_content():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CSV —Ñ–∞–π–ª–∞"""
    return """category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order
–≤–∏–∑–∏—Ç–∫–∏;1;üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–∞;—Ü–µ–Ω–∞,—Ç–µ—Å—Ç;–¢–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é;–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º;1
–≤–∏–∑–∏—Ç–∫–∏;2;üé® –¢–µ—Å—Ç –º–∞–∫–µ—Ç;–º–∞–∫–µ—Ç,–¥–∏–∑–∞–π–Ω;–¢–µ—Å—Ç–æ–≤–∏–π –º–∞–∫–µ—Ç;–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–∫–µ—Ç;2"""


@pytest.fixture
def sample_templates():
    """–ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    return [
        {
            "category": "–≤–∏–∑–∏—Ç–∫–∏",
            "subcategory": "1",
            "button_text": "üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–∞",
            "keywords": "—Ü–µ–Ω–∞,—Ç–µ—Å—Ç",
            "answer_ukr": "–¢–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é",
            "answer_rus": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "sort_order": "1",
        },
        {
            "category": "–≤–∏–∑–∏—Ç–∫–∏",
            "subcategory": "2",
            "button_text": "üé® –¢–µ—Å—Ç –º–∞–∫–µ—Ç",
            "keywords": "–º–∞–∫–µ—Ç,–¥–∏–∑–∞–π–Ω",
            "answer_ukr": "–¢–µ—Å—Ç–æ–≤–∏–π –º–∞–∫–µ—Ç",
            "answer_rus": "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–∫–µ—Ç",
            "sort_order": "2",
        },
    ]


@pytest.fixture
def mock_telegram_user():
    """–ú–æ–∫ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = Mock()
    user.id = 123456789
    user.first_name = "Test"
    user.last_name = "User"
    user.username = "testuser"
    user.language_code = "uk"
    return user


@pytest.fixture
def mock_telegram_message():
    """–ú–æ–∫ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = Mock()
    message.message_id = 1
    message.text = "/start"
    message.chat = Mock()
    message.chat.id = 123456789
    message.from_user = Mock()
    message.from_user.id = 123456789
    return message


@pytest.fixture
def mock_callback_query():
    """–ú–æ–∫ Telegram callback query"""
    callback = Mock()
    callback.id = "test_callback"
    callback.data = "category_–≤–∏–∑–∏—Ç–∫–∏"
    callback.from_user = Mock()
    callback.from_user.id = 123456789
    callback.message = Mock()
    callback.message.chat = Mock()
    callback.message.chat.id = 123456789
    return callback
