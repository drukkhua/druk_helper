"""
–¢–µ—Å—Ç—ã –¥–ª—è TemplateManager
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤, –ø–æ–∏—Å–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import pytest
import os
import tempfile
from unittest.mock import patch, mock_open

from template_manager import TemplateManager


class TestTemplateManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TemplateManager"""

    def test_init_template_manager(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TemplateManager"""
        tm = TemplateManager()
        assert tm.templates == {}
        assert tm.data_dir == "./data"

    def test_load_csv_file_success(self, temp_data_dir, sample_csv_content):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
        csv_file = os.path.join(temp_data_dir, "test_templates.csv")
        with open(csv_file, 'w', encoding='utf-8') as f:
            f.write(sample_csv_content)
        
        tm = TemplateManager()
        templates = tm._load_csv_file(csv_file)
        
        assert len(templates) == 2
        assert templates[0]['category'] == '–≤–∏–∑–∏—Ç–∫–∏'
        assert templates[0]['button_text'] == 'üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–∞'
        assert templates[1]['keywords'] == '–º–∞–∫–µ—Ç,–¥–∏–∑–∞–π–Ω'

    def test_load_csv_file_not_found(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        tm = TemplateManager()
        templates = tm._load_csv_file("nonexistent.csv")
        assert templates == []

    def test_load_csv_file_invalid_format(self, temp_data_dir):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        csv_file = os.path.join(temp_data_dir, "invalid.csv")
        with open(csv_file, 'w', encoding='utf-8') as f:
            f.write("invalid,csv,format\nno,headers,here")
        
        tm = TemplateManager()
        templates = tm._load_csv_file(csv_file)
        assert templates == []

    def test_validate_template_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        tm = TemplateManager()
        template = {
            'category': '–≤–∏–∑–∏—Ç–∫–∏',
            'subcategory': '1',
            'button_text': 'üí∞ –¶–µ–Ω–∞',
            'keywords': '—Ü–µ–Ω–∞,—Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'answer_ukr': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç',
            'answer_rus': '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç',
            'sort_order': '1'
        }
        assert tm._validate_template(template) is True

    def test_validate_template_missing_fields(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏"""
        tm = TemplateManager()
        template = {
            'category': '–≤–∏–∑–∏—Ç–∫–∏',
            'button_text': 'üí∞ –¶–µ–Ω–∞'
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        }
        assert tm._validate_template(template) is False

    def test_validate_template_empty_fields(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏"""
        tm = TemplateManager()
        template = {
            'category': '',
            'subcategory': '1',
            'button_text': 'üí∞ –¶–µ–Ω–∞',
            'keywords': '—Ü–µ–Ω–∞',
            'answer_ukr': '–¢–µ–∫—Å—Ç',
            'answer_rus': '–¢–µ–∫—Å—Ç',
            'sort_order': '1'
        }
        assert tm._validate_template(template) is False

    @patch('os.path.exists')
    @patch('template_manager.TemplateManager._load_csv_file')
    def test_load_templates_success(self, mock_load_csv, mock_exists):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        mock_exists.return_value = True
        mock_load_csv.return_value = [
            {
                'category': '–≤–∏–∑–∏—Ç–∫–∏',
                'subcategory': '1',
                'button_text': 'üí∞ –¶–µ–Ω–∞',
                'keywords': '—Ü–µ–Ω–∞',
                'answer_ukr': '–¢–µ–∫—Å—Ç',
                'answer_rus': '–¢–µ–∫—Å—Ç',
                'sort_order': '1'
            }
        ]
        
        tm = TemplateManager()
        success = tm.load_templates()
        
        assert success is True
        assert '–≤–∏–∑–∏—Ç–∫–∏' in tm.templates
        assert len(tm.templates['–≤–∏–∑–∏—Ç–∫–∏']) == 1

    def test_get_categories(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        categories = tm.get_categories()
        assert '–≤–∏–∑–∏—Ç–∫–∏' in categories
        assert len(categories) == 1

    def test_get_templates_by_category(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        templates = tm.get_templates_by_category('–≤–∏–∑–∏—Ç–∫–∏')
        assert len(templates) == 2
        assert templates[0]['button_text'] == 'üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–∞'

    def test_get_templates_by_category_not_found(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tm = TemplateManager()
        tm.templates = {}
        
        templates = tm.get_templates_by_category('–Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        assert templates == []

    def test_get_template_by_subcategory(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        template = tm.get_template_by_subcategory('–≤–∏–∑–∏—Ç–∫–∏', '1')
        assert template is not None
        assert template['button_text'] == 'üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–∞'

    def test_get_template_by_subcategory_not_found(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        template = tm.get_template_by_subcategory('–≤–∏–∑–∏—Ç–∫–∏', '999')
        assert template is None

    def test_search_templates(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        results = tm.search_templates('—Ü–µ–Ω–∞')
        assert len(results) == 1
        assert results[0]['button_text'] == 'üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–∞'
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        results = tm.search_templates('–º–∞–∫–µ—Ç')
        assert len(results) == 1
        assert results[0]['button_text'] == 'üé® –¢–µ—Å—Ç –º–∞–∫–µ—Ç'

    def test_search_templates_no_results(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        results = tm.search_templates('–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ')
        assert results == []

    def test_search_templates_case_insensitive(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        tm = TemplateManager()
        tm.templates = {'–≤–∏–∑–∏—Ç–∫–∏': sample_templates}
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        results1 = tm.search_templates('–¶–ï–ù–ê')
        results2 = tm.search_templates('—Ü–µ–Ω–∞')
        results3 = tm.search_templates('–¶–µ–Ω–∞')
        
        assert len(results1) == len(results2) == len(results3) == 1

    def test_get_total_templates_count(self, sample_templates):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        tm = TemplateManager()
        tm.templates = {
            '–≤–∏–∑–∏—Ç–∫–∏': sample_templates,
            '—Ñ—É—Ç–±–æ–ª–∫–∏': sample_templates.copy()
        }
        
        total = tm.get_total_templates_count()
        assert total == 4  # 2 + 2

    def test_get_total_templates_count_empty(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
        tm = TemplateManager()
        tm.templates = {}
        
        total = tm.get_total_templates_count()
        assert total == 0