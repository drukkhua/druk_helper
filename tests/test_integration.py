"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import pytest
import tempfile
import os
from unittest.mock import Mock, patch, AsyncMock

from template_manager import TemplateManager
from google_sheets_updater import GoogleSheetsUpdater


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""

    @pytest.fixture
    def integration_temp_dir(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        temp_dir = tempfile.mkdtemp()
        yield temp_dir
        import shutil
        shutil.rmtree(temp_dir)

    def test_template_manager_and_google_sheets_integration(self, integration_temp_dir):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TemplateManager —Å GoogleSheetsUpdater"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ CSV —Ñ–∞–π–ª—ã
        test_files = {
            'visitki_templates.csv': """category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order
–≤–∏–∑–∏—Ç–∫–∏;1;üí∞ –¶–µ–Ω–∞;—Ü–µ–Ω–∞,—Å—Ç–æ–∏–º–æ—Å—Ç—å;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç;–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç;1
–≤–∏–∑–∏—Ç–∫–∏;2;üé® –ú–∞–∫–µ—Ç;–º–∞–∫–µ—Ç,–¥–∏–∑–∞–π–Ω;–ú–∞–∫–µ—Ç –£–ö–†;–ú–∞–∫–µ—Ç –†–£–°;2""",
            
            'futbolki_templates.csv': """category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order
—Ñ—É—Ç–±–æ–ª–∫–∏;1;üí∞ –¶–µ–Ω–∞;—Ü–µ–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∏;–§—É—Ç–±–æ–ª–∫–∞ –£–ö–†;–§—É—Ç–±–æ–ª–∫–∞ –†–£–°;1"""
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
        for filename, content in test_files.items():
            filepath = os.path.join(integration_temp_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TemplateManager
        tm = TemplateManager()
        tm.data_dir = integration_temp_dir
        
        success = tm.load_templates()
        assert success is True
        assert len(tm.templates) == 2
        assert '–≤–∏–∑–∏—Ç–∫–∏' in tm.templates
        assert '—Ñ—É—Ç–±–æ–ª–∫–∏' in tm.templates
        assert len(tm.templates['–≤–∏–∑–∏—Ç–∫–∏']) == 2
        assert len(tm.templates['—Ñ—É—Ç–±–æ–ª–∫–∏']) == 1

    @patch('requests.get')
    def test_google_sheets_to_template_manager_flow(self, mock_get, integration_temp_dir):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: Google Sheets -> CSV -> TemplateManager"""
        
        # –ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ Google Sheets API (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
        mock_sheets_response = Mock()
        mock_sheets_response.raise_for_status.return_value = None
        mock_sheets_response.json.return_value = {
            "sheets": [
                {"properties": {"sheetId": 0, "title": "–≤–∏–∑–∏—Ç–∫–∏"}},
                {"properties": {"sheetId": 123, "title": "—Ñ—É—Ç–±–æ–ª–∫–∏"}}
            ]
        }
        
        # –ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ CSV export
        mock_csv_response = Mock()
        mock_csv_response.raise_for_status.return_value = None
        mock_csv_response.content = b'''category,subcategory,button_text,keywords,answer_ukr,answer_rus,sort_order
\xd0\xb2\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x82\xd0\xba\xd0\xb8,1,\xf0\x9f\x92\xb0 \xd0\xa6\xd0\xb5\xd0\xbd\xd0\xb0,\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb0,\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb8\xd0\xb9,\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9,1'''
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock'–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö URL'–æ–≤
        def mock_get_side_effect(url, **kwargs):
            if 'spreadsheets' in url and 'export' not in url:
                return mock_sheets_response
            elif 'export' in url:
                return mock_csv_response
            return Mock()
        
        mock_get.side_effect = mock_get_side_effect
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GoogleSheetsUpdater
        updater = GoogleSheetsUpdater()
        updater.output_dir = integration_temp_dir
        
        test_url = "https://docs.google.com/spreadsheets/d/test_id/edit"
        success = updater.update_templates_from_google_sheets(test_url)
        assert success is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        expected_files = ['visitki_templates.csv', 'futbolki_templates.csv']
        for filename in expected_files:
            filepath = os.path.join(integration_temp_dir, filename)
            assert os.path.exists(filepath)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ TemplateManager
        tm = TemplateManager()
        tm.data_dir = integration_temp_dir
        success = tm.load_templates()
        assert success is True
        assert len(tm.templates) >= 1

    @patch('handlers.template_manager')
    @patch('handlers.update_templates_from_sheets')
    async def test_reload_command_integration(self, mock_update_sheets, mock_template_manager):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /reload —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤"""
        from handlers import cmd_reload
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_update_sheets.return_value = True
        mock_template_manager.load_templates.return_value = True
        mock_template_manager.get_total_templates_count.return_value = 84
        
        # –ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        mock_message = Mock()
        mock_message.from_user.id = 123456789
        mock_message.answer = AsyncMock()
        
        with patch('handlers.Config') as mock_config:
            mock_config.ADMIN_USER_IDS = [123456789]
            
            await cmd_reload(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            mock_update_sheets.assert_called_once()
            mock_template_manager.load_templates.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            assert mock_message.answer.call_count >= 1
            last_call = mock_message.answer.call_args_list[-1][0][0]
            assert "‚úÖ" in last_call

    def test_search_functionality_integration(self, integration_temp_dir):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        test_data = {
            'visitki_templates.csv': """category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order
–≤–∏–∑–∏—Ç–∫–∏;1;üí∞ –¶–µ–Ω–∞ –≤–∏–∑–∏—Ç–æ–∫;—Ü–µ–Ω–∞,—Å—Ç–æ–∏–º–æ—Å—Ç—å,–≤–∏–∑–∏—Ç–∫–∏;–¶–µ–Ω–∞ –≤–∏–∑–∏—Ç–æ–∫ –£–ö–†;–¶–µ–Ω–∞ –≤–∏–∑–∏—Ç–æ–∫ –†–£–°;1
–≤–∏–∑–∏—Ç–∫–∏;2;üé® –ú–∞–∫–µ—Ç –≤–∏–∑–∏—Ç–æ–∫;–º–∞–∫–µ—Ç,–¥–∏–∑–∞–π–Ω;–ú–∞–∫–µ—Ç –£–ö–†;–ú–∞–∫–µ—Ç –†–£–°;2""",
            
            'futbolki_templates.csv': """category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order
—Ñ—É—Ç–±–æ–ª–∫–∏;1;üí∞ –¶–µ–Ω–∞ —Ñ—É—Ç–±–æ–ª–æ–∫;—Ü–µ–Ω–∞,—Ñ—É—Ç–±–æ–ª–∫–∏;–¶–µ–Ω–∞ —Ñ—É—Ç–±–æ–ª–æ–∫ –£–ö–†;–¶–µ–Ω–∞ —Ñ—É—Ç–±–æ–ª–æ–∫ –†–£–°;1
—Ñ—É—Ç–±–æ–ª–∫–∏;2;üëï –í–∏–¥—ã —Ñ—É—Ç–±–æ–ª–æ–∫;–≤–∏–¥—ã,—Ç–∏–ø—ã;–í–∏–¥—ã –£–ö–†;–í–∏–¥—ã –†–£–°;2"""
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
        for filename, content in test_data.items():
            filepath = os.path.join(integration_temp_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ TemplateManager
        tm = TemplateManager()
        tm.data_dir = integration_temp_dir
        tm.load_templates()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        # –ü–æ–∏—Å–∫ –ø–æ –æ–±—â–µ–º—É —Å–ª–æ–≤—É "—Ü–µ–Ω–∞"
        results = tm.search_templates('—Ü–µ–Ω–∞')
        assert len(results) == 2  # –î–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –æ–±–µ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–º—É —Å–ª–æ–≤—É
        results = tm.search_templates('–≤–∏–∑–∏—Ç–∫–∏')
        assert len(results) == 1  # –¢–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–∫
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        results = tm.search_templates('–º–∞–∫–µ—Ç')
        assert len(results) == 1
        assert results[0]['category'] == '–≤–∏–∑–∏—Ç–∫–∏'

    def test_statistics_integration(self, integration_temp_dir):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from stats import update_template_stats, get_stats_text
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_file = os.path.join(integration_temp_dir, 'stats.json')
        
        with patch('stats.STATS_FILE', stats_file):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            update_template_stats('–≤–∏–∑–∏—Ç–∫–∏', '1', 123456789)
            update_template_stats('–≤–∏–∑–∏—Ç–∫–∏', '1', 123456789)
            update_template_stats('—Ñ—É—Ç–±–æ–ª–∫–∏', '1', 987654321)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = get_stats_text()
            
            assert '–≤–∏–∑–∏—Ç–∫–∏' in stats_text
            assert '—Ñ—É—Ç–±–æ–ª–∫–∏' in stats_text
            assert '2' in stats_text  # –î–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–∑–∏—Ç–æ–∫
            assert '1' in stats_text  # –û–¥–∏–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ—É—Ç–±–æ–ª–æ–∫

    async def test_error_handling_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        from error_handler import handle_error
        from error_monitor import log_error
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
        test_error = ValueError("Test integration error")
        test_context = {
            'user_id': 123456789,
            'action': 'integration_test',
            'data': {'test': 'value'}
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(test_error, test_context)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        error_message = handle_error(test_error, test_context)
        
        assert error_message is not None
        assert isinstance(error_message, str)
        assert len(error_message) > 0

    def test_keyboard_generation_integration(self, integration_temp_dir):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        from keyboards import get_main_keyboard, get_category_keyboard
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = """category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order
–≤–∏–∑–∏—Ç–∫–∏;1;üí∞ –¶–µ–Ω–∞;—Ü–µ–Ω–∞;–£–ö–†;–†–£–°;1
–≤–∏–∑–∏—Ç–∫–∏;2;üé® –ú–∞–∫–µ—Ç;–º–∞–∫–µ—Ç;–£–ö–†;–†–£–°;2"""
        
        filepath = os.path.join(integration_temp_dir, 'visitki_templates.csv')
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(test_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        tm = TemplateManager()
        tm.data_dir = integration_temp_dir
        tm.load_templates()
        
        with patch('keyboards.template_manager', tm):
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            main_kb = get_main_keyboard(123456789)
            assert main_kb is not None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            templates = tm.get_templates_by_category('–≤–∏–∑–∏—Ç–∫–∏')
            category_kb = get_category_keyboard(templates, '–≤–∏–∑–∏—Ç–∫–∏')
            assert category_kb is not None