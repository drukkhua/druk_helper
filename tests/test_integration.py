#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""

    def test_core_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            from src.ai.service import ai_service
            from src.core.template_manager import TemplateManager
            from src.bot.keyboards import create_main_menu_keyboard
            from src.core.business_hours import get_business_status
            from src.utils.error_handler import handle_exceptions
            from src.utils.exceptions import ConfigurationError

            assert ai_service is not None
            assert TemplateManager is not None
            assert create_main_menu_keyboard is not None
            assert get_business_status is not None
            assert handle_exceptions is not None
            assert ConfigurationError is not None

        except ImportError as e:
            pytest.fail(f"Import failed: {e}")

    def test_template_manager_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TemplateManager"""
        try:
            from src.core.template_manager import TemplateManager

            tm = TemplateManager()
            tm.reload_templates()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            assert len(tm.templates) > 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            expected_categories = ["–≤–∏–∑–∏—Ç–∫–∏", "—Ñ—É—Ç–±–æ–ª–∫–∏", "–ª–∏—Å—Ç–æ–≤–∫–∏", "–Ω–∞–∫–ª–µ–π–∫–∏", "–±–ª–æ–∫–Ω–æ—Ç—ã"]
            for category in expected_categories:
                assert category in tm.templates, f"Category {category} not found"

        except Exception as e:
            pytest.fail(f"Template Manager test failed: {e}")

    @pytest.mark.asyncio
    async def test_ai_service_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            from src.ai.service import ai_service

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            assert ai_service is not None
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ AI)
            assert hasattr(ai_service, "enabled")
            assert hasattr(ai_service, "is_available")

            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            result = await ai_service.process_query("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", 12345, "ukr")

            assert isinstance(result, dict)
            assert "success" in result
            assert "answer" in result
            assert "confidence" in result
            assert "source" in result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –æ—Ç–≤–µ—Ç
            if result["success"]:
                assert len(result["answer"]) > 0
                assert result["source"] in ["ai", "template", "fallback"]

        except Exception as e:
            pytest.fail(f"AI Service test failed: {e}")

    def test_business_hours(self):
        """–¢–µ—Å—Ç –º–æ–¥—É–ª—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        try:
            from src.core.business_hours import get_business_status, is_business_time

            status = get_business_status("ukr")
            assert isinstance(status, str)
            assert len(status) > 0

            is_business = is_business_time()
            assert isinstance(is_business, bool)

        except Exception as e:
            pytest.fail(f"Business Hours test failed: {e}")

    def test_keyboard_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        try:
            from src.bot.keyboards import create_main_menu_keyboard, get_category_title
            from unittest.mock import Mock

            # Mock template manager
            mock_tm = Mock()
            mock_tm.get_user_language.return_value = "ukr"

            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = create_main_menu_keyboard(12345, mock_tm)
            assert keyboard is not None

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            title = get_category_title("–≤–∏–∑–∏—Ç–∫–∏", "ukr")
            assert title == "üìá –í—ñ–∑–∏—Ç–∫–∏"

        except Exception as e:
            pytest.fail(f"Keyboard test failed: {e}")

    @pytest.mark.asyncio
    async def test_full_ai_pipeline(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç AI pipeline"""
        try:
            from src.ai.service import ai_service

            # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            test_queries = [
                ("–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ñ—É—Ç–±–æ–ª–æ–∫?", "ukr"),
                ("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", "ukr"),
                ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?", "rus"),
                ("What is the price?", "ukr"),  # Should fallback
            ]

            results = []
            for query, lang in test_queries:
                result = await ai_service.process_query(query, 12345, lang)
                results.append(result)

                # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                assert isinstance(result, dict)
                assert "success" in result
                assert "answer" in result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å fallback)
            processed = [
                r for r in results if r["success"] or ("answer" in r and len(r["answer"]) > 0)
            ]
            assert (
                len(processed) >= 2
            ), f"Too few processed responses. Got {len(processed)} out of {len(results)}"

        except Exception as e:
            pytest.fail(f"Full AI pipeline test failed: {e}")

    def test_configuration_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from config import Config

            config = Config()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            assert hasattr(config, "BOT_TOKEN")
            assert hasattr(config, "AI_ENABLED")
            assert hasattr(config, "OPENAI_API_KEY")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AI_ENABLED –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (True –∏–ª–∏ False)
            assert isinstance(config.AI_ENABLED, bool)

        except Exception as e:
            pytest.fail(f"Configuration test failed: {e}")


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
