"""
–¢–µ—Å—Ç—ã –¥–ª—è validation
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import pytest
from validation import (
    validate_user_input,
    sanitize_text,
    is_admin_user,
    validate_callback_data,
    validate_search_query
)


class TestValidation:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    def test_validate_user_input_valid_text(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        valid_inputs = [
            "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "Text with numbers 123",
            "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ",
            "Short",
            "–°–∏–º–≤–æ–ª—ã: .,!?-"
        ]
        
        for text in valid_inputs:
            assert validate_user_input(text) is True

    def test_validate_user_input_empty(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        invalid_inputs = ["", "   ", "\n\t  "]
        
        for text in invalid_inputs:
            assert validate_user_input(text) is False

    def test_validate_user_input_too_long(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        long_text = "a" * 1001  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
        assert validate_user_input(long_text) is False

    def test_validate_user_input_malicious_content(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        malicious_inputs = [
            "<script>alert('xss')</script>",
            "javascript:alert(1)",
            "SELECT * FROM users",
            "' OR '1'='1",
            "../../../etc/passwd"
        ]
        
        for text in malicious_inputs:
            assert validate_user_input(text) is False

    def test_sanitize_text_html_tags(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ HTML —Ç–µ–≥–æ–≤"""
        input_text = "<script>alert('test')</script>Hello World"
        sanitized = sanitize_text(input_text)
        assert "<script>" not in sanitized
        assert "Hello World" in sanitized

    def test_sanitize_text_sql_injection(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        input_text = "'; DROP TABLE users; --"
        sanitized = sanitize_text(input_text)
        assert "DROP TABLE" not in sanitized
        assert "--" not in sanitized

    def test_sanitize_text_normal_text(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        input_text = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —á–∏—Å–ª–∞–º–∏ 123"
        sanitized = sanitize_text(input_text)
        assert sanitized == input_text

    def test_sanitize_text_special_chars(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        input_text = "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: .,!?-()[]"
        sanitized = sanitize_text(input_text)
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
        assert "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏" in sanitized

    def test_is_admin_user_valid_admin(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        admin_ids = [123456789, 987654321]
        
        with pytest.fixture.mock.patch('validation.Config') as mock_config:
            mock_config.ADMIN_USER_IDS = admin_ids
            assert is_admin_user(123456789) is True
            assert is_admin_user(987654321) is True

    def test_is_admin_user_invalid_admin(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        admin_ids = [123456789, 987654321]
        
        with pytest.fixture.mock.patch('validation.Config') as mock_config:
            mock_config.ADMIN_USER_IDS = admin_ids
            assert is_admin_user(999999999) is False
            assert is_admin_user(0) is False

    def test_validate_callback_data_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        valid_callbacks = [
            "category_–≤–∏–∑–∏—Ç–∫–∏",
            "template_—Ñ—É—Ç–±–æ–ª–∫–∏_1",
            "back_to_main",
            "copy_text_–≤–∏–∑–∏—Ç–∫–∏_2",
            "search_results_page_1"
        ]
        
        for callback in valid_callbacks:
            assert validate_callback_data(callback) is True

    def test_validate_callback_data_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        invalid_callbacks = [
            "",
            "a" * 65,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            "category_<script>",
            "template_'; DROP TABLE",
            "../../etc/passwd",
            "javascript:alert(1)"
        ]
        
        for callback in invalid_callbacks:
            assert validate_callback_data(callback) is False

    def test_validate_search_query_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        valid_queries = [
            "—Ü–µ–Ω–∞",
            "—Ñ—É—Ç–±–æ–ª–∫–∏ —Ü–µ–Ω–∞",
            "–º–∞–∫–µ—Ç –≤–∏–∑–∏—Ç–∫–∏",
            "123",
            "test query"
        ]
        
        for query in valid_queries:
            assert validate_search_query(query) is True

    def test_validate_search_query_too_short(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        short_queries = ["", "a", " ", "\t"]
        
        for query in short_queries:
            assert validate_search_query(query) is False

    def test_validate_search_query_too_long(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        long_query = "a" * 101  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        assert validate_search_query(long_query) is False

    def test_validate_search_query_malicious(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        malicious_queries = [
            "<script>alert('xss')</script>",
            "'; SELECT * FROM",
            "../../../etc/passwd"
        ]
        
        for query in malicious_queries:
            assert validate_search_query(query) is False

    def test_edge_cases_unicode(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤"""
        unicode_text = "–¢–µ–∫—Å—Ç —Å —é–Ω–∏–∫–æ–¥–æ–º: üá∫üá¶ emoji –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã √±√°√©√≠√≥√∫"
        assert validate_user_input(unicode_text) is True
        sanitized = sanitize_text(unicode_text)
        assert "üá∫üá¶" in sanitized

    def test_edge_cases_mixed_languages(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        mixed_text = "English –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –†—É—Å—Å–∫–∏–π ‰∏≠Êñá"
        assert validate_user_input(mixed_text) is True
        sanitized = sanitize_text(mixed_text)
        assert "English" in sanitized
        assert "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in sanitized

    def test_edge_cases_numeric_strings(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫"""
        numeric_inputs = ["123", "0", "-456", "3.14", "1,000"]
        
        for num_str in numeric_inputs:
            assert validate_user_input(num_str) is True
            assert sanitize_text(num_str) == num_str