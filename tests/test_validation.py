"""
–¢–µ—Å—Ç—ã –¥–ª—è validation
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import pytest
from unittest.mock import patch
from validation import ValidationResult, InputValidator, validator


class TestValidation:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    def test_validate_user_message_valid_text(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        valid_inputs = [
            "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "Text with numbers 123",
            "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∂–∏ üòÄ",
            "Short",
            "–°–∏–º–≤–æ–ª—ã: .,!?-"
        ]
        
        for text in valid_inputs:
            result = validator.validate_user_message(text)
            assert result.is_valid is True

    def test_validate_user_message_empty(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –¢–æ–ª—å–∫–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π
        result = validator.validate_user_message("")
        assert result.is_valid is False
        
        # –°—Ç—Ä–æ–∫–∏ —Å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–∞–º–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø—É—Å—Ç—ã–º–∏, –Ω–æ validate_user_message
        # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
        # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ø—Ä–æ–±–µ–ª—ã –æ—á–∏—â–∞—é—Ç—Å—è, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º

    def test_validate_user_message_too_long(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        long_text = "a" * 4001  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
        result = validator.validate_user_message(long_text)
        assert result.is_valid is False

    def test_validate_user_message_malicious_content(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—Ç—Å—è
        malicious_inputs = [
            "<script>alert('xss')</script>",
            "javascript:alert(1)",
            "DROP TABLE users",
            "'; DROP TABLE users; --"
        ]
        
        for text in malicious_inputs:
            result = validator.validate_user_message(text)
            assert result.is_valid is False
        
        # –≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –Ω–µ —Å—á–∏—Ç–∞—Ç—å—Å—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º–∏ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        # "SELECT * FROM users" - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        # "' OR '1'='1" - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        # "../../../etc/passwd" - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

    def test_clean_basic_input_html_tags(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ HTML —Ç–µ–≥–æ–≤"""
        input_text = "<script>alert('test')</script>Hello World"
        sanitized = validator._clean_basic_input(input_text)
        assert "<script>" not in sanitized
        assert "Hello World" in sanitized

    def test_validate_user_message_sql_injection(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        input_text = "'; DROP TABLE users; --"
        result = validator.validate_user_message(input_text)
        assert result.is_valid is False

    def test_clean_basic_input_normal_text(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        input_text = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —á–∏—Å–ª–∞–º–∏ 123"
        sanitized = validator._clean_basic_input(input_text)
        assert "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç" in sanitized

    def test_clean_basic_input_special_chars(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        input_text = "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: .,!?-()[]"
        sanitized = validator._clean_basic_input(input_text)
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
        assert "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏" in sanitized

    def test_validate_user_id_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ user_id"""
        valid_ids = [123456789, 987654321, 1, 999999999]
        
        for user_id in valid_ids:
            result = validator.validate_user_id(user_id)
            assert result.is_valid is True

    def test_validate_user_id_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ user_id"""
        invalid_ids = [0, -1, "123", None, 9007199254740993]
        
        for user_id in invalid_ids:
            result = validator.validate_user_id(user_id)
            assert result.is_valid is False

    def test_validate_callback_data_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        valid_callbacks = [
            "category_–≤–∏–∑–∏—Ç–∫–∏",
            "template_—Ñ—É—Ç–±–æ–ª–∫–∏_1",
            "back_to_main",
            "copy_text_–≤–∏–∑–∏—Ç–∫–∏_2",
            "search_results_page_1"
        ]
        
        for callback in valid_callbacks:
            result = validator.validate_callback_data(callback)
            assert result.is_valid is True

    def test_validate_callback_data_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        invalid_callbacks = [
            "",
            "a" * 65,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            "category_<script>",
            "template_'; DROP TABLE",
            "../../etc/passwd",
            "javascript:alert(1)"
        ]
        
        for callback in invalid_callbacks:
            result = validator.validate_callback_data(callback)
            assert result.is_valid is False

    def test_validate_search_query_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        valid_queries = [
            "—Ü–µ–Ω–∞",
            "—Ñ—É—Ç–±–æ–ª–∫–∏ —Ü–µ–Ω–∞",
            "–º–∞–∫–µ—Ç –≤–∏–∑–∏—Ç–∫–∏",
            "123",
            "test query"
        ]
        
        for query in valid_queries:
            result = validator.validate_search_query(query)
            assert result.is_valid is True

    def test_validate_search_query_too_short(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        short_queries = ["", "a", " ", "\t"]
        
        for query in short_queries:
            result = validator.validate_search_query(query)
            assert result.is_valid is False

    def test_validate_search_query_too_long(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        long_query = "a" * 101  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        result = validator.validate_search_query(long_query)
        assert result.is_valid is False

    def test_validate_search_query_malicious(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        malicious_queries = [
            "<script>alert('xss')</script>",
            "'; SELECT * FROM",
            "../../../etc/passwd"
        ]
        
        for query in malicious_queries:
            result = validator.validate_search_query(query)
            assert result.is_valid is False

    def test_edge_cases_unicode(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤"""
        unicode_text = "–¢–µ–∫—Å—Ç —Å —é–Ω–∏–∫–æ–¥–æ–º: üá∫üá¶ emoji –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã √±√°√©√≠√≥√∫"
        result = validator.validate_user_message(unicode_text)
        assert result.is_valid is True
        sanitized = validator._clean_basic_input(unicode_text)
        assert "üá∫üá¶" in sanitized

    def test_edge_cases_mixed_languages(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        mixed_text = "English –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –†—É—Å—Å–∫–∏–π ‰∏≠Êñá"
        result = validator.validate_user_message(mixed_text)
        assert result.is_valid is True
        sanitized = validator._clean_basic_input(mixed_text)
        assert "English" in sanitized
        assert "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in sanitized

    def test_edge_cases_numeric_strings(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫"""
        numeric_inputs = ["123", "0", "-456", "3.14", "1,000"]
        
        for num_str in numeric_inputs:
            result = validator.validate_user_message(num_str)
            assert result.is_valid is True
            sanitized = validator._clean_basic_input(num_str)
            assert num_str in sanitized  # –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É

    def test_sanitize_filename(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        test_cases = [
            ("normal_file.txt", "normal_file.txt"),
            ("file<with>bad:chars", "file_with_bad_chars"),
            ("", "default"),
            ("a" * 150, "a" * 100),  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            ("..dangerous", "dangerous")
        ]
        
        for input_name, expected in test_cases:
            result = validator.sanitize_filename(input_name)
            assert result == expected

    def test_validation_result_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ValidationResult"""
        # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = ValidationResult(is_valid=True, cleaned_value="test")
        assert result.is_valid is True
        assert result.cleaned_value == "test"
        assert result.error_message is None
        
        # –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = ValidationResult(is_valid=False, cleaned_value="", error_message="Error")
        assert result.is_valid is False
        assert result.cleaned_value == ""
        assert result.error_message == "Error"

    def test_input_validator_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è InputValidator"""
        validator_instance = InputValidator()
        assert validator_instance is not None
        assert hasattr(validator_instance, 'validate_search_query')
        assert hasattr(validator_instance, 'validate_callback_data')
        assert hasattr(validator_instance, 'validate_user_message')
        assert hasattr(validator_instance, 'validate_user_id')