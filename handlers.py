from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_USER_IDS
from keyboards import create_category_menu_keyboard, create_main_menu_keyboard, create_template_keyboard, \
    get_category_title
from models import UserStates


async def cmd_start(message: types.Message, state: FSMContext, template_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–ª—ñ—î–Ω—Ç–∞–º.\n\n"
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ—Ç–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:"
        if template_manager.get_user_language(user_id) == 'ukr' else
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º.\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤:"
    )

    await message.answer(
        welcome_text,
        reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )
    await state.set_state(UserStates.main_menu)


async def cmd_stats(message: types.Message, template_manager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        return

    stats_text = template_manager.stats.get_stats_summary()
    await message.answer(stats_text)


async def process_category_selection(callback: CallbackQuery, state: FSMContext, template_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.replace("category_", "")
    user_id = callback.from_user.id

    lang = template_manager.get_user_language(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category not in template_manager.templates or not template_manager.templates[category]:
        error_text = (
            f"‚è≥ –®–∞–±–ª–æ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.\n–ó'—è–≤–ª—è—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
            if lang == 'ukr' else
            f"‚è≥ –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n–ü–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        await callback.answer(error_text)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    title = get_category_title(category, lang)
    subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == 'ukr' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

    await callback.message.edit_text(
        f"{title}\n\n{subtitle}",
        reply_markup=create_category_menu_keyboard(category, user_id, template_manager)
    )

    await state.update_data(current_category=category)
    await state.set_state(UserStates.category_menu)


async def process_template_selection(callback: CallbackQuery, state: FSMContext, template_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    parts = callback.data.split("_")
    category = parts[1]
    subcategory = "_".join(parts[2:])
    user_id = callback.from_user.id

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω
    template = None
    if category in template_manager.templates:
        for t in template_manager.templates[category]:
            if t.subcategory == subcategory:
                template = t
                break

    if template:
        template_text = template_manager.get_template_text(template, user_id)
        lang = template_manager.get_user_language(user_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template_manager.stats.log_template_usage(category, template.sort_order, user_id, "view")

        header = "üìã –ì–æ—Ç–æ–≤–∏–π —à–∞–±–ª–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:" if lang == 'ukr' else "üìã –ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞:"
        footer = "\n\nüí° –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:" if lang == 'ukr' else "\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        full_message = f"{header}\n\n{template_text}{footer}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            current_template_text=template_text,
            current_category=category,
            current_template_number=template.sort_order,
            previous_menu_type="category",
            previous_menu_title=header
        )

        await callback.message.edit_text(
            full_message,
            reply_markup=create_template_keyboard(user_id, template_manager, template_text)
        )
    else:
        error_text = "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" if template_manager.get_user_language(
            user_id) == 'ukr' else "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        await callback.answer(error_text)


async def copy_template_text(callback: CallbackQuery, state: FSMContext, template_manager):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_data = await state.get_data()
    template_text = user_data.get('current_template_text', '')
    current_category = user_data.get('current_category', '–≤–∏–∑–∏—Ç–∫–∏')
    template_number = user_data.get('current_template_number', 1)

    if template_text:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        template_manager.stats.log_template_usage(current_category, template_number, callback.from_user.id, "copy")

        lang = template_manager.get_user_language(callback.from_user.id)
        copy_msg = "üìã –î–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:" if lang == 'ukr' else "üìã –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è - –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(template_text)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–æ –∂–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ –±—ã–ª–æ –¥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(UserStates.category_menu)
        await state.update_data(current_category=current_category)

        category_title = get_category_title(current_category, lang)
        subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == 'ukr' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

        await callback.message.answer(
            f"{category_title}\n\n{subtitle}",
            reply_markup=create_category_menu_keyboard(current_category, callback.from_user.id, template_manager)
        )

        await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    else:
        error_text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É" if template_manager.get_user_language(
            callback.from_user.id) == 'ukr' else "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
        await callback.answer(error_text)


async def admin_stats(callback: CallbackQuery, template_manager):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if callback.from_user.id not in ADMIN_USER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    stats_text = template_manager.stats.get_stats_summary()
    await callback.message.answer(stats_text)


async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, template_manager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    welcome_text = (
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:"
        if lang == 'ukr' else
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:"
    )

    await callback.message.edit_text(
        welcome_text,
        reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )
    await state.set_state(UserStates.main_menu)


async def back_to_category_menu(callback: CallbackQuery, state: FSMContext, template_manager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_data = await state.get_data()
    category = user_data.get('current_category', '–≤–∏–∑–∏—Ç–∫–∏')
    user_id = callback.from_user.id

    lang = template_manager.get_user_language(user_id)

    category_title = get_category_title(category, lang)
    subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == 'ukr' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

    await callback.message.edit_text(
        f"{category_title}\n\n{subtitle}",
        reply_markup=create_category_menu_keyboard(category, user_id, template_manager)
    )
    await state.set_state(UserStates.category_menu)


async def switch_language(callback: CallbackQuery, state: FSMContext, template_manager):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    current_lang = template_manager.get_user_language(user_id)
    new_lang = 'rus' if current_lang == 'ukr' else 'ukr'

    template_manager.set_user_language(user_id, new_lang)

    success_text = "‚úÖ –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É" if new_lang == 'ukr' else "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    await callback.answer(success_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    welcome_text = (
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:"
        if new_lang == 'ukr' else
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:"
    )

    await callback.message.edit_text(
        welcome_text,
        reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )


async def start_search(callback: CallbackQuery, state: FSMContext, template_manager):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    search_text = (
        "üîç –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É —à–∞–±–ª–æ–Ω—ñ–≤:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Ü—ñ–Ω–∞, –º–∞–∫–µ—Ç, —Ç–µ—Ä–º—ñ–Ω–∏, —è–∫—ñ—Å—Ç—å"
        if lang == 'ukr' else
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ü–µ–Ω–∞, –º–∞–∫–µ—Ç, —Å—Ä–æ–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ"
    )

    builder = InlineKeyboardBuilder()
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ukr' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    await callback.message.edit_text(search_text, reply_markup=builder.as_markup())
    await state.set_state(UserStates.search_mode)


async def process_search_query(message: types.Message, state: FSMContext, template_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    user_id = message.from_user.id

    if len(query) < 2:
        error_text = (
            "‚ùå –ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏."
            if template_manager.get_user_language(user_id) == 'ukr' else
            "‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞."
        )
        await message.answer(error_text)
        return

    # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
    found_templates = template_manager.search_templates(query)

    if not found_templates:
        no_results_text = (
            f"‚ùå –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞."
            if template_manager.get_user_language(user_id) == 'ukr' else
            f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
        )
        await message.answer(no_results_text)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    builder = InlineKeyboardBuilder()

    for template in found_templates[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        builder.row(InlineKeyboardButton(
            text=f"{template.button_text}",
            callback_data=f"template_{template.category}_{template.subcategory}"
        ))

    lang = template_manager.get_user_language(user_id)
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ukr' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    results_text = (
        f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_templates)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}':"
        if lang == 'ukr' else
        f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_templates)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':"
    )

    await message.answer(results_text, reply_markup=builder.as_markup())


async def coming_soon(callback: CallbackQuery, template_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    text = (
        "‚è≥ –¶—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑'—è–≤–∏—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
        if lang == 'ukr' else
        "‚è≥ –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )

    await callback.answer(text)
