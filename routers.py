"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ä–æ—É—Ç–µ—Ä–æ–≤) –±–æ—Ç–∞
"""

from aiogram import Dispatcher
from aiogram.filters import Command, StateFilter

import handlers
from config import logger
from error_handler import error_handler
from models import UserStates
from template_manager import TemplateManager


class BotRouters:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""

    def __init__(self, dp: Dispatcher, template_manager: TemplateManager) -> None:
        self.dp = dp
        self.template_manager = template_manager
        self.bot_version = "1.05"

    def register_command_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.dp.message(Command("start"))
        async def cmd_start_wrapper(message, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏"""
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await state.get_data()
            current_user_version = user_data.get("bot_version")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            if current_user_version != self.bot_version:
                # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                await state.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                await state.update_data(bot_version=self.bot_version)

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                if current_user_version:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                    await message.answer("üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é...")

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start
            await handlers.cmd_start(message, state, self.template_manager)

        @self.dp.message(Command("stats"))
        async def cmd_stats_wrapper(message) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
            await handlers.cmd_stats(message, self.template_manager)

        @self.dp.message(Command("reload"))
        async def cmd_reload_wrapper(message) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reload (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤)"""
            await handlers.cmd_reload(message, self.template_manager)

        @self.dp.message(Command("health"))
        async def cmd_health_wrapper(message) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /health (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã)"""
            await handlers.cmd_health(message, self.template_manager)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def register_callback_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""

        @self.dp.callback_query(lambda c: c.data.startswith("category_"))
        async def process_category_selection_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
            await handlers.process_category_selection(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data.startswith("template_"))
        async def process_template_selection_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
            await handlers.process_template_selection(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "copy_template")
        async def copy_template_text_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
            await handlers.copy_template_text(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "admin_stats")
        async def admin_stats_wrapper(callback) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            await handlers.admin_stats(callback, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "back_to_main")
        async def back_to_main_menu_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            await handlers.back_to_main_menu(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "back_to_category")
        async def back_to_category_menu_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
            await handlers.back_to_category_menu(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "switch_language")
        async def switch_language_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
            await handlers.switch_language(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "search")
        async def start_search_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞"""
            await handlers.start_search(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "coming_soon")
        async def coming_soon_wrapper(callback) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
            await handlers.coming_soon(callback, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "ai_mode")
        async def start_ai_mode_wrapper(callback, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ AI-—Ä–µ–∂–∏–º"""
            await handlers.start_ai_mode(callback, state, self.template_manager)

        @self.dp.callback_query(lambda c: c.data == "contact_manager")
        async def contact_manager_wrapper(callback) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
            await handlers.contact_manager(callback, self.template_manager)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def register_message_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        @self.dp.message(StateFilter(UserStates.search_mode))
        async def process_search_query_wrapper(message, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
            await handlers.process_search_query(message, state, self.template_manager)

        @self.dp.message(StateFilter(UserStates.ai_mode))
        async def process_ai_message_wrapper(message, state) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-—Å–æ–æ–±—â–µ–Ω–∏–π"""
            await handlers.process_ai_message(message, state, self.template_manager)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def register_error_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

        async def global_error_handler(event, exception) -> bool:
            """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è dispatcher"""
            logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
            await error_handler.handle_error(exception, event)
            return True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dp.errors.register(global_error_handler)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def register_all_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            self.register_command_handlers()
            self.register_callback_handlers()
            self.register_message_handlers()
            self.register_error_handlers()

            logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise


def register_handlers(dp: Dispatcher, template_manager: TemplateManager) -> BotRouters:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    Args:
        dp: Dispatcher
        template_manager: TemplateManager
    """
    routers = BotRouters(dp, template_manager)
    routers.register_all_handlers()
    return routers
