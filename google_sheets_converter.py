#!/usr/bin/env python3
"""
Google Sheets to CSV/JSON Converter
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google –¢–∞–±–ª–∏—Ü—ã –≤ CSV –∏ JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
"""

import re

import json
import os
import pandas as pd
import requests
import sys
from typing import Any, Dict, List, Tuple

from config import GOOGLE_SHEETS_API_KEY

URL_TEST = "https://docs.google.com/spreadsheets/d/1RagVK40gWitjfQE-_wBD8HnSaeDGGMZJ2uWfICLRqFQ/edit?usp=sharing"


class GoogleSheetsConverter:
    def __init__(self):
        self.expected_headers = [
            "category",
            "subcategory",
            "button_text",
            "keywords",
            "answer_ukr",
            "answer_rus",
            "sort_order",
        ]
        # –ü–æ–ª—è –≥–¥–µ –æ–∂–∏–¥–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.text_fields = ["answer_ukr", "answer_rus", "keywords"]
        self.output_dir = "data/converted-data/"
        self.api_key = GOOGLE_SHEETS_API_KEY

    def create_output_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
        os.makedirs(self.output_dir, exist_ok=True)
        print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")

    def extract_sheet_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL"""
        pattern = r"/spreadsheets/d/([a-zA-Z0-9-_]+)"
        match = re.search(pattern, url)
        if not match:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É")
        return match.group(1)

    def get_all_sheets_info(self, sheet_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Google Sheets API"""
        print("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö —á–µ—Ä–µ–∑ Google Sheets API...")

        try:
            # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Google Sheets API v4 endpoint
            api_url = f"https://sheets.googleapis.com/v4/spreadsheets/{sheet_id}"

            # –î–æ–±–∞–≤–ª—è–µ–º API key –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            params = {}
            if self.api_key:
                params["key"] = self.api_key
                print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API key: {self.api_key[:20]}...")

            headers = {"User-Agent": "GoogleSheetsConverter/1.0"}

            response = requests.get(api_url, params=params, headers=headers, timeout=15)

            if response.status_code == 200:
                data = response.json()
                sheets_info = []

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                sheets = data.get("sheets", [])

                for sheet in sheets:
                    sheet_properties = sheet.get("properties", {})
                    sheet_id_num = sheet_properties.get("sheetId", 0)
                    sheet_title = sheet_properties.get("title", f"Sheet{sheet_id_num}")

                    sheets_info.append({"gid": str(sheet_id_num), "name": sheet_title})

                if sheets_info:
                    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ API: {len(sheets_info)}")
                    for i, sheet in enumerate(sheets_info, 1):
                        print(f"   {i}. '{sheet['name']}' (gid: {sheet['gid']})")
                    return sheets_info
                else:
                    print("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤")
                    return [{"gid": "0", "name": "Sheet1"}]

            elif response.status_code == 403:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (HTTP 403): {response.text}")
                if "API key" in response.text:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ —á—Ç–æ Google Sheets API –≤–∫–ª—é—á–µ–Ω")
                else:
                    print("üí° –í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—É–±–ª–∏—á–Ω–∞—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
                return [{"gid": "0", "name": "Sheet1"}]

            elif response.status_code == 404:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (HTTP 404)")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã")
                return [{"gid": "0", "name": "Sheet1"}]

            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É HTTP {response.status_code}: {response.text}")
                return [{"gid": "0", "name": "Sheet1"}]

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
            return [{"gid": "0", "name": "Sheet1"}]

        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API: {e}")
            return [{"gid": "0", "name": "Sheet1"}]

    def get_csv_url(self, sheet_id: str, gid: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ CSV"""
        return f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}"

    def validate_headers(self, df: pd.DataFrame, sheet_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
        actual_headers = df.columns.tolist()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if len(actual_headers) != len(self.expected_headers):
            print(
                f"‚ùå [{sheet_name}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(actual_headers)} –≤–º–µ—Å—Ç–æ {len(self.expected_headers)}"
            )
            return False

        for i, (actual, expected) in enumerate(zip(actual_headers, self.expected_headers)):
            if actual.strip().lower() != expected.lower():
                print(
                    f"‚ùå [{sheet_name}] –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ {i + 1}: '{actual}' –≤–º–µ—Å—Ç–æ '{expected}'"
                )
                return False

        print(f"‚úÖ [{sheet_name}] –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        return True

    def process_text_fields(self, df: pd.DataFrame) -> pd.DataFrame:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è - –∑–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ \\n"""
        df_processed = df.copy()

        for field in self.text_fields:
            if field in df_processed.columns:
                # –ó–∞–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ \\n
                df_processed[field] = (
                    df_processed[field].astype(str).str.replace("\n", "\\n", regex=False)
                )
                df_processed[field] = df_processed[field].str.replace("\r", "", regex=False)

        return df_processed

    def load_sheet_data(
        self, sheet_id: str, gid: str, sheet_name: str
    ) -> Tuple[pd.DataFrame, bool]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            csv_url = self.get_csv_url(sheet_id, gid)
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {sheet_name}")

            df = pd.read_csv(csv_url)

            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how="all")

            print(f"üìä [{sheet_name}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
            return df, True

        except Exception as e:
            print(f"‚ùå [{sheet_name}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return pd.DataFrame(), False

    def transliterate_russian(self, text: str) -> str:
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
        translit_dict = {
            "–∞": "a",
            "–±": "b",
            "–≤": "v",
            "–≥": "g",
            "–¥": "d",
            "–µ": "e",
            "—ë": "yo",
            "–∂": "zh",
            "–∑": "z",
            "–∏": "i",
            "–π": "y",
            "–∫": "k",
            "–ª": "l",
            "–º": "m",
            "–Ω": "n",
            "–æ": "o",
            "–ø": "p",
            "—Ä": "r",
            "—Å": "s",
            "—Ç": "t",
            "—É": "u",
            "—Ñ": "f",
            "—Ö": "h",
            "—Ü": "ts",
            "—á": "ch",
            "—à": "sh",
            "—â": "sch",
            "—ä": "",
            "—ã": "y",
            "—å": "",
            "—ç": "e",
            "—é": "yu",
            "—è": "ya",
            "–ê": "A",
            "–ë": "B",
            "–í": "V",
            "–ì": "G",
            "–î": "D",
            "–ï": "E",
            "–Å": "Yo",
            "–ñ": "Zh",
            "–ó": "Z",
            "–ò": "I",
            "–ô": "Y",
            "–ö": "K",
            "–õ": "L",
            "–ú": "M",
            "–ù": "N",
            "–û": "O",
            "–ü": "P",
            "–†": "R",
            "–°": "S",
            "–¢": "T",
            "–£": "U",
            "–§": "F",
            "–•": "H",
            "–¶": "Ts",
            "–ß": "Ch",
            "–®": "Sh",
            "–©": "Sch",
            "–™": "",
            "–´": "Y",
            "–¨": "",
            "–≠": "E",
            "–Æ": "Yu",
            "–Ø": "Ya",
        }

        result = ""
        for char in text:
            result += translit_dict.get(char, char)

        return result

    def clean_filename(self, sheet_name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è –ª–∏—Å—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        clean_name = self.transliterate_russian(sheet_name)

        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —á—Ç–æ –ù–ï –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_name = re.sub(r"[^a-zA-Z0-9\-]", "_", clean_name)

        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_name = re.sub(r"_+", "_", clean_name)

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        clean_name = clean_name.strip("_").lower()

        return clean_name if clean_name else "sheet"

    def save_txt(self, df: pd.DataFrame, sheet_name: str, page_num: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ TXT –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        clean_name = self.clean_filename(sheet_name)
        filename = f"{clean_name}_page_{page_num:02d}.txt"
        filepath = os.path.join(self.output_dir, filename)

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(f"üìã {sheet_name} - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}\n")
            f.write("=" * 60 + "\n\n")

            for index, row in df.iterrows():
                # –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏
                f.write(f"üî∏ –ó–∞–ø–∏—Å—å #{index + 1}\n")
                f.write("-" * 30 + "\n")

                # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                f.write(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row.get('category', 'N/A')}\n")
                f.write(f"üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {row.get('subcategory', 'N/A')}\n")

                # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                f.write(f"üîò –ö–Ω–æ–ø–∫–∞: {row.get('button_text', 'N/A')}\n")

                keywords = str(row.get("keywords", ""))
                if keywords and keywords != "nan":
                    # –ó–∞–º–µ–Ω—è–µ–º \\n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
                    keywords = keywords.replace("\\n", "\n")
                    f.write(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}\n")

                f.write("\n")

                # –û—Ç–≤–µ—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º
                answer_ukr = str(row.get("answer_ukr", ""))
                if answer_ukr and answer_ukr != "nan":
                    # –ó–∞–º–µ–Ω—è–µ–º \\n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                    answer_ukr = answer_ukr.replace("\\n", "\n")
                    f.write("üá∫üá¶ –û–¢–í–ï–¢ –ù–ê –£–ö–†–ê–ò–ù–°–ö–û–ú:\n")
                    f.write(f"{answer_ukr}\n\n")

                # –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                answer_rus = str(row.get("answer_rus", ""))
                if answer_rus and answer_rus != "nan":
                    # –ó–∞–º–µ–Ω—è–µ–º \\n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                    answer_rus = answer_rus.replace("\\n", "\n")
                    f.write("üá∑üá∫ –û–¢–í–ï–¢ –ù–ê –†–£–°–°–ö–û–ú:\n")
                    f.write(f"{answer_rus}\n\n")

                # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                f.write(f"üìä –ü–æ—Ä—è–¥–æ–∫: {row.get('sort_order', 'N/A')}\n")
                f.write("\n" + "=" * 60 + "\n\n")

        print(f"üìÑ TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

    def save_csv(self, df: pd.DataFrame, sheet_name: str, page_num: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV"""
        clean_name = self.clean_filename(sheet_name)
        filename = f"{clean_name}_page_{page_num:02d}.csv"
        filepath = os.path.join(self.output_dir, filename)

        df.to_csv(filepath, index=False, sep=",", encoding="utf-8", quoting=1)
        print(f"üíæ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

    def save_json(self, df: pd.DataFrame, sheet_name: str, page_num: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ JSON"""
        clean_name = self.clean_filename(sheet_name)
        filename = f"{clean_name}_page_{page_num:02d}.json"
        filepath = os.path.join(self.output_dir, filename)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        data = df.to_dict("records")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –≤ 4 –ø—Ä–æ–±–µ–ª–∞
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

        print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

    def convert_all_sheets(self, url: str) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            self.create_output_directory()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
            sheet_id = self.extract_sheet_id(url)
            print(f"üîç ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —á–µ—Ä–µ–∑ API
            sheets_info = self.get_all_sheets_info(sheet_id)

            if not sheets_info:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processed_count = 0
            skipped_count = 0

            print("\n" + "=" * 50)
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü")
            print("=" * 50)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for page_num, sheet_info in enumerate(sheets_info, 1):
                gid = sheet_info["gid"]
                sheet_name = sheet_info["name"]

                print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}: '{sheet_name}'")
                print("-" * 30)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                df, load_success = self.load_sheet_data(sheet_id, gid, sheet_name)

                if not load_success:
                    print(f"‚è≠Ô∏è [{sheet_name}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
                    skipped_count += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if not self.validate_headers(df, sheet_name):
                    print(f"‚è≠Ô∏è [{sheet_name}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
                    skipped_count += 1
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
                df_processed = self.process_text_fields(df)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç—Ä–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                self.save_csv(df_processed, sheet_name, page_num)
                self.save_json(df_processed, sheet_name, page_num)
                self.save_txt(df_processed, sheet_name, page_num)

                processed_count += 1
                print(f"‚úÖ [{sheet_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print("\n" + "=" * 50)
            print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
            print("=" * 50)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")

            if processed_count > 0:
                print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("\nüí• –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return False

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    converter = GoogleSheetsConverter()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) >= 2:
        # CLI —Ä–µ–∂–∏–º
        url = sys.argv[1]
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ Google –¢–∞–±–ª–∏—Ü (CLI —Ä–µ–∂–∏–º)")
        print(f"üìã URL: {url}")
        print("=" * 70)

        success = converter.convert_all_sheets(url)

        if success:
            print("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.")
            sys.exit(1)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("üìã Google Sheets to CSV/JSON/TXT Converter")
        print("=" * 40)
        print("üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("\n–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
        print("  category;subcategory;button_text;keywords;answer_ukr;answer_rus;sort_order")
        print(f"\nüß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {URL_TEST}")
        print("-" * 40)

        while True:
            try:
                print("\n1. –í–≤–µ—Å—Ç–∏ URL —Ç–∞–±–ª–∏—Ü—ã")
                print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
                print("3. –í—ã—Ö–æ–¥")

                choice = input("\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): ").strip()

                if choice == "1":
                    url = input("\nüìù –í–≤–µ–¥–∏—Ç–µ URL Google –¢–∞–±–ª–∏—Ü—ã: ").strip()

                    if not url:
                        print("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
                        continue

                    if "docs.google.com/spreadsheets" not in url:
                        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'docs.google.com/spreadsheets'")
                        continue

                elif choice == "2":
                    url = URL_TEST
                    print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É: {url}")

                elif choice in ["3", "exit", "quit", "–≤—ã—Ö–æ–¥"]:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                else:
                    print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
                    continue

                print("\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ Google –¢–∞–±–ª–∏—Ü (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)")
                print(f"üìã URL: {url}")
                print("=" * 70)

                success = converter.convert_all_sheets(url)

                if success:
                    print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("\nüí• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.")

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É
                while True:
                    continue_choice = (
                        input("\n‚ùì –•–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É? (y/n): ").strip().lower()
                    )
                    if continue_choice in ["y", "yes", "–¥", "–¥–∞"]:
                        break
                    elif continue_choice in ["n", "no", "–Ω", "–Ω–µ—Ç"]:
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        return
                    else:
                        print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '3' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")


if __name__ == "__main__":
    main()
