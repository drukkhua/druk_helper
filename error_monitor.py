"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
"""

from collections import defaultdict

import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from config import logger


class ErrorMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""

    def __init__(self, log_file: str = "error_log.json") -> None:
        self.log_file = log_file
        self.error_patterns = defaultdict(int)
        self.error_trends = defaultdict(list)

    def analyze_errors(self, hours: int = 24) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        if not os.path.exists(self.log_file):
            return {"total_errors": 0, "error_types": {}, "trends": {}}

        cutoff_time = datetime.now() - timedelta(hours=hours)
        error_types = defaultdict(int)
        hourly_errors = defaultdict(int)

        try:
            with open(self.log_file, "r", encoding="utf-8") as f:
                for line in f:
                    try:
                        error_data = json.loads(line.strip())
                        error_time = datetime.fromisoformat(error_data["timestamp"])

                        if error_time >= cutoff_time:
                            error_types[error_data["error_type"]] += 1
                            hour_key = error_time.strftime("%Y-%m-%d %H:00")
                            hourly_errors[hour_key] += 1

                    except (json.JSONDecodeError, KeyError, ValueError):
                        continue

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
            return {"total_errors": 0, "error_types": {}, "trends": {}}

        return {
            "total_errors": sum(error_types.values()),
            "error_types": dict(error_types),
            "hourly_trends": dict(hourly_errors),
            "analysis_period": f"{hours} —á–∞—Å–æ–≤",
        }

    def get_critical_errors(self, hours: int = 24) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        critical_types = [
            "ConfigurationError",
            "DatabaseError",
            "ExternalAPIError",
            "FileNotFoundError",
            "TemplateLoadError",
        ]

        if not os.path.exists(self.log_file):
            return []

        cutoff_time = datetime.now() - timedelta(hours=hours)
        critical_errors = []

        try:
            with open(self.log_file, "r", encoding="utf-8") as f:
                for line in f:
                    try:
                        error_data = json.loads(line.strip())
                        error_time = datetime.fromisoformat(error_data["timestamp"])

                        if (
                            error_time >= cutoff_time
                            and error_data["error_type"] in critical_types
                        ):
                            critical_errors.append(error_data)

                    except (json.JSONDecodeError, KeyError, ValueError):
                        continue

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {e}")
            return []

        return critical_errors

    def get_error_report(self, hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö"""
        analysis = self.analyze_errors(hours)
        critical_errors = self.get_critical_errors(hours)

        report = f"""
üìä **–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∑–∞ {hours} —á–∞—Å–æ–≤**

üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {analysis['total_errors']}
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {len(critical_errors)}

üìã **–¢–∏–ø—ã –æ—à–∏–±–æ–∫:**
"""

        for error_type, count in sorted(
            analysis["error_types"].items(), key=lambda x: x[1], reverse=True
        ):
            report += f"- {error_type}: {count}\n"

        if critical_errors:
            report += "\nüö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:**\n"
            for error in critical_errors[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                report += f"- {error['timestamp']}: {error['error_type']} - {error['message']}\n"

        return report

    def clear_old_errors(self, days: int = 30) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫"""
        if not os.path.exists(self.log_file):
            return

        cutoff_time = datetime.now() - timedelta(days=days)
        temp_file = f"{self.log_file}.tmp"

        try:
            with (
                open(self.log_file, "r", encoding="utf-8") as input_file,
                open(temp_file, "w", encoding="utf-8") as output_file,
            ):
                for line in input_file:
                    try:
                        error_data = json.loads(line.strip())
                        error_time = datetime.fromisoformat(error_data["timestamp"])

                        if error_time >= cutoff_time:
                            output_file.write(line)

                    except (json.JSONDecodeError, KeyError, ValueError):
                        continue

            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.replace(temp_file, self.log_file)
            logger.info(f"–û—á–∏—â–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if os.path.exists(temp_file):
                os.remove(temp_file)

    def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        analysis = self.analyze_errors(1)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        critical_errors = self.get_critical_errors(1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if len(critical_errors) > 5:
            status = "CRITICAL"
        elif analysis["total_errors"] > 50:
            status = "WARNING"
        elif analysis["total_errors"] > 10:
            status = "DEGRADED"
        else:
            status = "HEALTHY"

        return {
            "status": status,
            "errors_last_hour": analysis["total_errors"],
            "critical_errors_last_hour": len(critical_errors),
            "timestamp": datetime.now().isoformat(),
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –æ—à–∏–±–æ–∫
error_monitor = ErrorMonitor()


def get_error_statistics() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
    return error_monitor.analyze_errors()


def get_health_status() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return error_monitor.health_check()


def generate_error_report(hours: int = 24) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö"""
    return error_monitor.get_error_report(hours)


def cleanup_old_errors(days: int = 30) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫"""
    error_monitor.clear_old_errors(days)
