from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_USER_IDS


def get_category_title(category: str, lang: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
    titles = {
        '–≤–∏–∑–∏—Ç–∫–∏': {'ukr': 'üìá –í—ñ–∑–∏—Ç–∫–∏', 'rus': 'üìá –í–∏–∑–∏—Ç–∫–∏'},
        '—Ñ—É—Ç–±–æ–ª–∫–∏': {'ukr': 'üëï –§—É—Ç–±–æ–ª–∫–∏', 'rus': 'üëï –§—É—Ç–±–æ–ª–∫–∏'},
        '–ª–∏—Å—Ç–æ–≤–∫–∏': {'ukr': 'üìÑ –õ–∏—Å—Ç—ñ–≤–∫–∏', 'rus': 'üìÑ –õ–∏—Å—Ç–æ–≤–∫–∏'}
    }

    return titles.get(category, {}).get(lang, f"üì¶ {category.title()}")


def create_main_menu_keyboard(user_id: int, template_manager) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    lang = template_manager.get_user_language(user_id)

    builder = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(InlineKeyboardButton(text="üìá –í—ñ–∑–∏—Ç–∫–∏" if lang == 'ukr' else "üìá –í–∏–∑–∏—Ç–∫–∏",
                                     callback_data="category_–≤–∏–∑–∏—Ç–∫–∏"))
    builder.row(InlineKeyboardButton(text="üëï –§—É—Ç–±–æ–ª–∫–∏",
                                     callback_data="category_—Ñ—É—Ç–±–æ–ª–∫–∏"))
    builder.row(InlineKeyboardButton(text="üìÑ –õ–∏—Å—Ç—ñ–≤–∫–∏" if lang == 'ukr' else "üìÑ –õ–∏—Å—Ç–æ–≤–∫–∏",
                                     callback_data="category_–ª–∏—Å—Ç–æ–≤–∫–∏"))
    builder.row(InlineKeyboardButton(text="üîñ –ù–∞–ª—ñ–ø–∫–∏" if lang == 'ukr' else "üîñ –ù–∞–∫–ª–µ–π–∫–∏",
                                     callback_data="category_–Ω–∞–∫–ª–µ–π–∫–∏"))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    builder.row(InlineKeyboardButton(text="üîç –ü–æ—à—É–∫" if lang == 'ukr' else "üîç –ü–æ–∏—Å–∫",
                                     callback_data="search"))

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
    lang_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if lang == 'ukr' else "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
    builder.row(InlineKeyboardButton(text=lang_text, callback_data="switch_language"))

    # –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω)
    if user_id in ADMIN_USER_IDS:
        builder.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))

    return builder.as_markup()


def create_category_menu_keyboard(category: str, user_id: int, template_manager) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()

    if category in template_manager.templates:
        templates = template_manager.templates[category]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        for template in templates:
            builder.row(InlineKeyboardButton(
                text=template.button_text,
                callback_data=f"template_{category}_{template.subcategory}"
            ))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    lang = template_manager.get_user_language(user_id)
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ukr' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    return builder.as_markup()


def create_template_keyboard(user_id: int, template_manager, template_data: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    lang = template_manager.get_user_language(user_id)
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if template_data:
        copy_text = "üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏" if lang == 'ukr' else "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
        builder.add(InlineKeyboardButton(text=copy_text, callback_data=f"copy_template"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ukr' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(text=back_text, callback_data="back_to_category"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    builder.adjust(2)

    return builder.as_markup()
