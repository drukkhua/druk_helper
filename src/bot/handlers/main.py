from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_USER_IDS, logger
from src.utils.error_handler import handle_exceptions
from src.utils.exceptions import *
from src.bot.keyboards import (
    create_category_menu_keyboard,
    create_main_menu_keyboard,
    create_template_keyboard,
    get_category_title,
    get_cyrillic_category,
    get_latin_category,
)
from src.bot.models import UserStates
from src.core.validation import validator
from src.ai.enhanced_ai_service import enhanced_ai_service as ai_service
from src.core.business_hours import get_business_status
from src.admin.quick_corrections import quick_corrections_service
from src.admin.knowledge_base_manager import knowledge_base_manager


@handle_exceptions
async def cmd_start(message: types.Message, state: FSMContext, template_manager) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        raise ValidationError(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")

    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–ª—ñ—î–Ω—Ç–∞–º.\n\n"
        "ü§ñ **–Ø —Ä–æ–∑—É–º—ñ—é –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–ª—ñ–≥—Ä–∞—Ñ—ñ—é!** –ú–æ–∂–µ—Ç–µ –æ–¥—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –≤ —á–∞—Ç—ñ, —ñ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n\n"
        "üìù **–ü—Ä–∏–∫–ª–∞–¥–∏ –ø–∏—Ç–∞–Ω—å:**\n"
        "‚Ä¢ –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?\n"
        "‚Ä¢ –Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è?\n"
        "‚Ä¢ –Ø–∫—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –º–∞–∫–µ—Ç—ñ–≤ –ø—Ä–∏–π–º–∞—î—Ç–µ?\n\n"
        "üéØ –ê–±–æ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É –¥–ª—è –≥–æ—Ç–æ–≤–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤:"
        if template_manager.get_user_language(user_id) == "ukr"
        else "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º.\n\n"
        "ü§ñ **–Ø –ø–æ–Ω–∏–º–∞—é –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏!** –ú–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
        "üìù **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–∞–∫–µ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?\n\n"
        "üéØ –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:"
    )

    await message.answer(
        welcome_text, reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )
    await state.set_state(UserStates.main_menu)


async def cmd_stats(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç template_manager
    template_stats = template_manager.stats.get_stats_summary()

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        from src.analytics.analytics_service import analytics_service
        from src.integrations.knowledge_sync import knowledge_sync_service

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É AI —Å–∏—Å—Ç–µ–º—ã
        ai_summary = analytics_service.get_analytics_summary(days=7)
        sync_status = knowledge_sync_service.get_sync_status()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        extended_stats = (
            f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            f"ü§ñ **AI –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (7 –¥–Ω–µ–π):**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {ai_summary['period_stats']['total_queries']}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {ai_summary['period_stats']['answer_rate']:.1f}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ai_summary['period_stats']['avg_confidence']:.3f}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {ai_summary['period_stats']['avg_response_time_ms']:.0f}ms\n\n"
            f"üìã **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {ai_summary['overall_stats']['total_documents']}\n"
            f"‚Ä¢ –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö: {ai_summary['overall_stats']['knowledge_gaps']}\n\n"
            f"üîÑ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:**\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {sync_status['last_sync_time'] or '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å'}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {'‚úÖ' if sync_status['last_sync_success'] else '‚ùå'}\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {sync_status['last_sync_changes']}\n\n"
            f"üìÑ **–®–∞–±–ª–æ–Ω—ã (legacy):**\n"
            f"{template_stats}"
        )

        stats_text = extended_stats

    except Exception as e:
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        stats_text = (
            f"üìÑ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:**\n{template_stats}\n\n‚ö†Ô∏è AI –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}"
        )
    await message.answer(stats_text)


async def process_category_selection(
    callback: CallbackQuery, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è callback_data
    callback_validation = validator.validate_callback_data(callback.data)
    if not callback_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π callback_data: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return

    latin_category = callback_validation.cleaned_value.replace("category_", "")
    category = get_cyrillic_category(latin_category)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    user_id = callback.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return

    lang = template_manager.get_user_language(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category not in template_manager.templates or not template_manager.templates[category]:
        error_text = (
            f"‚è≥ –®–∞–±–ª–æ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.\n–ó'—è–≤–ª—è—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
            if lang == "ukr"
            else f"‚è≥ –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n–ü–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        await callback.answer(error_text)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    title = get_category_title(category, lang)
    subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == "ukr" else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

    await callback.message.edit_text(
        f"{title}\n\n{subtitle}",
        reply_markup=create_category_menu_keyboard(category, user_id, template_manager),
    )

    await state.update_data(current_category=category)
    await state.set_state(UserStates.category_menu)


@handle_exceptions
async def process_template_selection(
    callback: CallbackQuery, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è callback_data
    callback_validation = validator.validate_callback_data(callback.data)
    if not callback_validation.is_valid:
        raise ValidationError(f"–ù–µ–≤–µ—Ä–Ω—ã–π callback_data: {callback.data}")

    parts = callback_validation.cleaned_value.split("_")
    if len(parts) < 3:
        raise ValidationError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")

    latin_category = parts[1]
    category = get_cyrillic_category(latin_category)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    subcategory = "_".join(parts[2:])
    user_id = callback.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        raise ValidationError(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
    template = template_manager.get_template_by_subcategory(category, subcategory)

    if template:
        template_text = template_manager.get_template_text(template, user_id)
        lang = template_manager.get_user_language(user_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template_manager.stats.log_template_usage(category, template.sort_order, user_id, "view")

        header = "üìã –ì–æ—Ç–æ–≤–∏–π —à–∞–±–ª–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:" if lang == "ukr" else "üìã –ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞:"
        footer = "\n\nüí° –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:" if lang == "ukr" else "\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        full_message = f"{header}\n\n{template_text}{footer}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            current_template_text=template_text,
            current_category=category,
            current_template_number=template.sort_order,
            previous_menu_type="category",
            previous_menu_title=header,
        )

        await callback.message.edit_text(
            full_message,
            reply_markup=create_template_keyboard(user_id, template_manager, template_text),
        )
    else:
        error_text = (
            "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            if template_manager.get_user_language(user_id) == "ukr"
            else "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        await callback.answer(error_text)


async def copy_template_text(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(callback.from_user.id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {callback.from_user.id}")
        return

    user_data = await state.get_data()
    template_text = user_data.get("current_template_text", "")
    current_category = user_data.get("current_category", "–≤–∏–∑–∏—Ç–∫–∏")
    template_number = user_data.get("current_template_number", 1)

    if template_text:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        template_manager.stats.log_template_usage(
            current_category, template_number, callback.from_user.id, "copy"
        )

        lang = template_manager.get_user_language(callback.from_user.id)
        copy_msg = "üìã –î–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:" if lang == "ukr" else "üìã –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è - –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(template_text)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–æ –∂–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ –±—ã–ª–æ –¥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(UserStates.category_menu)
        await state.update_data(current_category=current_category)

        category_title = get_category_title(current_category, lang)
        subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == "ukr" else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

        await callback.message.answer(
            f"{category_title}\n\n{subtitle}",
            reply_markup=create_category_menu_keyboard(
                current_category, callback.from_user.id, template_manager
            ),
        )

        await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    else:
        error_text = (
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"
            if template_manager.get_user_language(callback.from_user.id) == "ukr"
            else "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
        )
        await callback.answer(error_text)


async def admin_stats(callback: CallbackQuery, template_manager) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(callback.from_user.id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {callback.from_user.id}")
        return

    if callback.from_user.id not in ADMIN_USER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    stats_text = template_manager.stats.get_stats_summary()
    await callback.message.answer(stats_text)


async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return
    lang = template_manager.get_user_language(user_id)

    welcome_text = (
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:" if lang == "ukr" else "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:"
    )

    await callback.message.edit_text(
        welcome_text, reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )
    await state.set_state(UserStates.main_menu)


async def back_to_category_menu(
    callback: CallbackQuery, state: FSMContext, template_manager
) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_data = await state.get_data()
    category = user_data.get("current_category", "–≤–∏–∑–∏—Ç–∫–∏")
    user_id = callback.from_user.id

    lang = template_manager.get_user_language(user_id)

    category_title = get_category_title(category, lang)
    subtitle = "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç—É:" if lang == "ukr" else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:"

    await callback.message.edit_text(
        f"{category_title}\n\n{subtitle}",
        reply_markup=create_category_menu_keyboard(category, user_id, template_manager),
    )
    await state.set_state(UserStates.category_menu)


async def switch_language(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return
    current_lang = template_manager.get_user_language(user_id)
    new_lang = "rus" if current_lang == "ukr" else "ukr"

    template_manager.set_user_language(user_id, new_lang)

    success_text = (
        "‚úÖ –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É" if new_lang == "ukr" else "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    )
    await callback.answer(success_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    welcome_text = (
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:" if new_lang == "ukr" else "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:"
    )

    await callback.message.edit_text(
        welcome_text, reply_markup=create_main_menu_keyboard(user_id, template_manager)
    )


async def start_search(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    search_text = (
        "üîç –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É —à–∞–±–ª–æ–Ω—ñ–≤:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Ü—ñ–Ω–∞, –º–∞–∫–µ—Ç, —Ç–µ—Ä–º—ñ–Ω–∏, —è–∫—ñ—Å—Ç—å"
        if lang == "ukr"
        else "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ü–µ–Ω–∞, –º–∞–∫–µ—Ç, —Å—Ä–æ–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ"
    )

    builder = InlineKeyboardBuilder()
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ukr" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    await callback.message.edit_text(search_text, reply_markup=builder.as_markup())
    await state.set_state(UserStates.search_mode)


@handle_exceptions
async def process_search_query(message: types.Message, state: FSMContext, template_manager) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = message.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        raise ValidationError(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    search_validation = validator.validate_search_query(message.text)
    if not search_validation.is_valid:
        lang = template_manager.get_user_language(user_id)
        error_text = (
            f"‚ùå {search_validation.error_message}"
            if lang == "ukr"
            else f"‚ùå {search_validation.error_message}"
        )
        await message.answer(error_text)
        return

    query = search_validation.cleaned_value

    # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å proper error handling)
    found_templates = template_manager.search_templates(query)

    if not found_templates:
        no_results_text = (
            f"‚ùå –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n" "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞."
            if template_manager.get_user_language(user_id) == "ukr"
            else f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
        )
        await message.answer(no_results_text)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    builder = InlineKeyboardBuilder()

    for template in found_templates[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        latin_category = get_latin_category(template.category)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
        builder.row(
            InlineKeyboardButton(
                text=f"{template.button_text}",
                callback_data=f"template_{latin_category}_{template.subcategory}",
            )
        )

    lang = template_manager.get_user_language(user_id)
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ukr" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    results_text = (
        f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_templates)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}':"
        if lang == "ukr"
        else f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_templates)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':"
    )

    await message.answer(results_text, reply_markup=builder.as_markup())


async def coming_soon(callback: CallbackQuery, template_manager) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    text = (
        "‚è≥ –¶—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑'—è–≤–∏—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
        if lang == "ukr"
        else "‚è≥ –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )

    await callback.answer(text)


@handle_exceptions
async def cmd_reload(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        from src.integrations.knowledge_sync import knowledge_sync_service

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await message.answer("üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets –∏ –æ–±–Ω–æ–≤–ª—è–µ–º AI –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
        sync_result = await knowledge_sync_service.full_sync_knowledge_base(force_reload=True)

        if sync_result["success"]:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –ø–∞–º—è—Ç—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –ø–∞–º—è—Ç–∏...")
            template_manager.reload_templates()

            success_text = (
                f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"üìä CSV —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {sync_result['csv_files_updated']}\n"
                f"ü§ñ ChromaDB –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {'‚úÖ' if sync_result['chromadb_updated'] else '‚ùå'}\n"
                f"üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {'‚úÖ' if sync_result['analytics_recorded'] else '‚ùå'}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {sync_result['duration_ms']}ms\n"
                f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(template_manager.templates)}\n"
                f"üìÑ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {sum(len(t) for t in template_manager.templates.values())}"
            )
            await message.answer(success_text)
        else:
            error_text = (
                f"‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏:\n"
                f"üìä CSV —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {sync_result['csv_files_updated']}\n"
                f"‚ùå –û—à–∏–±–∫–∏: {', '.join(sync_result['errors'])}"
            )
            await message.answer(error_text)

    except Exception as e:
        error_text = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
        await message.answer(error_text)


@handle_exceptions
async def cmd_health(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        from datetime import datetime

        from error_monitor import get_health_status

        health_status = get_health_status()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        templates_count = sum(len(t) for t in template_manager.templates.values())
        categories_count = len(template_manager.templates)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        error_stats = (
            template_manager.stats.get_stats_summary()
            if hasattr(template_manager, "stats")
            else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        )

        health_text = f"""
üè• **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**

ü§ñ **–°—Ç–∞—Ç—É—Å:** {health_status['status']}
üìä **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** {categories_count}
üìã **–®–∞–±–ª–æ–Ω—ã:** {templates_count}
üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìà **–û—à–∏–±–∫–∏ –∑–∞ —á–∞—Å:**
- –í—Å–µ–≥–æ: {health_status['errors_last_hour']}
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {health_status['critical_errors_last_hour']}

üíæ **–ü–∞–º—è—Ç—å:** OK
üåê **–°–µ—Ç—å:** OK
        """

        await message.answer(health_text)

    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        await message.answer(error_text)


@handle_exceptions
async def cmd_analytics(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ AI (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        from src.analytics.dashboard import create_simple_report

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = create_simple_report()

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(report) > 4000:
            parts = [report[i : i + 4000] for i in range(0, len(report), 4000)]
            for i, part in enumerate(parts, 1):
                await message.answer(f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (—á–∞—Å—Ç—å {i}/{len(parts)}):**\n\n{part}")
        else:
            await message.answer(f"üìä **–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n\n{report}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


@handle_exceptions
async def cmd_sync(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        from src.integrations.knowledge_sync import knowledge_sync_service

        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        sync_result = await knowledge_sync_service.smart_sync()

        if sync_result.get("skipped"):
            await message.answer(
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n" f"üí° –ü—Ä–∏—á–∏–Ω–∞: {sync_result['reason']}"
            )
        elif sync_result["success"]:
            await message.answer(
                f"‚úÖ –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π: {sync_result['changes']}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è: {sync_result['duration_ms']}ms"
            )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )

    except Exception as e:
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


@handle_exceptions
async def cmd_suggestions(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        from src.analytics.analytics_service import analytics_service

        suggestions = analytics_service.get_improvement_suggestions()

        if suggestions:
            suggestions_text = "üí° **–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:**\n\n"

            for i, suggestion in enumerate(suggestions, 1):
                priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(
                    suggestion.get("priority", "medium"), "üîµ"
                )

                suggestions_text += f"{priority_emoji} **{i}. {suggestion['description']}**\n"

                if "examples" in suggestion:
                    suggestions_text += "   –ü—Ä–∏–º–µ—Ä—ã:\n"
                    for example in suggestion["examples"][:2]:
                        suggestions_text += f"   ‚Ä¢ {example}\n"

                suggestions_text += "\n"

            await message.answer(suggestions_text)
        else:
            await message.answer(
                "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!"
            )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")


@handle_exceptions
async def process_ai_message(message: types.Message, state: FSMContext, template_manager) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ AI-—Ä–µ–∂–∏–º–µ"""
    user_id = message.from_user.id
    user_text = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return

    text_validation = validator.validate_search_query(user_text)
    if not text_validation.is_valid:
        lang = template_manager.get_user_language(user_id)
        error_text = (
            f"‚ùå {text_validation.error_message}"
            if lang == "ukr"
            else f"‚ùå {text_validation.error_message}"
        )
        await message.answer(error_text)
        return

    lang = template_manager.get_user_language(user_id)

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI
        ai_result = await ai_service.process_query(user_text, user_id, lang)

        if ai_result.get("answer"):
            # AI –¥–∞–ª —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç
            response_text = ai_result["answer"]

            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if user_id in ADMIN_USER_IDS:
                confidence = ai_result.get("confidence", 0.0)
                source = ai_result.get("source", "unknown")
                response_time_ms = ai_result.get("response_time_ms", 0)

                admin_metrics = (
                    f"\n\nüìä **–ú–µ—Ç—Ä–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):**\n"
                    f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}\n"
                    f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time_ms}ms"
                )
                response_text += admin_metrics

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            builder = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –≤—Å–µ—Ö
            manager_text = (
                "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" if lang == "ukr" else "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            )
            builder.row(InlineKeyboardButton(text=manager_text, callback_data="contact_manager"))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if user_id in ADMIN_USER_IDS:
                # –°–æ–∑–¥–∞–µ–º callback —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                correct_callback_id = quick_corrections_service.create_callback_session(
                    user_id, user_text, response_text, "correct"
                )
                add_callback_id = quick_corrections_service.create_callback_session(
                    user_id, user_text, response_text, "add"
                )

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                correct_text = "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" if lang == "rus" else "‚úèÔ∏è –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                builder.row(
                    InlineKeyboardButton(
                        text=correct_text, callback_data=f"correct:{correct_callback_id}"
                    )
                )

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                add_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É" if lang == "rus" else "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –±–∞–∑—É"
                builder.row(
                    InlineKeyboardButton(text=add_text, callback_data=f"add:{add_callback_id}")
                )

            back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

            await message.answer(response_text, reply_markup=builder.as_markup())

        else:
            # AI –Ω–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback
            response_text = ai_result["answer"]

            builder = InlineKeyboardBuilder()
            back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

            await message.answer(response_text, reply_markup=builder.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        fallback_text = (
            "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
            if lang == "ukr"
            else "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )

        builder = InlineKeyboardBuilder()
        back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

        await message.answer(fallback_text, reply_markup=builder.as_markup())


async def contact_manager(callback: CallbackQuery, template_manager) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
    business_status = get_business_status(lang)

    contact_info = (
        "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**\n\n"
        "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: @YourManagerUsername\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380XX XXX XX XX\n"
        "‚è∞ –†–æ–±–æ—á–∏–π —á–∞—Å: –ü–Ω-–ü—Ç 9:00-18:00, –°–± 10:00-15:00\n\n"
        if lang == "ukr"
        else "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
        "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: @YourManagerUsername\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380XX XXX XX XX\n"
        "‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ü–Ω-–ü—Ç 9:00-18:00, –°–± 10:00-15:00\n\n"
    )

    full_message = business_status + "\n\n" + contact_info

    builder = InlineKeyboardBuilder()
    back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    await callback.message.edit_text(full_message, reply_markup=builder.as_markup())
    await callback.answer()


async def start_ai_mode(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ AI-—Ä–µ–∂–∏–º"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    ai_intro_text = (
        "ü§ñ **AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π!**\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏, "
        "—ñ —è —Å–ø—Ä–æ–±—É—é –¥–∞—Ç–∏ –≤–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—à–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å.\n\n"
        "üìù **–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:**\n"
        "‚Ä¢ –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?\n"
        "‚Ä¢ –Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ñ—É—Ç–±–æ–ª–æ–∫?\n"
        "‚Ä¢ –Ø–∫—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –º–∞–∫–µ—Ç—ñ–≤ –≤–∏ –ø—Ä–∏–π–º–∞—î—Ç–µ?\n"
        "‚Ä¢ –ß–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∏–∑–∞–π–Ω –∑ –Ω—É–ª—è?\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º!"
        if lang == "ukr"
        else "ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, "
        "–∏ —è –ø–æ–ø—Ä–æ–±—É—é –¥–∞—Ç—å –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n\n"
        "üìù **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ñ—É—Ç–±–æ–ª–æ–∫?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–∞–∫–µ—Ç–æ–≤ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç–µ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω —Å –Ω—É–ª—è?\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!"
    )

    builder = InlineKeyboardBuilder()
    back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    await callback.message.edit_text(ai_intro_text, reply_markup=builder.as_markup())
    await state.set_state(UserStates.ai_mode)
    await callback.answer()


async def start_answer_correction(
    callback: CallbackQuery, state: FSMContext, template_manager
) -> None:
    """–ù–∞—á–∞–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    lang = template_manager.get_user_language(user_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º callback_id –∏–∑ callback_data
    callback_data = callback.data
    callback_id = callback_data.replace("correct:", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback —Å–µ—Å—Å–∏–∏
    callback_session = quick_corrections_service.get_callback_session(callback_id)
    if not callback_session:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
        return

    original_query = callback_session["query"]
    original_answer = callback_session["answer"]

    # –£–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    if "üìä **–ú–µ—Ç—Ä–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):**" in original_answer:
        original_answer = original_answer.split("üìä **–ú–µ—Ç—Ä–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):**")[0].strip()

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    session_id = quick_corrections_service.start_correction_session(
        user_id, original_query, original_answer
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(
        correction_session_id=session_id,
        original_query=original_query,
        original_answer=original_answer,
        callback_id=callback_id,
    )

    correction_text = (
        "‚úèÔ∏è **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞**\n\n"
        f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n{original_query}\n\n"
        f"**–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:**\n{original_answer}\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
        if lang == "rus"
        else "‚úèÔ∏è **–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ**\n\n"
        f"**–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç:**\n{original_query}\n\n"
        f"**–ü–æ—Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:**\n{original_answer}\n\n"
        "üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:"
    )

    builder = InlineKeyboardBuilder()
    cancel_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" if lang == "rus" else "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
    builder.row(InlineKeyboardButton(text=cancel_text, callback_data="cancel_correction"))

    await callback.message.edit_text(correction_text, reply_markup=builder.as_markup())
    await state.set_state(UserStates.admin_correction)
    await callback.answer()


async def start_kb_addition(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞-–æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    lang = template_manager.get_user_language(user_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º callback_id –∏–∑ callback_data
    callback_data = callback.data
    callback_id = callback_data.replace("add:", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback —Å–µ—Å—Å–∏–∏
    callback_session = quick_corrections_service.get_callback_session(callback_id)
    if not callback_session:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
        return

    query = callback_session["query"]

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    session_id = quick_corrections_service.start_add_to_kb_session(user_id, query)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(addition_session_id=session_id, query=query, callback_id=callback_id)

    addition_text = (
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π**\n\n"
        f"**–ó–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**\n{query}\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
        if lang == "rus"
        else "‚ûï **–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å**\n\n"
        f"**–ó–∞–ø–∏—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:**\n{query}\n\n"
        "üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ–π –∑–∞–ø–∏—Ç –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:"
    )

    builder = InlineKeyboardBuilder()
    cancel_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" if lang == "rus" else "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
    builder.row(InlineKeyboardButton(text=cancel_text, callback_data="cancel_correction"))

    await callback.message.edit_text(addition_text, reply_markup=builder.as_markup())
    await state.set_state(UserStates.admin_addition)
    await callback.answer()


async def cancel_correction(callback: CallbackQuery, state: FSMContext, template_manager) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id

    if user_id not in ADMIN_USER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    lang = template_manager.get_user_language(user_id)

    # –û—Ç–º–µ–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–µ—Ä–≤–∏—Å–µ
    quick_corrections_service.cancel_session(user_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ AI —Ä–µ–∂–∏–º
    await state.set_state(UserStates.ai_mode)

    cancel_text = (
        "‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        if lang == "rus"
        else "‚ùå –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        "üí° –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )

    builder = InlineKeyboardBuilder()
    back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

    await callback.message.edit_text(cancel_text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_admin_correction(
    message: types.Message, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    lang = template_manager.get_user_language(user_id)
    corrected_answer = message.text

    try:
        # –ü–æ–ª—É—á–∞–µ–º callback_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        user_data = await state.get_data()
        callback_id = user_data.get("callback_id")
        if callback_id:
            quick_corrections_service.cleanup_callback_session(callback_id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        result = quick_corrections_service.process_correction(user_id, corrected_answer)

        if result["success"]:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
            user_data = await state.get_data()
            original_query = user_data.get("original_query", "")
            original_answer = user_data.get("original_answer", "")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if original_query:
                keyword_preview = quick_corrections_service.get_keyword_preview(
                    original_query, corrected_answer, result["category"]
                )

                keywords_info = (
                    f"**üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:** {keyword_preview['extracted']}\n"
                    f"**‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ:** {', '.join(keyword_preview['auto_added']) if keyword_preview['auto_added'] else '–Ω–µ—Ç'}\n"
                    f"**üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:** {', '.join(keyword_preview['suggestions'][:5]) if keyword_preview['suggestions'] else '–Ω–µ—Ç'}"
                    if lang == "rus"
                    else f"**üîç –í–∏—Ç—è–≥–Ω–µ–Ω–æ –∑ –∑–∞–ø–∏—Ç—É:** {keyword_preview['extracted']}\n"
                    f"**‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–æ:** {', '.join(keyword_preview['auto_added']) if keyword_preview['auto_added'] else '–Ω–µ–º–∞—î'}\n"
                    f"**üí° –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:** {', '.join(keyword_preview['suggestions'][:5]) if keyword_preview['suggestions'] else '–Ω–µ–º–∞—î'}"
                )
            else:
                keywords_info = (
                    f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {result['keywords']}"
                    if lang == "rus"
                    else f"**–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:** {result['keywords']}"
                )

            success_text = (
                f"‚úÖ {result['message']}\n\n"
                f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {result['category']}\n"
                f"{keywords_info}\n\n"
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤."
                if lang == "rus"
                else f"‚úÖ {result['message']}\n\n"
                f"**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {result['category']}\n"
                f"{keywords_info}\n\n"
                "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å —ñ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."
            )

            builder = InlineKeyboardBuilder()
            back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

            await message.answer(success_text, reply_markup=builder.as_markup())

        else:
            error_text = (
                f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                if lang == "rus"
                else f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

            await message.answer(error_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç {user_id}: {e}")

        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            if lang == "rus"
            else "‚ùå –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )

        await message.answer(error_text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ AI —Ä–µ–∂–∏–º
    await state.set_state(UserStates.ai_mode)


async def process_admin_addition(
    message: types.Message, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞-–æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    user_id = message.from_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    lang = template_manager.get_user_language(user_id)
    answer = message.text

    try:
        # –ü–æ–ª—É—á–∞–µ–º callback_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        user_data = await state.get_data()
        callback_id = user_data.get("callback_id")
        if callback_id:
            quick_corrections_service.cleanup_callback_session(callback_id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        result = quick_corrections_service.process_kb_addition(user_id, answer)

        if result["success"]:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
            user_data = await state.get_data()
            query = user_data.get("query", "")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if query:
                keyword_preview = quick_corrections_service.get_keyword_preview(
                    query, answer, result["category"]
                )

                keywords_info = (
                    f"**üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:** {keyword_preview['extracted']}\n"
                    f"**‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ:** {', '.join(keyword_preview['auto_added']) if keyword_preview['auto_added'] else '–Ω–µ—Ç'}\n"
                    f"**üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:** {', '.join(keyword_preview['suggestions'][:5]) if keyword_preview['suggestions'] else '–Ω–µ—Ç'}"
                    if lang == "rus"
                    else f"**üîç –í–∏—Ç—è–≥–Ω–µ–Ω–æ –∑ –∑–∞–ø–∏—Ç—É:** {keyword_preview['extracted']}\n"
                    f"**‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–æ:** {', '.join(keyword_preview['auto_added']) if keyword_preview['auto_added'] else '–Ω–µ–º–∞—î'}\n"
                    f"**üí° –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:** {', '.join(keyword_preview['suggestions'][:5]) if keyword_preview['suggestions'] else '–Ω–µ–º–∞—î'}"
                )
            else:
                keywords_info = (
                    f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {result['keywords']}"
                    if lang == "rus"
                    else f"**–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:** {result['keywords']}"
                )

            success_text = (
                f"‚úÖ {result['message']}\n\n"
                f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {result['category']}\n"
                f"{keywords_info}\n\n"
                "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."
                if lang == "rus"
                else f"‚úÖ {result['message']}\n\n"
                f"**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {result['category']}\n"
                f"{keywords_info}\n\n"
                "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–¥–∞–Ω–æ –¥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å."
            )

            builder = InlineKeyboardBuilder()
            back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

            await message.answer(success_text, reply_markup=builder.as_markup())

        else:
            error_text = (
                f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                if lang == "rus"
                else f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

            await message.answer(error_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–ó –æ—Ç {user_id}: {e}")

        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            if lang == "rus"
            else "‚ùå –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )

        await message.answer(error_text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ AI —Ä–µ–∂–∏–º
    await state.set_state(UserStates.ai_mode)


async def cmd_browse_kb(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        overview = knowledge_base_manager.get_knowledge_base_overview()

        if not overview["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {overview['error']}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        overview_text = (
            "üìö **–û–ë–ó–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô**\n\n"
            f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {overview['total_documents']}\n"
            f"‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {overview['collection_name']}\n"
            f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {overview['last_updated'][:19]}\n\n"
            f"üóÇ **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
        )

        for category, count in overview["categories"].items():
            overview_text += f"‚Ä¢ {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"

        overview_text += f"\nüîó **–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:**\n"
        for source, count in overview["sources"].items():
            source_name = {
                "csv": "CSV —Ñ–∞–π–ª—ã",
                "admin_correction": "–ê–¥–º–∏–Ω—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "admin_addition": "–ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            }.get(source, source)
            overview_text += f"‚Ä¢ {source_name}: {count}\n"

        overview_text += f"\nüåê **–ü–æ —è–∑—ã–∫–∞–º:**\n"
        for lang, count in overview["languages"].items():
            lang_name = {"ukrainian": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π", "russian": "–†—É—Å—Å–∫–∏–π"}.get(lang, lang)
            overview_text += f"‚Ä¢ {lang_name}: {count}\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(overview_text) > 4000:
            chunks = [overview_text[i : i + 4000] for i in range(0, len(overview_text), 4000)]
            for chunk in chunks:
                await message.answer(chunk)
        else:
            await message.answer(overview_text)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        additional_info = (
            "\nüí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "`/search_kb [–∑–∞–ø—Ä–æ—Å]` - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            "`/export_kb` - –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
        )
        await message.answer(additional_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã browse_kb: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


async def cmd_search_kb(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(" ", 1)
        if len(command_parts) < 2:
            await message.answer(
                "üîç **–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/search_kb –≤–∞—à –∑–∞–ø—Ä–æ—Å`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/search_kb –≤–∏–∑–∏—Ç–∫–∏ —Ü–µ–Ω–∞`\n"
                "‚Ä¢ `/search_kb —Ñ—É—Ç–±–æ–ª–∫–∏ —Ä–∞–∑–º–µ—Ä—ã`\n"
                "‚Ä¢ `/search_kb –ª–∞–º–∏–Ω–∞—Ü–∏—è`"
            )
            return

        search_query = command_parts[1].strip()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = knowledge_base_manager.search_knowledge_base(search_query, limit=10)

        if not search_results["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_results['error']}")
            return

        if not search_results["results"]:
            await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results_text = (
            f"üîç **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê**\n"
            f"–ó–∞–ø—Ä–æ—Å: ¬´{search_query}¬ª\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {search_results['total_found']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        )

        for i, result in enumerate(search_results["results"][:5], 1):
            relevance_percent = int(result["relevance_score"] * 100)
            results_text += (
                f"**{i}. {result['category']}** ({relevance_percent}% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å)\n"
                f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {result['keywords'][:100]}{'...' if len(result['keywords']) > 100 else ''}\n"
                f"üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π: {result['answer_ukr'][:150]}{'...' if len(result['answer_ukr']) > 150 else ''}\n"
                f"üá∑üá∫ –†—É—Å—Å–∫–∏–π: {result['answer_rus'][:150]}{'...' if len(result['answer_rus']) > 150 else ''}\n"
                f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}\n\n"
            )

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(results_text) > 4000:
            chunks = [results_text[i : i + 4000] for i in range(0, len(results_text), 4000)]
            for chunk in chunks:
                await message.answer(chunk)
        else:
            await message.answer(results_text)

        if len(search_results["results"]) > 5:
            await message.answer(f"... –∏ –µ—â–µ {len(search_results['results']) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã search_kb: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")


async def cmd_export_kb(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        export_info = (
            "üì¶ **–≠–ö–°–ü–û–†–¢ –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ `json` - JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
            "‚Ä¢ `csv` - CSV –¥–ª—è Google Sheets\n"
            "‚Ä¢ `backup` - –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –¥–ª—è production\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/export_kb [—Ñ–æ—Ä–º–∞—Ç]`\n"
            "–ü—Ä–∏–º–µ—Ä: `/export_kb backup`"
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(" ", 1)
        if len(command_parts) < 2:
            await message.answer(export_info)
            return

        export_format = command_parts[1].strip().lower()

        if export_format not in ["json", "csv", "backup"]:
            await message.answer(export_info)
            return

        await message.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        export_result = knowledge_base_manager.export_knowledge_base(
            export_format=export_format, include_admin_additions=True
        )

        if not export_result["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_result['error']}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
        file_size_mb = export_result["file_size"] / (1024 * 1024)

        success_text = (
            f"‚úÖ **–≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù**\n\n"
            f"üìÅ –§–æ—Ä–º–∞—Ç: {export_result['format'].upper()}\n"
            f"üìÑ –§–∞–π–ª: `{export_result.get('filename', export_result.get('zip_file'))}`\n"
            f"üìä –ó–∞–ø–∏—Å–µ–π: {export_result['items_exported']}\n"
            f"üíæ –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB\n"
        )

        if export_format == "backup":
            success_text += (
                f"üì¶ –í–∫–ª—é—á–∞–µ—Ç: {', '.join(export_result['includes'])}\n\n"
                f"üöÄ **–î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ production:**\n"
                f"1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª: `{export_result['zip_file']}`\n"
                f"2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ\n"
                f"3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ DEPLOYMENT_INSTRUCTIONS.md\n\n"
                f"üí° –ë—ç–∫–∞–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π!"
            )
        elif export_format == "csv":
            success_text += (
                f"\nüìã **–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Sheets:**\n"
                f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets\n"
                f"2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV —Ñ–∞–π–ª\n"
                f"3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –±–æ—Ç–æ–º"
            )

        await message.answer(success_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        filepath = export_result.get("filepath", export_result.get("zip_filepath"))
        await message.answer(f"üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: `{filepath}`")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã export_kb: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")


async def process_direct_ai_message(
    message: types.Message, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ AI —Ä–µ–∂–∏–º)"""
    user_id = message.from_user.id
    user_text = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if user_text.startswith("/") or user_text.startswith("üéØ") or user_text.startswith("üìû"):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    text_validation = validator.validate_search_query(user_text)
    if not text_validation.is_valid:
        lang = template_manager.get_user_language(user_id)
        error_text = (
            f"‚ùå {text_validation.error_message}"
            if lang == "ukr"
            else f"‚ùå {text_validation.error_message}"
        )
        await message.answer(error_text)
        return

    lang = template_manager.get_user_language(user_id)

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π AI —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        user_ai_mode = template_manager.get_user_ai_mode(user_id)
        if user_ai_mode == "enhanced":
            from src.ai.enhanced_ai_service import enhanced_ai_service

            ai_result = await enhanced_ai_service.process_query(user_text, user_id, lang)
        else:
            ai_result = await ai_service.process_query(user_text, user_id, lang)

        if ai_result.get("answer"):
            # AI –¥–∞–ª —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç
            response_text = ai_result["answer"]

            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if user_id in ADMIN_USER_IDS:
                confidence = ai_result.get("confidence", 0.0)
                source = ai_result.get("source", "unknown")
                response_time_ms = ai_result.get("response_time_ms", 0)

                admin_metrics = (
                    f"\n\nüìä **–ú–µ—Ç—Ä–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):**\n"
                    f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}\n"
                    f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time_ms}ms"
                )
                response_text += admin_metrics

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            builder = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –≤—Å–µ—Ö
            manager_text = (
                "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" if lang == "ukr" else "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            )
            builder.row(InlineKeyboardButton(text=manager_text, callback_data="contact_manager"))

            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ AI —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            ai_mode_text = "ü§ñ –†–µ–∂–∏–º AI-–¥—ñ–∞–ª–æ–≥—É" if lang == "ukr" else "ü§ñ –†–µ–∂–∏–º AI-–¥–∏–∞–ª–æ–≥–∞"
            builder.row(InlineKeyboardButton(text=ai_mode_text, callback_data="start_ai_mode"))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if user_id in ADMIN_USER_IDS:
                # –°–æ–∑–¥–∞–µ–º callback —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                correct_callback_id = quick_corrections_service.create_callback_session(
                    user_id, user_text, response_text, "correct"
                )
                add_callback_id = quick_corrections_service.create_callback_session(
                    user_id, user_text, response_text, "add"
                )

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                correct_text = "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" if lang == "rus" else "‚úèÔ∏è –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                builder.row(
                    InlineKeyboardButton(
                        text=correct_text, callback_data=f"correct:{correct_callback_id}"
                    )
                )

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                add_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É" if lang == "rus" else "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –±–∞–∑—É"
                builder.row(
                    InlineKeyboardButton(text=add_text, callback_data=f"add:{add_callback_id}")
                )

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            menu_text = "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            builder.row(InlineKeyboardButton(text=menu_text, callback_data="back_to_main"))

            await message.answer(response_text, reply_markup=builder.as_markup())

        else:
            # AI –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            fallback_text = (
                "ü§î –ù–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
                "üìû –†–µ–∫–æ–º–µ–Ω–¥—É—é –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, "
                "–∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
                "üéØ –¢–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∏–∂—á–µ:"
                if lang == "ukr"
                else "ü§î –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
                "üìû –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, "
                "–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.\n\n"
                "üéØ –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ:"
            )

            builder = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            manager_text = (
                "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" if lang == "ukr" else "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            )
            builder.row(InlineKeyboardButton(text=manager_text, callback_data="contact_manager"))

            # –ö–Ω–æ–ø–∫–∞ AI —Ä–µ–∂–∏–º–∞
            ai_mode_text = "ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫" if lang == "ukr" else "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫"
            builder.row(InlineKeyboardButton(text=ai_mode_text, callback_data="start_ai_mode"))

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            menu_text = "üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é" if lang == "ukr" else "üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
            builder.row(InlineKeyboardButton(text=menu_text, callback_data="back_to_main"))

            await message.answer(fallback_text, reply_markup=builder.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä—è–º–æ–≥–æ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")

        fallback_text = (
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.\n\n"
            "üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            if lang == "ukr"
            else "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

        builder = InlineKeyboardBuilder()
        manager_text = (
            "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" if lang == "ukr" else "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        )
        builder.row(InlineKeyboardButton(text=manager_text, callback_data="contact_manager"))

        menu_text = "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        builder.row(InlineKeyboardButton(text=menu_text, callback_data="back_to_main"))

        await message.answer(fallback_text, reply_markup=builder.as_markup())


async def switch_to_enhanced_ai(
    callback: CallbackQuery, state: FSMContext, template_manager
) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI (–û–ª–µ–Ω–∞)"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
    template_manager.set_user_ai_mode(user_id, "enhanced")

    success_text = (
        "üé≠ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI —Å –û–ª–µ–Ω–æ–π!\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º. "
        "–û–ª–µ–Ω–∞ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏."
        if lang == "rus"
        else "üé≠ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π AI –∑ –û–ª–µ–Ω–æ—é!\n\n"
        "–¢–µ–ø–µ—Ä —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –±—É–¥–µ –±—ñ–ª—å—à –∂–∏–≤–∏–º —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º. "
        "–û–ª–µ–Ω–∞ –ø–∞–º'—è—Ç–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å—ñ–¥–∏ —Ç–∞ –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –ø—ñ–¥ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏."
    )

    await callback.answer("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω!" if lang == "rus" else "‚úÖ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
    welcome_text = (
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:" if lang == "rus" else "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:"
    )

    await callback.message.edit_text(
        f"{success_text}\n\n{welcome_text}",
        reply_markup=create_main_menu_keyboard(user_id, template_manager),
    )


async def switch_to_standard_ai(
    callback: CallbackQuery, state: FSMContext, template_manager
) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI"""
    user_id = callback.from_user.id
    lang = template_manager.get_user_language(user_id)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
    template_manager.set_user_ai_mode(user_id, "standard")

    success_text = (
        "ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫!\n\n"
        "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."
        if lang == "rus"
        else "ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫!\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–ª–∞—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó."
    )

    await callback.answer("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω!" if lang == "rus" else "‚úÖ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
    welcome_text = (
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:" if lang == "rus" else "üéØ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:"
    )

    await callback.message.edit_text(
        f"{success_text}\n\n{welcome_text}",
        reply_markup=create_main_menu_keyboard(user_id, template_manager),
    )
