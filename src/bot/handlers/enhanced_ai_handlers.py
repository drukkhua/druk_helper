"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º "–û–ª–µ–Ω–∞"
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import logging
from typing import Dict

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_USER_IDS, logger
from src.utils.error_handler import handle_exceptions
from src.bot.models import UserStates
from src.ai.enhanced_ai_service import enhanced_ai_service
from src.ai.service import ai_service  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
from src.core.validation import validator

router = Router()


class EnhancedAIStates(StatesGroup):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI"""

    enhanced_ai_mode = State()
    comparison_mode = State()


def detect_user_language(message: types.Message) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message.text:
        return "ukr"

    text = message.text.lower()

    # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã
    ukrainian_words = [
        "—â–æ",
        "—è–∫",
        "–¥–µ",
        "–∫–æ–ª–∏",
        "—á–æ–º—É",
        "—Å–∫—ñ–ª—å–∫–∏",
        "–≤—ñ–∑–∏—Ç–∫–∏",
        "—Ü—ñ–Ω–∞",
        "–¥—Ä—É–∫",
        "–º–∞–∫–µ—Ç",
    ]
    russian_words = [
        "—á—Ç–æ",
        "–∫–∞–∫",
        "–≥–¥–µ",
        "–∫–æ–≥–¥–∞",
        "–ø–æ—á–µ–º—É",
        "—Å–∫–æ–ª—å–∫–æ",
        "–≤–∏–∑–∏—Ç–∫–∏",
        "—Ü–µ–Ω–∞",
        "–ø–µ—á–∞—Ç—å",
        "–º–∞–∫–µ—Ç",
    ]

    ukr_count = sum(1 for word in ukrainian_words if word in text)
    rus_count = sum(1 for word in russian_words if word in text)

    return "ukr" if ukr_count >= rus_count else "rus"


@router.message(Command("enhanced"))
@handle_exceptions
async def cmd_enhanced_mode(message: types.Message, state: FSMContext, template_manager) -> None:
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI —Å –û–ª–µ–Ω–æ–π"""

    user_id = message.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI
    if not enhanced_ai_service.is_available():
        await message.answer(
            "üòî –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
    service_info = enhanced_ai_service.get_service_info()
    lang = template_manager.get_user_language(user_id)

    if lang == "ukr":
        welcome_text = f"""üé≠ **–í—ñ—Ç–∞—é –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∑ {service_info['persona_name']}!**

–¢–µ–ø–µ—Ä –≤–∏ —Å–ø—ñ–ª–∫—É—î—Ç–µ—Å—è –∑ –Ω–∞—à–∏–º –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º AI-–ø–æ–º—ñ—á–Ω–∏–∫–æ–º.

‚ú® **–©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è:**
‚Ä¢ –ë—ñ–ª—å—à –∂–∏–≤–µ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ –ü–∞–º'—è—Ç—å –ø—Ä–æ –≤–∞—à—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
‚Ä¢ –£—Ç–æ—á–Ω—é—é—á—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å–≤—ñ–¥—É
‚Ä¢ –ï–º–æ—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ –≤–∞—à–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é

ü§ñ **–¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**
‚Ä¢ –°–µ—Ä–≤—ñ—Å: {service_info['service_type']}
‚Ä¢ AI —Ä–µ–∂–∏–º: {'–†–µ–∞–ª—å–Ω–∏–π OpenAI' if service_info['real_ai'] else 'Mock —Ä–µ–∂–∏–º'}
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω—å: {'–ì–æ—Ç–æ–≤–∞' if service_info['knowledge_ready'] else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚Ä¢ –ú–æ–¥–µ–ª—å: {service_info.get('model', 'Unknown')}

–ó–∞–¥–∞–≤–∞–π—Ç–µ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è! üòä

–ö–æ–º–∞–Ω–¥–∏:
‚Ä¢ /compare - –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –∑–≤–∏—á–∞–π–Ω–∏–º AI
‚Ä¢ /normal - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
‚Ä¢ /enhanced_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
    else:
        welcome_text = f"""üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å {service_info['persona_name']}!**

–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–º AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º.

‚ú® **–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:**
‚Ä¢ –ë–æ–ª–µ–µ –∂–∏–≤–æ–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ü–∞–º—è—Ç—å –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö
‚Ä¢ –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ—é

ü§ñ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –°–µ—Ä–≤–∏—Å: {service_info['service_type']}
‚Ä¢ AI —Ä–µ–∂–∏–º: {'–†–µ–∞–ª—å–Ω—ã–π OpenAI' if service_info['real_ai'] else 'Mock —Ä–µ–∂–∏–º'}
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–ì–æ—Ç–æ–≤–∞' if service_info['knowledge_ready'] else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚Ä¢ –ú–æ–¥–µ–ª—å: {service_info.get('model', 'Unknown')}

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üòä

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /compare - —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –æ–±—ã—á–Ω—ã–º AI
‚Ä¢ /normal - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É
‚Ä¢ /enhanced_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""

    await message.answer(welcome_text, parse_mode="Markdown")
    await state.set_state(EnhancedAIStates.enhanced_ai_mode)


@router.message(Command("compare"))
@handle_exceptions
async def cmd_compare_mode(message: types.Message, state: FSMContext, template_manager) -> None:
    """–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI"""

    user_id = message.from_user.id
    lang = template_manager.get_user_language(user_id)

    if lang == "ukr":
        text = (
            "üîç **–†–µ–∂–∏–º –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è AI**\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –ø–æ–∫–∞–∂—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ AI.\n\n"
            "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–±–∞—á–∏—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é –≤ –ø—ñ–¥—Ö–æ–¥–∞—Ö –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.\n\n"
            "‚ö†Ô∏è **–£–≤–∞–≥–∞:** –†–µ–∂–∏–º –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–¥–≤—ñ—á—ñ –±—ñ–ª—å—à–µ —Ç–æ–∫–µ–Ω—ñ–≤ OpenAI.\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ /normal –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ä–µ–∂–∏–º—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è."
        )
    else:
        text = (
            "üîç **–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è AI**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–∫–∞–∂—É –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI.\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ –ø–æ–¥—Ö–æ–¥–∞—Ö –∫ –æ—Ç–≤–µ—Ç–∞–º.\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ OpenAI.\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ /normal –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
        )

    await message.answer(text, parse_mode="Markdown")
    await state.set_state(EnhancedAIStates.comparison_mode)


@router.message(Command("enhanced_stats"))
@handle_exceptions
async def cmd_enhanced_stats(message: types.Message, template_manager) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""

    user_id = message.from_user.id
    lang = template_manager.get_user_language(user_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from src.managers.models import unified_db

        stats = unified_db.get_user_stats_summary(user_id)

        if not stats or stats.get("total_messages", 0) == 0:
            if lang == "ukr":
                text = (
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n"
                    "–ü–æ—Å—Ç–∞–≤—Ç–µ –∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å, —ñ —è –∑–º–æ–∂—É –∫—Ä–∞—â–µ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –ø—ñ–¥ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏! üòä"
                )
            else:
                text = (
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è.\n"
                    "–ó–∞–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è —Å–º–æ–≥—É –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏! üòä"
                )
            await message.answer(text)
            return

        if lang == "ukr":
            stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó**

üë§ **–ó–∞–≥–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {stats.get('total_messages', 0)}
‚Ä¢ –í–∞—à–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å: {stats.get('user_messages', 0)}
‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {stats.get('assistant_messages', 0)}
‚Ä¢ –ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏: {stats.get('upselling_messages', 0)}

üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è:**
‚Ä¢ –£–ª—é–±–ª–µ–Ω–∞ —Ç–µ–º–∞: {stats.get('top_category') or '–í–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è'}
‚Ä¢ –ü–µ—Ä—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {stats.get('first_message') or '–ù–µ—â–æ–¥–∞–≤–Ω–æ'}

üí° **–Ø–∫ —Ü–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è:**
‚Ä¢ –û–ª–µ–Ω–∞ –ø–∞–º'—è—Ç–∞—î –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —Ç–∞ –º–æ–∂–µ –¥–∞–≤–∞—Ç–∏ –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –ê–¥–∞–ø—Ç—É—î —Å—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥ –≤–∞—à—ñ —É–ø–æ–¥–æ–±–∞–Ω–Ω—è
‚Ä¢ –ü—Ä–æ–ø–æ–Ω—É—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏
‚Ä¢ –í—Ä–∞—Ö–æ–≤—É—î –≤–∞—à –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∏–ø–æ–≥—Ä–∞—Ñ—ñ—î—é

üöÄ **–ß–∏–º –±—ñ–ª—å—à–µ —Å–ø—ñ–ª–∫—É—î—Ç–µ—Å—è, —Ç–∏–º —Ç–æ—á–Ω—ñ—à–∏–º–∏ —Å—Ç–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!**"""
        else:
            stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏**

üë§ **–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
‚Ä¢ –í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats.get('user_messages', 0)}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('assistant_messages', 0)}
‚Ä¢ –° –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏: {stats.get('upselling_messages', 0)}

üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –õ—é–±–∏–º–∞—è —Ç–µ–º–∞: {stats.get('top_category') or '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è'}
‚Ä¢ –ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {stats.get('first_message') or '–ù–µ–¥–∞–≤–Ω–æ'}

üí° **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:**
‚Ä¢ –û–ªena –ø–æ–º–Ω–∏—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–µ–π

üöÄ **–ß–µ–º –±–æ–ª—å—à–µ –æ–±—â–∞–µ—Ç–µ—Å—å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ—Ç–≤–µ—Ç—ã!**"""

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        error_text = (
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if lang == "rus"
            else "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        await message.answer(error_text)


@router.message(EnhancedAIStates.enhanced_ai_mode)
@handle_exceptions
async def handle_enhanced_ai_message(
    message: types.Message, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI"""

    user_id = message.from_user.id
    user_text = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    user_validation = validator.validate_user_id(user_id)
    if not user_validation.is_valid:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}")
        return

    if not user_text:
        lang = template_manager.get_user_language(user_id)
        error_text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòä"
            if lang == "rus"
            else "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üòä"
        )
        await message.answer(error_text)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = detect_user_language(message)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "–æ–±–¥—É–º—ã–≤–∞–Ω–∏—è"
        await asyncio.sleep(1)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π AI
        ai_result = await enhanced_ai_service.process_query(user_text, user_id, lang)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = ai_result["answer"]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if user_id in ADMIN_USER_IDS:
            debug_info = f"""

üîß **Debug info (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):**
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ai_result.get('confidence', 0):.1%}
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {ai_result.get('source', 'unknown')}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {ai_result.get('response_time_ms', 0)}ms
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂: {ai_result.get('persona_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if ai_result.get('context_used') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}"""
            response_text += debug_info

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        if lang == "ukr":
            manager_text = "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        else:
            manager_text = "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            back_text = "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

        builder.row(InlineKeyboardButton(text=manager_text, callback_data="contact_manager"))
        builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

        await message.answer(response_text, reply_markup=builder.as_markup(), parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ enhanced AI —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        lang = template_manager.get_user_language(user_id)
        if lang == "ukr":
            error_text = (
                "üòî –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /normal –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É."
            )
        else:
            error_text = (
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /normal –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."
            )
        await message.answer(error_text)


@router.message(EnhancedAIStates.comparison_mode)
@handle_exceptions
async def handle_comparison_message(
    message: types.Message, state: FSMContext, template_manager
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è AI"""

    user_id = message.from_user.id
    user_text = message.text
    lang = template_manager.get_user_language(user_id)

    if not user_text:
        error_text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è üòä"
            if lang == "rus"
            else "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è üòä"
        )
        await message.answer(error_text)
        return

    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–±–æ–∏—Ö AI –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = [
            ai_service.process_query(user_text, user_id, lang),
            enhanced_ai_service.process_query(user_text, user_id, lang),
        ]

        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è

        results = await asyncio.gather(*tasks, return_exceptions=True)
        normal_result, enhanced_result = results

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if lang == "ukr":
            comparison_text = "üîç **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è AI-–ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤**\n\n"

            # –û–±—ã—á–Ω—ã–π AI
            comparison_text += "ü§ñ **–ó–≤–∏—á–∞–π–Ω–∏–π AI:**\n"
        else:
            comparison_text = "üîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–≤**\n\n"

            # –û–±—ã—á–Ω—ã–π AI
            comparison_text += "ü§ñ **–û–±—ã—á–Ω—ã–π AI:**\n"

        if isinstance(normal_result, Exception):
            comparison_text += f"‚ùå –û—à–∏–±–∫–∞: {normal_result}\n\n"
        else:
            normal_answer = normal_result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞: –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 600 —Å–∏–º–≤–æ–ª–æ–≤
            if len(normal_answer) > 600:
                truncated = normal_answer[:600]
                last_sentence = truncated.rfind(".")
                if last_sentence > 400:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    normal_answer = truncated[: last_sentence + 1] + "..."
                else:
                    normal_answer = truncated + "..."
            comparison_text += f"{normal_answer}\n"
            comparison_text += f"_–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {normal_result.get('confidence', 0):.1%}_\n\n"

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI
        if lang == "ukr":
            comparison_text += "üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π AI (–û–ª–µ–Ω–∞):**\n"
        else:
            comparison_text += "üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI (–û–ª–µ–Ω–∞):**\n"

        if isinstance(enhanced_result, Exception):
            comparison_text += f"‚ùå –û—à–∏–±–∫–∞: {enhanced_result}\n\n"
        else:
            enhanced_answer = enhanced_result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞: –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 600 —Å–∏–º–≤–æ–ª–æ–≤
            if len(enhanced_answer) > 600:
                truncated = enhanced_answer[:600]
                last_sentence = truncated.rfind(".")
                if last_sentence > 400:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    enhanced_answer = truncated[: last_sentence + 1] + "..."
                else:
                    enhanced_answer = truncated + "..."
            comparison_text += f"{enhanced_answer}\n"
            comparison_text += f"_–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced_result.get('confidence', 0):.1%}_\n\n"

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        if lang == "ukr":
            comparison_text += "üìã **–û—Å–Ω–æ–≤–Ω—ñ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ:**\n"
        else:
            comparison_text += "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:**\n"

        if not isinstance(enhanced_result, Exception) and not isinstance(normal_result, Exception):
            enhanced_conf = enhanced_result.get("confidence", 0)
            normal_conf = normal_result.get("confidence", 0)
            enhanced_ans = enhanced_result.get("answer", "")
            normal_ans = normal_result.get("answer", "")

            differences_found = False

            if enhanced_conf > normal_conf:
                if lang == "ukr":
                    comparison_text += f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π AI –±—ñ–ª—å—à –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ({enhanced_conf:.1%} vs {normal_conf:.1%})\n"
                else:
                    comparison_text += f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ ({enhanced_conf:.1%} vs {normal_conf:.1%})\n"
                differences_found = True

            if len(enhanced_ans) > len(normal_ans) * 1.1:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ
                if lang == "ukr":
                    comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∞\n"
                else:
                    comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π\n"
                differences_found = True

            if any(
                word in enhanced_ans.lower()
                for word in [
                    "–æ–ª–µ–Ω–∞",
                    "–¥–æ—Å–≤—ñ–¥",
                    "–æ–ø—ã—Ç",
                    "–ø–∞–º'—è—Ç–∞—é",
                    "–ø–æ–º–Ω—é",
                    "–∑ –ø–æ–≤–∞–≥–æ—é",
                    "—Å —É–≤–∞–∂–µ–Ω–∏–µ–º",
                ]
            ):
                if lang == "ukr":
                    comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å –æ—Å–æ–±–∏—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏\n"
                else:
                    comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n"
                differences_found = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
            enhanced_emojis = len(
                [c for c in enhanced_ans if ord(c) > 127]
            )  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç–º–æ–¥–∑–∏
            normal_emojis = len([c for c in normal_ans if ord(c) > 127])

            if enhanced_emojis > normal_emojis * 1.5:
                if lang == "ukr":
                    comparison_text += (
                        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—ñ–ª—å—à –µ–º–æ—Ü—ñ–π–Ω–∞ (–±—ñ–ª—å—à–µ –µ–º–æ–¥–∑—ñ)\n"
                    )
                else:
                    comparison_text += (
                        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π (–±–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏)\n"
                    )
                differences_found = True

            if not differences_found:
                if lang == "ukr":
                    comparison_text += "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ö–æ–∂—ñ –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç–∞ –∑–º—ñ—Å—Ç–æ–º\n"
                else:
                    comparison_text += "‚Ä¢ –û—Ç–≤–µ—Ç—ã –ø–æ—Ö–æ–∂–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é\n"

        if lang == "ukr":
            comparison_text += "\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —â–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è!"
        else:
            comparison_text += "\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        back_text = "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "ukr" else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        builder.row(InlineKeyboardButton(text=back_text, callback_data="back_to_main"))

        await message.answer(
            comparison_text, reply_markup=builder.as_markup(), parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è AI: {e}")
        error_text = (
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if lang == "rus"
            else "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        await message.answer(error_text)


@router.message(Command("normal"))
@handle_exceptions
async def cmd_normal_mode(message: types.Message, state: FSMContext, template_manager) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É AI"""

    lang = template_manager.get_user_language(message.from_user.id)

    await state.clear()

    if lang == "ukr":
        text = (
            "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º AI.\n\n"
            "–ö–æ–º–∞–Ω–¥–∏:\n"
            "‚Ä¢ /ai - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π AI —Ä–µ–∂–∏–º\n"
            "‚Ä¢ /enhanced - –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π AI\n"
            "‚Ä¢ /compare - —Ä–µ–∂–∏–º –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"
        )
    else:
        text = (
            "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º AI.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /ai - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI —Ä–µ–∂–∏–º\n"
            "‚Ä¢ /enhanced - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI\n"
            "‚Ä¢ /compare - —Ä–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        )

    await message.answer(text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
async def test_enhancements_function() -> str:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç"""

    test_queries = [
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?",
        "–ú–Ω–µ –Ω—É–∂–Ω—ã —Ñ—É—Ç–±–æ–ª–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã",
        "–ù–µ –∑–Ω–∞—é —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å, –ø–æ–º–æ–≥–∏—Ç–µ",
        "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –ª–∏—Å—Ç–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!",
        "–ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏ –º–µ–Ω—è –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç",
    ]

    report = "üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π AI**\n\n"

    for i, query in enumerate(test_queries, 1):
        report += f"‚ùì **–í–æ–ø—Ä–æ—Å {i}:** {query}\n"

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π AI
            normal_result = await ai_service.process_query(query, 12345, "rus")
            normal_answer = normal_result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")[:100]
            normal_conf = normal_result.get("confidence", 0)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π AI
            enhanced_result = await enhanced_ai_service.process_query(query, 12345, "rus")
            enhanced_answer = enhanced_result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")[:100]
            enhanced_conf = enhanced_result.get("confidence", 0)

            report += f"ü§ñ **–û–±—ã—á–Ω—ã–π:** {normal_answer}...\n"
            report += f"üé≠ **–£–ª—É—á—à–µ–Ω–Ω—ã–π:** {enhanced_answer}...\n"
            report += (
                f"üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** –æ–±—ã—á–Ω—ã–π {normal_conf:.1%} vs —É–ª—É—á—à–µ–Ω–Ω—ã–π {enhanced_conf:.1%}\n"
            )
            report += "‚îÄ" * 50 + "\n\n"

        except Exception as e:
            report += f"‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {e}\n"
            report += "‚îÄ" * 50 + "\n\n"

    report += "‚úÖ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**"
    return report


@router.message(Command("test_enhanced"))
@handle_exceptions
async def cmd_test_enhanced(message: types.Message, template_manager) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await message.answer("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π AI...")

    try:
        report = await test_enhancements_function()

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
        if len(report) > 4000:
            parts = [report[i : i + 4000] for i in range(0, len(report), 4000)]
            for i, part in enumerate(parts, 1):
                await message.answer(
                    f"**–ß–∞—Å—Ç—å {i}/{len(parts)}:**\n\n{part}", parse_mode="Markdown"
                )
        else:
            await message.answer(report, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è template_manager
_template_manager = None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
def setup_enhanced_ai_handlers(dp, template_manager):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É"""
    global _template_manager
    _template_manager = template_manager

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å template_manager
    @dp.message(Command("enhanced"))
    async def cmd_enhanced_mode_wrapper(message, state):
        await cmd_enhanced_mode(message, state, _template_manager)

    @dp.message(Command("compare"))
    async def cmd_compare_mode_wrapper(message, state):
        await cmd_compare_mode(message, state, _template_manager)

    @dp.message(Command("enhanced_stats"))
    async def cmd_enhanced_stats_wrapper(message):
        await cmd_enhanced_stats(message, _template_manager)

    @dp.message(Command("normal"))
    async def cmd_normal_mode_wrapper(message, state):
        await cmd_normal_mode(message, state, _template_manager)

    @dp.message(Command("test_enhanced"))
    async def cmd_test_enhanced_wrapper(message):
        await cmd_test_enhanced(message, _template_manager)

    @dp.message(StateFilter(EnhancedAIStates.enhanced_ai_mode))
    async def handle_enhanced_ai_message_wrapper(message, state):
        await handle_enhanced_ai_message(message, state, _template_manager)

    @dp.message(StateFilter(EnhancedAIStates.comparison_mode))
    async def handle_comparison_message_wrapper(message, state):
        await handle_comparison_message(message, state, _template_manager)

    logger.info("Enhanced AI handlers –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É")
