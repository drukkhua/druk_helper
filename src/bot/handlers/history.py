"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from typing import List, Dict

from src.managers.models import unified_db, ConversationMessage, MessageType
import logging

logger = logging.getLogger(__name__)
router = Router()


class HistoryStates(StatesGroup):
    browsing = State()
    filtering = State()
    searching = State()


@router.message(Command("history"))
async def cmd_history(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""

    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recent_messages = unified_db.get_user_history(user_id, limit=10)

        if not recent_messages:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_text = await _format_history_message(recent_messages, user_id)
        keyboard = _create_history_keyboard()

        await message.answer(history_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.set_state(HistoryStates.browsing)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def _format_history_message(messages: List[ConversationMessage], user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = unified_db.get_user_stats_summary(user_id)

    text = f"üìã **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤**\n\n"
    text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
    text += f"‚Ä¢ –í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['user_messages']}\n"
    text += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['assistant_messages']}\n"
    text += f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å upselling: {stats['upselling_messages']}\n\n"

    text += f"üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º (–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
    grouped_messages = _group_messages_by_pairs(messages)

    for i, group in enumerate(grouped_messages[:5], 1):
        user_msg = group.get("user")
        assistant_msg = group.get("assistant")

        if user_msg:
            date_str = user_msg.timestamp.strftime("%d.%m %H:%M")
            query_preview = _truncate_text(user_msg.content, 50)

            text += f"**{i}. {date_str}**\n"
            text += f"‚ùì _{query_preview}_\n"

            if assistant_msg:
                response_preview = _truncate_text(assistant_msg.content, 60)
                text += f"‚úÖ {response_preview}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if assistant_msg.has_upselling:
                    text += "üí∞ _–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏_\n"
                if assistant_msg.is_auto_response:
                    text += "ü§ñ _–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç_\n"
                if assistant_msg.manager_id:
                    text += f"üë§ _–ú–µ–Ω–µ–¥–∂–µ—Ä ID: {assistant_msg.manager_id}_\n"
            else:
                text += "‚ùå –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"

            text += "\n"

    return text


def _group_messages_by_pairs(messages: List[ConversationMessage]) -> List[Dict]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
    grouped = []
    current_group = {}

    for msg in reversed(messages):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        if msg.message_type == MessageType.USER:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if current_group:
                grouped.append(current_group.copy())
            current_group = {"user": msg}
        elif msg.message_type == MessageType.ASSISTANT and current_group:
            current_group["assistant"] = msg

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    if current_group:
        grouped.append(current_group)

    return list(reversed(grouped))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)


def _truncate_text(text: str, max_length: int) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[: max_length - 3] + "..."


def _create_history_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="history:filters"),
                types.InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫", callback_data="history:search"),
            ],
            [
                types.InlineKeyboardButton(
                    text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="history:detailed_stats"
                ),
                types.InlineKeyboardButton(text="üìÑ –ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π", callback_data="history:more"),
            ],
            [types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="history:clear")],
        ]
    )


@router.callback_query(F.data.startswith("history:"))
async def process_history_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""

    action = callback.data.split(":")[1]
    user_id = callback.from_user.id

    try:
        if action == "filters":
            await show_history_filters(callback, state)
        elif action == "search":
            await start_history_search(callback, state)
        elif action == "detailed_stats":
            await show_detailed_user_stats(callback, user_id)
        elif action == "more":
            await show_more_history(callback, user_id)
        elif action == "clear":
            await confirm_clear_history(callback, state)
        elif action == "back":
            await cmd_history(callback.message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def show_history_filters(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="filter:today"),
                types.InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="filter:week"),
            ],
            [
                types.InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="filter:month"),
                types.InlineKeyboardButton(text="üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="filter:all"),
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùì –¢–æ–ª—å–∫–æ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="filter:user_messages"
                ),
                types.InlineKeyboardButton(
                    text="‚úÖ –¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã", callback_data="filter:assistant_messages"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üí∞ –° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏", callback_data="filter:upselling"
                ),
                types.InlineKeyboardButton(
                    text="ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã", callback_data="filter:auto_responses"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üë§ –û—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="filter:manager_responses"
                ),
                types.InlineKeyboardButton(text="üìÅ –° —Ñ–∞–π–ª–∞–º–∏", callback_data="filter:with_files"),
            ],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="history:back")],
        ]
    )

    await callback.message.edit_text(
        "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@router.callback_query(F.data.startswith("filter:"))
async def apply_history_filter(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫ –∏—Å—Ç–æ—Ä–∏–∏"""

    filter_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        filtered_messages = await _get_filtered_messages(user_id, filter_type)

        if not filtered_messages:
            await callback.answer("üì≠ –ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_filtered_history(callback, filtered_messages, filter_type)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_type}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)


async def _get_filtered_messages(user_id: int, filter_type: str) -> List[ConversationMessage]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    if filter_type == "today":
        return unified_db.get_user_history_by_date(user_id, days=1)
    elif filter_type == "week":
        return unified_db.get_user_history_by_date(user_id, days=7)
    elif filter_type == "month":
        return unified_db.get_user_history_by_date(user_id, days=30)
    elif filter_type == "all":
        return unified_db.get_user_history(user_id, limit=100)
    elif filter_type == "user_messages":
        return unified_db.get_user_history_by_type(user_id, MessageType.USER)
    elif filter_type == "assistant_messages":
        return unified_db.get_user_history_by_type(user_id, MessageType.ASSISTANT)
    elif filter_type == "upselling":
        return unified_db.get_user_history_with_upselling(user_id)
    elif filter_type == "auto_responses":
        return _get_auto_responses(user_id)
    elif filter_type == "manager_responses":
        return _get_manager_responses(user_id)
    elif filter_type == "with_files":
        return _get_messages_with_files(user_id)
    else:
        return []


def _get_auto_responses(user_id: int) -> List[ConversationMessage]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã"""
    with unified_db._get_connection() as conn:
        rows = conn.execute(
            """
            SELECT * FROM conversation_history
            WHERE user_id = ? AND is_auto_response = TRUE
            ORDER BY timestamp DESC
        """,
            (user_id,),
        ).fetchall()

        return [unified_db._row_to_message(row) for row in rows]


def _get_manager_responses(user_id: int) -> List[ConversationMessage]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    with unified_db._get_connection() as conn:
        rows = conn.execute(
            """
            SELECT * FROM conversation_history
            WHERE user_id = ? AND manager_id IS NOT NULL
            ORDER BY timestamp DESC
        """,
            (user_id,),
        ).fetchall()

        return [unified_db._row_to_message(row) for row in rows]


def _get_messages_with_files(user_id: int) -> List[ConversationMessage]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏"""
    with unified_db._get_connection() as conn:
        rows = conn.execute(
            """
            SELECT * FROM conversation_history
            WHERE user_id = ? AND file_info IS NOT NULL
            ORDER BY timestamp DESC
        """,
            (user_id,),
        ).fetchall()

        return [unified_db._row_to_message(row) for row in rows]


async def show_filtered_history(
    callback: types.CallbackQuery, messages: List[ConversationMessage], filter_type: str
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é"""

    filter_names = {
        "today": "–∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        "week": "–∑–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–∑–∞ –º–µ—Å—è—Ü",
        "all": "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è",
        "user_messages": "–≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã",
        "assistant_messages": "–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "upselling": "—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏",
        "auto_responses": "–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã",
        "manager_responses": "–æ—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        "with_files": "—Å —Ñ–∞–π–ª–∞–º–∏",
    }

    filter_name = filter_names.get(filter_type, filter_type)

    text = f"üîç **–§–∏–ª—å—Ç—Ä: {filter_name}**\n"
    text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π
    for i, msg in enumerate(messages[:8], 1):
        date_str = msg.timestamp.strftime("%d.%m %H:%M")
        content_preview = _truncate_text(msg.content, 40)

        msg_type_emoji = {
            MessageType.USER: "‚ùì",
            MessageType.ASSISTANT: "‚úÖ",
            MessageType.SYSTEM: "‚ÑπÔ∏è",
        }

        emoji = msg_type_emoji.get(msg.message_type, "üí¨")
        text += f"{emoji} **{date_str}** - _{content_preview}_\n"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        details = []
        if msg.has_upselling:
            details.append("üí∞")
        if msg.is_auto_response:
            details.append("ü§ñ")
        if msg.manager_id:
            details.append(f"üë§{msg.manager_id}")
        if msg.file_info:
            details.append("üìÅ")

        if details:
            text += f"   {' '.join(details)}\n"

        text += "\n"

    if len(messages) > 8:
        text += f"... –∏ –µ—â–µ {len(messages) - 8} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üîç –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="history:filters"
                ),
                types.InlineKeyboardButton(
                    text="üìÑ –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data=f"show_all:{filter_type}"
                ),
            ],
            [types.InlineKeyboardButton(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history:back")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


async def start_history_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""

    await callback.message.edit_text(
        "üîé **–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
        '–ù–∞–ø—Ä–∏–º–µ—Ä: _"–≤–∏–∑–∏—Ç–∫–∏"_, _"—Ü–µ–Ω–∞"_, _"–º–∞–∫–µ—Ç"_\n\n'
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode="Markdown",
    )

    await state.set_state(HistoryStates.searching)


@router.message(HistoryStates.searching)
async def process_history_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""

    search_text = message.text.strip()
    user_id = message.from_user.id

    if search_text.lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞"]:
        await message.answer("üîç –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
        await state.clear()
        return

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        found_messages = unified_db.search_user_history(user_id, search_text, limit=20)

        if not found_messages:
            await message.answer(
                f'üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "_{search_text}_" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n'
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.",
                parse_mode="Markdown",
            )
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        text = f'üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "_{search_text}_"**\n'
        text += f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"

        for i, msg in enumerate(found_messages[:10], 1):
            date_str = msg.timestamp.strftime("%d.%m %H:%M")

            # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
            highlighted_content = _highlight_search_term(msg.content, search_text)
            content_preview = _truncate_text(highlighted_content, 60)

            msg_type = "‚ùì" if msg.message_type == MessageType.USER else "‚úÖ"
            text += f"{msg_type} **{date_str}**\n{content_preview}\n\n"

        if len(found_messages) > 10:
            text += f"... –∏ –µ—â–µ {len(found_messages) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîé –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="history:search"
                    ),
                    types.InlineKeyboardButton(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history:back"),
                ]
            ]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


def _highlight_search_term(text: str, search_term: str) -> str:
    """–í—ã–¥–µ–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –≤ —Ç–µ–∫—Å—Ç–µ"""
    # –ü—Ä–æ—Å—Ç–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–æ–º
    return text.replace(search_term, f"*{search_term}*")


async def show_detailed_user_stats(callback: types.CallbackQuery, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    try:
        stats = unified_db.get_user_stats_summary(user_id)

        text = f"üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"

        text += f"üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        text += f"‚Ä¢ –í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['user_messages']}\n"
        text += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['assistant_messages']}\n"
        text += f"‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤: {stats['auto_responses']}\n"
        text += f"‚Ä¢ –° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏: {stats['upselling_messages']}\n\n"

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if stats["first_message"]:
            first_date = datetime.fromisoformat(stats["first_message"]).strftime("%d.%m.%Y %H:%M")
            text += f"üìÖ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:**\n"
            text += f"‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {first_date}\n"

            if stats["last_message"]:
                last_date = datetime.fromisoformat(stats["last_message"]).strftime("%d.%m.%Y %H:%M")
                text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_date}\n"

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            first_dt = datetime.fromisoformat(stats["first_message"])
            last_dt = (
                datetime.fromisoformat(stats["last_message"])
                if stats["last_message"]
                else datetime.now()
            )
            period_days = (last_dt - first_dt).days
            text += f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {period_days} –¥–Ω–µ–π\n\n"

        text += f"üéØ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n"
        text += f"‚Ä¢ –õ—é–±–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {stats['top_category']}\n"

        if stats["avg_response_time_ms"] > 0:
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time_ms']} –º—Å\n"

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history:back")]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


async def show_more_history(callback: types.CallbackQuery, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ª–µ–¥—É—é—â–∏–µ 20)
        more_messages = unified_db.get_user_history(user_id, limit=20, offset=10)

        if not more_messages:
            await callback.answer("üì≠ –ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        text = f"üìã **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è** (–∑–∞–ø–∏—Å–∏ 11-30)\n\n"

        grouped_messages = _group_messages_by_pairs(more_messages)

        for i, group in enumerate(grouped_messages, 11):
            user_msg = group.get("user")
            assistant_msg = group.get("assistant")

            if user_msg:
                date_str = user_msg.timestamp.strftime("%d.%m %H:%M")
                query_preview = _truncate_text(user_msg.content, 45)

                text += f"**{i}. {date_str}**\n‚ùì _{query_preview}_\n"

                if assistant_msg:
                    response_preview = _truncate_text(assistant_msg.content, 50)
                    text += f"‚úÖ {response_preview}\n"
                else:
                    text += "‚ùå –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"

                text += "\n"

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô –ö –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history:back"
                    )
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)


async def confirm_clear_history(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚ùå –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="history:clear_confirmed"
                ),
                types.InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ–Ω–∞", callback_data="history:back"),
            ]
        ]
    )

    await callback.message.edit_text(
        "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏**\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "üîí –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@router.callback_query(F.data == "history:clear_confirmed")
async def clear_user_history(callback: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = callback.from_user.id

    try:
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with unified_db._get_connection() as conn:
            deleted_count = conn.execute(
                """
                DELETE FROM conversation_history WHERE user_id = ?
            """,
                (user_id,),
            ).rowcount

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            conn.execute("DELETE FROM user_stats WHERE user_id = ?", (user_id,))
            conn.commit()

        await callback.message.edit_text(
            f"‚úÖ **–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞**\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.\n"
            f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ."
        )

        logger.info(f"–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {deleted_count} –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
