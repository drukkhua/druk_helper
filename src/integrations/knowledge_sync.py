"""
–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å Google Sheets
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Google Sheets updater —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ ChromaDB
"""

import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Google Sheets updater
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from google_sheets_updater import sheets_updater

from src.ai.knowledge_base import knowledge_base
from src.analytics.analytics_service import analytics_service

logger = logging.getLogger(__name__)


class KnowledgeSyncService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å Google Sheets"""

    def __init__(self):
        self.sheets_updater = sheets_updater
        self.knowledge_base = knowledge_base
        self.analytics = analytics_service

        # URL –Ω–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env)
        self.default_spreadsheet_url = "https://docs.google.com/spreadsheets/d/1RagVK40gWitjfQE-_wBD8HnSaeDGGMZJ2uWfICLRqFQ/edit?usp=sharing"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.last_sync_time: Optional[datetime] = None
        self.last_sync_success: bool = False
        self.last_sync_changes: int = 0

        logger.info("Knowledge Sync Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def full_sync_knowledge_base(
        self, spreadsheet_url: Optional[str] = None, force_reload: bool = False
    ) -> Dict:
        """
        –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π

        Args:
            spreadsheet_url: URL Google –¢–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            force_reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å ChromaDB

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        start_time = time.time()
        result = {
            "success": False,
            "changes": 0,
            "errors": [],
            "duration_ms": 0,
            "csv_files_updated": 0,
            "chromadb_updated": False,
            "analytics_recorded": False,
        }

        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")

            # 1. –û–±–Ω–æ–≤–ª—è–µ–º CSV —Ñ–∞–π–ª—ã –∏–∑ Google Sheets
            csv_update_result = await self._update_csv_files(spreadsheet_url)
            result["csv_files_updated"] = csv_update_result["files_updated"]

            if not csv_update_result["success"]:
                result["errors"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å CSV —Ñ–∞–π–ª—ã")
                return result

            # 2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º ChromaDB –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            if csv_update_result["files_updated"] > 0 or force_reload:
                chromadb_result = await self._reload_chromadb()
                result["chromadb_updated"] = chromadb_result["success"]

                if not chromadb_result["success"]:
                    result["errors"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ChromaDB")
                    return result
            else:
                logger.info("üìã ChromaDB –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                result["chromadb_updated"] = True

            # 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics_result = self._record_sync_analytics(result)
            result["analytics_recorded"] = analytics_result

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.last_sync_time = datetime.now()
            self.last_sync_success = True
            self.last_sync_changes = result["csv_files_updated"]

            result["success"] = True
            result["changes"] = csv_update_result["files_updated"]

            duration_ms = int((time.time() - start_time) * 1000)
            result["duration_ms"] = duration_ms

            logger.info(
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration_ms}ms. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['changes']}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            result["errors"].append(str(e))
            self.last_sync_success = False

        return result

    async def _update_csv_files(self, spreadsheet_url: Optional[str] = None) -> Dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç CSV —Ñ–∞–π–ª—ã –∏–∑ Google Sheets"""
        result = {"success": False, "files_updated": 0}

        try:
            url = spreadsheet_url or self.default_spreadsheet_url
            logger.info(f"üìä –û–±–Ω–æ–≤–ª—è–µ–º CSV —Ñ–∞–π–ª—ã –∏–∑ Google Sheets: {url[:50]}...")

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
            original_mtimes = self._get_csv_file_mtimes()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            success = await self.sheets_updater.update_templates_from_google_sheets(url)

            if success:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
                new_mtimes = self._get_csv_file_mtimes()
                files_updated = sum(
                    1
                    for filename, mtime in new_mtimes.items()
                    if filename not in original_mtimes or original_mtimes[filename] != mtime
                )

                result["success"] = True
                result["files_updated"] = files_updated
                logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: {files_updated}")
            else:
                logger.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ—É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–æ–≤: {e}")

        return result

    async def _reload_chromadb(self) -> Dict:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç ChromaDB —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        result = {"success": False, "documents_loaded": 0}

        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º ChromaDB...")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            success = await asyncio.to_thread(
                self.knowledge_base.populate_vector_store, force_reload=True
            )

            if success:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.knowledge_base.get_statistics()
                result["success"] = True
                result["documents_loaded"] = stats.get("total_documents", 0)
                logger.info(f"üîÑ ChromaDB –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞: {result['documents_loaded']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å ChromaDB")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ ChromaDB: {e}")

        return result

    def _get_csv_file_mtimes(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSV —Ñ–∞–π–ª–æ–≤"""
        mtimes = {}
        data_dir = "./data"

        for file_path in self.sheets_updater.csv_paths.values():
            filename = os.path.basename(file_path)
            try:
                if os.path.exists(file_path):
                    mtimes[filename] = os.path.getmtime(file_path)
            except OSError:
                pass

        return mtimes

    def _record_sync_analytics(self, sync_result: Dict) -> bool:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        try:
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if sync_result["success"] and sync_result["changes"] > 0:
                logger.info(f"üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ({sync_result['changes']} —Ñ–∞–π–ª–æ–≤)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def check_sync_needed(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

        Returns:
            (–Ω—É–∂–Ω–∞_—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–∏—á–∏–Ω–∞)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            summary = self.analytics.get_analytics_summary(days=1)

            if summary["period_stats"]["total_queries"] > 0:
                answer_rate = summary["period_stats"]["answer_rate"]

                # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∏–∑–∫–∏–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                if answer_rate < 70:
                    return True, f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {answer_rate:.1f}%"

                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                if len(summary["top_unanswered"]) >= 5:
                    return (
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(summary['top_unanswered'])} —Ç–∏–ø–æ–≤ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                    )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if self.last_sync_time:
                hours_since_sync = (datetime.now() - self.last_sync_time).total_seconds() / 3600
                if hours_since_sync > 24:
                    return True, f"–ü—Ä–æ—à–ª–æ {hours_since_sync:.1f} —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            else:
                return True, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å"

            return False, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"

    def get_sync_status(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            "last_sync_time": self.last_sync_time.isoformat() if self.last_sync_time else None,
            "last_sync_success": self.last_sync_success,
            "last_sync_changes": self.last_sync_changes,
            "spreadsheet_url": self.default_spreadsheet_url,
            "available_sheets": list(self.sheets_updater.csv_paths.keys()),
        }

    async def smart_sync(self) -> Dict:
        """
        –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            sync_needed, reason = await self.check_sync_needed()

            if sync_needed:
                logger.info(f"ü§ñ –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {reason}")
                return await self.full_sync_knowledge_base()
            else:
                logger.info(f"‚úÖ –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {reason}")
                return {
                    "success": True,
                    "changes": 0,
                    "skipped": True,
                    "reason": reason,
                    "duration_ms": 0,
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e), "changes": 0, "duration_ms": 0}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
knowledge_sync_service = KnowledgeSyncService()
