"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-dashboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ AI –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ç–æ–ø –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List

try:
    from flask import Flask, render_template_string, jsonify, request

    FLASK_AVAILABLE = True
except ImportError:
    FLASK_AVAILABLE = False

from .analytics_service import analytics_service

logger = logging.getLogger(__name__)


# HTML —à–∞–±–ª–æ–Ω –¥–ª—è dashboard
DASHBOARD_HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>AI Bot Analytics Dashboard</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .card { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
        .stat-item { text-align: center; padding: 15px; background: #e3f2fd; border-radius: 8px; }
        .stat-value { font-size: 2em; font-weight: bold; color: #1976d2; }
        .stat-label { color: #666; margin-top: 5px; }
        .query-list { max-height: 300px; overflow-y: auto; }
        .query-item { padding: 10px; border-bottom: 1px solid #eee; }
        .priority-high { border-left: 4px solid #f44336; }
        .priority-medium { border-left: 4px solid #ff9800; }
        .priority-low { border-left: 4px solid #4caf50; }
        .refresh-btn { background: #1976d2; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
        .refresh-btn:hover { background: #1565c0; }
        h1, h2 { color: #333; }
        .timestamp { color: #999; font-size: 0.9em; }
    </style>
    <script>
        function refreshData() {
            fetch('/api/analytics')
                .then(response => response.json())
                .then(data => {
                    updateStats(data);
                })
                .catch(error => console.error('Error:', error));
        }

        function updateStats(data) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (data.period_stats) {
                document.getElementById('total-queries').textContent = data.period_stats.total_queries;
                document.getElementById('answer-rate').textContent = data.period_stats.answer_rate.toFixed(1) + '%';
                document.getElementById('avg-confidence').textContent = data.period_stats.avg_confidence.toFixed(3);
                document.getElementById('response-time').textContent = data.period_stats.avg_response_time_ms.toFixed(0) + 'ms';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
            document.getElementById('last-updated').textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–æ: ' + new Date().toLocaleString();
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(refreshData, 30000);
    </script>
</head>
<body>
    <div class="container">
        <h1>ü§ñ AI Bot Analytics Dashboard</h1>
        <p class="timestamp" id="last-updated">–û–±–Ω–æ–≤–ª–µ–Ω–æ: {{ timestamp }}</p>

        <button class="refresh-btn" onclick="refreshData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>

        <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="card">
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {{ data.period_days }} –¥–Ω–µ–π</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="total-queries">{{ data.period_stats.total_queries }}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="answer-rate">{{ "%.1f"|format(data.period_stats.answer_rate) }}%</div>
                    <div class="stat-label">–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="avg-confidence">{{ "%.3f"|format(data.period_stats.avg_confidence) }}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="response-time">{{ "%.0f"|format(data.period_stats.avg_response_time_ms) }}ms</div>
                    <div class="stat-label">–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
                </div>
            </div>
        </div>

        <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="card">
            <h2>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value">{{ data.overall_stats.total_queries }}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ data.overall_stats.knowledge_gaps }}</div>
                    <div class="stat-label">–ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ "%.1f"|format(data.overall_stats.answer_rate) }}%</div>
                    <div class="stat-label">–û–±—â–∏–π % –æ—Ç–≤–µ—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ "%.3f"|format(data.overall_stats.avg_confidence) }}</div>
                    <div class="stat-label">–û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                </div>
            </div>
        </div>

        <!-- –¢–æ–ø –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ -->
        <div class="card">
            <h2>‚ùì –¢–æ–ø –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</h2>
            <div class="query-list">
                {% for query in data.top_unanswered %}
                <div class="query-item">
                    <strong>{{ query.query }}</strong>
                    <span style="float: right; color: #f44336;">{{ query.frequency }} —Ä–∞–∑</span>
                </div>
                {% endfor %}
                {% if not data.top_unanswered %}
                <div class="query-item">‚úÖ –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                {% endif %}
            </div>
        </div>

        <!-- –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö -->
        <div class="card">
            <h2>üîç –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö</h2>
            <div class="query-list">
                {% for gap in data.knowledge_gaps %}
                <div class="query-item priority-{{ gap.priority }}">
                    <strong>{{ gap.pattern }}</strong> ({{ gap.category }})
                    <span style="float: right;">{{ gap.frequency }} —Ä–∞–∑</span>
                    <div style="font-size: 0.9em; color: #666;">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {{ gap.priority }}</div>
                </div>
                {% endfor %}
                {% if not data.knowledge_gaps %}
                <div class="query-item">‚úÖ –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                {% endif %}
            </div>
        </div>

        <!-- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º -->
        <div class="card">
            <h2>üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤</h2>
            {% for source in data.source_distribution %}
            <div class="query-item">
                <strong>{{ source.source or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }}</strong>
                <span style="float: right;">{{ source.count }} –∑–∞–ø—Ä–æ—Å–æ–≤</span>
            </div>
            {% endfor %}
        </div>
    </div>
</body>
</html>
"""


class AnalyticsDashboard:
    """–í–µ–±-dashboard –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    def __init__(self, host: str = "127.0.0.1", port: int = 8080):
        self.host = host
        self.port = port
        self.app = None

        if not FLASK_AVAILABLE:
            logger.warning("Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        self.app = Flask(__name__)
        self._setup_routes()
        logger.info(f"Analytics Dashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ {host}:{port}")

    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""

        @self.app.route("/")
        def dashboard():
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ dashboard"""
            try:
                data = analytics_service.get_analytics_summary(days=7)
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                return render_template_string(DASHBOARD_HTML, data=data, timestamp=timestamp)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dashboard: {e}")
                return f"–û—à–∏–±–∫–∞: {e}", 500

        @self.app.route("/api/analytics")
        def api_analytics():
            """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
            try:
                days = request.args.get("days", 7, type=int)
                data = analytics_service.get_analytics_summary(days=days)
                return jsonify(data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
                return jsonify({"error": str(e)}), 500

        @self.app.route("/api/suggestions")
        def api_suggestions():
            """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
            try:
                suggestions = analytics_service.get_improvement_suggestions()
                return jsonify(suggestions)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
                return jsonify({"error": str(e)}), 500

    def run(self, debug: bool = False):
        """–ó–∞–ø—É—Å–∫ dashboard —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.app:
            logger.error("Flask –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å dashboard")
            return

        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ Analytics Dashboard –Ω–∞ http://{self.host}:{self.port}")
            self.app.run(host=self.host, port=self.port, debug=debug, threaded=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ dashboard: {e}")


def create_simple_report() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –≤–µ–±-dashboard)"""
    try:
        data = analytics_service.get_analytics_summary(days=7)
        suggestions = analytics_service.get_improvement_suggestions()

        report = f"""
üìä –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–¢–ò–ö–ï AI –ë–û–¢–ê
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {data['overall_stats']['total_queries']}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {data['overall_stats']['answer_rate']:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['overall_stats']['avg_confidence']:.3f}
‚Ä¢ –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö: {data['overall_stats']['knowledge_gaps']}

üìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 7 –î–ù–ï–ô:
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {data['period_stats']['total_queries']}
‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {data['period_stats']['answered_queries']}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {data['period_stats']['answer_rate']:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data['period_stats']['avg_response_time_ms']:.0f}ms

‚ùì –¢–û–ü –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í:
"""

        for i, query in enumerate(data["top_unanswered"][:5], 1):
            report += f"{i}. {query['query']} ({query['frequency']} —Ä–∞–∑)\n"

        if not data["top_unanswered"]:
            report += "‚úÖ –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"

        report += "\nüîç –ü–†–û–ë–ï–õ–´ –í –ó–ù–ê–ù–ò–Ø–•:\n"
        for i, gap in enumerate(data["knowledge_gaps"][:5], 1):
            report += f"{i}. {gap['pattern']} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {gap['category']}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {gap['priority']}) - {gap['frequency']} —Ä–∞–∑\n"

        if not data["knowledge_gaps"]:
            report += "‚úÖ –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

        report += "\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:\n"
        for i, suggestion in enumerate(suggestions[:3], 1):
            report += f"{i}. [{suggestion['priority'].upper()}] {suggestion['description']}\n"

        if not suggestions:
            report += "‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç\n"

        return report

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä dashboard
dashboard = AnalyticsDashboard() if FLASK_AVAILABLE else None


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if dashboard:
        dashboard.run(debug=False)
    else:
        print("Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
        print(create_simple_report())
