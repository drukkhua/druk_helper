"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from typing import Dict, Optional
import logging
import asyncio
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
from src.managers.integration import (
    setup_manager_system,
    get_manager_router,
    process_client_message,
    save_conversation_message,
    is_manager_available,
    health_check,
)
from src.managers.models import unified_db
from config import Config

logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –±–æ—Ç–∞
main_router = Router()


async def initialize_bot_with_managers(bot: Bot, dp: Dispatcher):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if not await setup_manager_system(bot):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
            return False

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        manager_router = get_manager_router()
        dp.include_router(manager_router)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
        dp.include_router(main_router)

        logger.info("–ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


@main_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É start –≤ –∏—Å—Ç–æ—Ä–∏—é
        await save_conversation_message(
            user_id=message.from_user.id,
            message_type="user",
            content="/start",
            metadata={"command": True},
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        managers_available = is_manager_available()

        welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–Ø—Ä–∫–∞—è –ø–µ—á–∞—Ç—å"!

üé® –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–µ–π:
‚Ä¢ –í–∏–∑–∏—Ç–∫–∏, –ª–∏—Å—Ç–æ–≤–∫–∏, –Ω–∞–∫–ª–µ–π–∫–∏
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è

{'üü¢ –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω!' if managers_available else 'üî¥ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–µ–π—á–∞—Å –æ—Ñ–ª–∞–π–Ω, –Ω–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!'}

üí¨ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π –º–∞–∫–µ—Ç!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /history - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
‚Ä¢ /help - –ø–æ–º–æ—â—å"""

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="show_prices"),
                    types.InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts"),
                ],
                [
                    types.InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
                    types.InlineKeyboardButton(
                        text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_faq"
                    ),
                ],
            ]
        )

        await message.answer(welcome_text, reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        await save_conversation_message(
            user_id=message.from_user.id,
            message_type="assistant",
            content=welcome_text,
            metadata={
                "command_response": True,
                "managers_available": managers_available,
                "response_type": "welcome",
            },
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç)
        user_history = unified_db.get_user_history(message.from_user.id, limit=2)
        if len(user_history) <= 2:  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await process_client_message(
                message=message,
                response_text=welcome_text,
                metadata={"new_user": True, "urgency": "low", "category": "welcome"},
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@main_router.message(F.text & ~F.text.startswith("/"))
async def handle_text_messages(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    - AI-–æ—Ç–≤–µ—Ç—ã
    - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
    """

    try:
        user_id = message.from_user.id
        query_text = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_conversation_message(
            user_id=user_id,
            message_type="user",
            content=query_text,
            metadata={"timestamp": datetime.now().isoformat()},
        )

        # --- –ó–î–ï–°–¨ –í–°–¢–ê–í–õ–Ø–ï–¢–°–Ø –í–ê–®–ê –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ---
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # 1. –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        # 2. AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞

        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
        response_text, metadata = await generate_response(query_text, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response_text)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        await process_client_message(
            message=message, response_text=response_text, metadata=metadata
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@main_router.message(F.document)
async def handle_document_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–º–∞–∫–µ—Ç–æ–≤)"""

    try:
        user_id = message.from_user.id
        document = message.document

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        file_analysis = analyze_uploaded_file(document)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ —Ñ–∞–π–ª–µ
        file_response = generate_file_response(file_analysis)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(file_response)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤)
        await process_client_message(
            message=message,
            response_text=file_response,
            metadata={
                "file_analysis": file_analysis,
                "urgency": "high",
                "category": "files",
                "requires_manager_attention": True,
            },
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


@main_router.message(F.photo)
async def handle_photo_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""

    try:
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ
        photo_response = """üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!

‚ö†Ô∏è –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏ –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (AI, EPS, PDF) –∏–ª–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–∞—Å—Ç—Ä–æ–≤–æ–º (PSD, TIFF).

üîç –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –æ—Ü–µ–Ω—è—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π."""

        await message.answer(photo_response)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        await process_client_message(
            message=message,
            response_text=photo_response,
            metadata={"media_type": "photo", "urgency": "normal", "category": "media"},
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
@main_router.callback_query(F.data == "show_prices")
async def show_prices(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"""

    prices_text = """üí∞ **–ù–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç**

üìá **–í–∏–∑–∏—Ç–∫–∏:**
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (300 –≥—Ä/–º¬≤): –æ—Ç 0.50 –≥—Ä–Ω/—à—Ç
‚Ä¢ –ü—Ä–µ–º–∏—É–º (350 –≥—Ä/–º¬≤): –æ—Ç 0.80 –≥—Ä–Ω/—à—Ç
‚Ä¢ –° –ª–∞–º–∏–Ω–∞—Ü–∏–µ–π: –æ—Ç 1.20 –≥—Ä–Ω/—à—Ç

üìÑ **–õ–∏—Å—Ç–æ–≤–∫–∏:**
‚Ä¢ –ê6 (105√ó148 –º–º): –æ—Ç 0.80 –≥—Ä–Ω/—à—Ç
‚Ä¢ –ê5 (148√ó210 –º–º): –æ—Ç 1.20 –≥—Ä–Ω/—à—Ç
‚Ä¢ –ê4 (210√ó297 –º–º): –æ—Ç 2.00 –≥—Ä–Ω/—à—Ç

üè∑Ô∏è **–ù–∞–∫–ª–µ–π–∫–∏:**
‚Ä¢ –ö—Ä—É–≥–ª—ã–µ (–æ—Ç 2 —Å–º): –æ—Ç 0.30 –≥—Ä–Ω/—à—Ç
‚Ä¢ –§–∏–≥—É—Ä–Ω—ã–µ: –æ—Ç 0.50 –≥—Ä–Ω/—à—Ç
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ: –æ—Ç 0.80 –≥—Ä–Ω/—à—Ç

‚è∞ **–°—Ä–æ–∫–∏:** 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
üìû **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:** –æ—Ç 100 —à—Ç

üí° –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞—é—Ç –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã!"""

    await callback.message.edit_text(
        prices_text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        ),
        parse_mode="Markdown",
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω
    await save_conversation_message(
        user_id=callback.from_user.id,
        message_type="assistant",
        content=prices_text,
        metadata={"action": "price_list_viewed"},
    )


@main_router.callback_query(F.data == "show_contacts")
async def show_contacts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã"""

    contacts_text = """üìû **–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã**

üè¢ **–ê–¥—Ä–µ—Å:** –≥. –ö–∏–µ–≤, —É–ª. –ü–µ—á–∞—Ç–Ω–∞—è, 123

üì± **–¢–µ–ª–µ—Ñ–æ–Ω—ã:**
‚Ä¢ +38 (044) 123-45-67
‚Ä¢ +38 (050) 123-45-67

üïê **–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:**
‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 18:00
‚Ä¢ –°–±: 10:00 - 16:00
‚Ä¢ –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π

üåê **–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:**
‚Ä¢ –°–∞–π—Ç: print-company.ua
‚Ä¢ Email: info@print-company.ua
‚Ä¢ Instagram: @print_company_ua

üöó **–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è:**
‚Ä¢ –ú–µ—Ç—Ä–æ "–ü–µ—á–∞—Ç–Ω–∏–∫–∏" (5 –º–∏–Ω –ø–µ—à–∫–æ–º)
‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è" (–∞–≤—Ç–æ–±—É—Å 15, 27)"""

    await callback.message.edit_text(
        contacts_text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        ),
        parse_mode="Markdown",
    )


@main_router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""

    await cmd_start(callback.message, None)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_response(query_text: str, user_id: int) -> tuple:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        tuple: (response_text, metadata)
    """

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    query_lower = query_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if any(word in query_lower for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ"]):
        response = """üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:**
‚Ä¢ –¢–∏—Ä–∞–∂–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –±—É–º–∞–≥–∏
‚Ä¢ –†–∞–∑–º–µ—Ä–∞ –∏–∑–¥–µ–ª–∏—è
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–∞–∫–µ—Ç–∞

üìã –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ:
‚Ä¢ –†–∞–∑–º–µ—Ä—ã –∏–∑–¥–µ–ª–∏—è
‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Ç–∏—Ä–∞–∂
‚Ä¢ –ú–∞–∫–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)

üéØ –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞—é—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"""

        metadata = {
            "category": "pricing",
            "confidence": 0.9,
            "has_upselling": False,
            "urgency": "normal",
        }

    elif any(word in query_lower for word in ["—Å—Ä–æ–∫", "–∫–æ–≥–¥–∞", "–±—ã—Å—Ç—Ä–æ"]):
        response = """‚è∞ **–°—Ä–æ–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**

üî• **–°—Ä–æ—á–Ω–æ (24 —á–∞—Å–∞):** +50% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
‚ö° **–ë—ã—Å—Ç—Ä–æ (1-2 –¥–Ω—è):** —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞
üìÖ **–û–±—ã—á–Ω–æ (3-5 –¥–Ω–µ–π):** —Å–∫–∏–¥–∫–∞ 10%

üìã **–°—Ä–æ–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç:**
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–∞–∫–µ—Ç–∞
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏–π
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

üí° –¢–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –Ω–∞–∑–æ–≤—É—Ç –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–∞!"""

        metadata = {
            "category": "timing",
            "confidence": 0.85,
            "has_upselling": True,
            "urgency": "normal",
        }

    else:
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        response = """üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!

üé® –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å:
‚Ä¢ –î–∏–∑–∞–π–Ω–æ–º –∏ –≤–µ—Ä—Å—Ç–∫–æ–π –º–∞–∫–µ—Ç–æ–≤
‚Ä¢ –í—ã–±–æ—Ä–æ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –†–∞—Å—á–µ—Ç–æ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∏—Ä–∞–∂–∞
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–º –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º

üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö, –∏ –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤—è—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!"""

        metadata = {
            "category": "general",
            "confidence": 0.7,
            "has_upselling": False,
            "urgency": "normal",
        }

    return response, metadata


def analyze_uploaded_file(document: types.Document) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""

    file_name = document.file_name or "unknown"
    file_size = document.file_size or 0
    file_ext = file_name.split(".")[-1].lower() if "." in file_name else ""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    vector_formats = ["ai", "eps", "pdf", "svg"]
    raster_formats = ["psd", "tiff", "tif", "png", "jpg", "jpeg"]

    if file_ext in vector_formats:
        file_type = "vector"
        quality = "excellent"
    elif file_ext in raster_formats:
        file_type = "raster"
        quality = "good" if file_size > 5 * 1024 * 1024 else "medium"
    else:
        file_type = "unknown"
        quality = "needs_check"

    return {
        "file_name": file_name,
        "file_size": file_size,
        "file_size_mb": round(file_size / (1024 * 1024), 2),
        "file_extension": file_ext,
        "file_type": file_type,
        "quality_assessment": quality,
        "suitable_for_print": file_type in ["vector", "raster"],
    }


def generate_file_response(file_analysis: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"""

    if not file_analysis["suitable_for_print"]:
        return f"""‚ùå –§–æ—Ä–º–∞—Ç {file_analysis['file_extension'].upper()} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏.

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ: AI, EPS, PDF, SVG
‚Ä¢ –†–∞—Å—Ç—Ä–æ–≤—ã–µ: PSD, TIFF, PNG, JPG

üí° –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π!"""

    quality_emoji = {"excellent": "üåü", "good": "‚úÖ", "medium": "‚ö†Ô∏è", "needs_check": "üîç"}

    emoji = quality_emoji.get(file_analysis["quality_assessment"], "‚ùì")

    return f"""‚úÖ –§–∞–π–ª "{file_analysis['file_name']}" –ø–æ–ª—É—á–µ–Ω!

üìã –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:
‚Ä¢ –§–æ—Ä–º–∞—Ç: {file_analysis['file_extension'].upper()}
‚Ä¢ –†–∞–∑–º–µ—Ä: {file_analysis['file_size_mb']} –ú–ë
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—á–∞—Ç–∏: {emoji} {file_analysis['quality_assessment']}

üîç –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –º–∞–∫–µ—Ç –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!

üí° –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!"""


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
@main_router.message(Command("system_health"))
async def cmd_system_health(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    if message.from_user.id not in getattr(Config, "ADMIN_USER_IDS", []):
        return

    try:
        health_status = await health_check()

        status_text = f"""üè• **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**

üîã **–°—Ç–∞—Ç—É—Å:** {health_status.get('status', 'unknown')}
üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {'‚úÖ' if health_status.get('database_connected') else '‚ùå'}
ü§ñ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'‚úÖ' if health_status.get('notification_system') else '‚ùå'}

üë• **–ú–µ–Ω–µ–¥–∂–µ—Ä—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {health_status.get('total_managers', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {health_status.get('active_managers', 0)}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {health_status.get('available_managers', 0)}

üí¨ **–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:** {health_status.get('active_chats', 0)}"""

        await message.answer(status_text, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
