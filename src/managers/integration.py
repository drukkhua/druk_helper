"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from typing import Dict, Optional, List
import logging
import asyncio

from src.managers.models import unified_db, ConversationMessage, MessageType
from src.managers.notification_system import ManagerNotificationSystem
from src.managers.admin_panel import router as admin_router
from src.bot.handlers.history import router as history_router
from config import Config

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
manager_router = Router()

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã
manager_router.include_router(admin_router)
manager_router.include_router(history_router)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system: Optional[ManagerNotificationSystem] = None


def initialize_manager_system(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    global notification_system

    try:
        notification_system = ManagerNotificationSystem(bot)
        logger.info("–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        return False


async def process_client_message(
    message: types.Message, response_text: str, metadata: Optional[Dict] = None
) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        response_text: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    if not notification_system:
        logger.warning("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        urgency = _determine_message_urgency(message, metadata or {})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await notification_system.save_assistant_response(
            user_id=message.from_user.id, response_text=response_text, metadata=metadata
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.document:
            # –§–∞–π–ª - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π
            file_analysis = metadata.get("file_analysis", {}) if metadata else {}
            notified_managers = await notification_system.notify_file_upload(message, file_analysis)
        elif urgency == "high":
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            reason = (
                metadata.get("priority_reason", "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å") if metadata else "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            )
            notified_managers = await notification_system.notify_high_priority(message, reason)
        else:
            # –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notified_managers = await notification_system.notify_new_client(message, urgency)

        logger.info(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ {len(notified_managers)} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {message.from_user.id}"
        )
        return len(notified_managers) > 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


def _determine_message_urgency(message: types.Message, metadata: Dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""

    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤
    if message.document or message.photo:
        return "high"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if metadata.get("confidence", 0) < 0.7:
        return "high"  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    if message.text:
        urgent_keywords = ["—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–æ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–∂–¥—É", "–≤–∞–∂–Ω–æ", "–∫—Ä–∏—Ç–∏—á–Ω–æ"]
        text_lower = message.text.lower()

        if any(keyword in text_lower for keyword in urgent_keywords):
            return "high"

        # –í–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–µ –∏ —Å—Ä–æ–∫–∞—Ö - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        price_keywords = ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ", "–ø—Ä–∞–π—Å", "—Ä–∞—Å—Ü–µ–Ω–∫–∏"]
        if any(keyword in text_lower for keyword in price_keywords):
            return "normal"

    return "normal"


@manager_router.callback_query(F.data.startswith("manager:"))
async def handle_manager_callbacks(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    if not notification_system:
        await callback.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞", show_alert=True)
        return

    try:
        await notification_system.handle_manager_callback(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def get_manager_statistics() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    try:
        stats = unified_db.get_database_stats()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_managers = unified_db._get_all_managers()
        active_managers = unified_db.get_active_managers()
        available_now = unified_db.get_available_managers_now()

        return {
            "total_managers": len(all_managers),
            "active_managers": len(active_managers),
            "available_now": len(available_now),
            "active_chats": stats["active_chats"],
            "total_messages": stats["total_messages"],
            "unique_users": stats["unique_users"],
            "database_path": stats["database_path"],
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        return {}


# –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@manager_router.message(Command("system_stats"))
async def cmd_system_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    if message.from_user.id not in getattr(Config, "ADMIN_USER_IDS", []):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
        return

    try:
        stats = await get_manager_statistics()

        if not stats:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        stats_text = f"""üìä **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• **–ú–µ–Ω–µ–¥–∂–µ—Ä—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_managers']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_managers']}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–π—á–∞—Å: {stats['available_now']}

üí¨ **–î–∏–∞–ª–æ–≥–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']:,}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']:,}

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ü—É—Ç—å: `{stats['database_path']}`

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {message.date.strftime('%d.%m.%Y %H:%M')}"""

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def notify_managers_about_client(
    client_message: types.Message, context: Optional[Dict] = None
) -> List[int]:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    Args:
        client_message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        List[int]: –°–ø–∏—Å–æ–∫ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    """
    if not notification_system:
        return []

    try:
        urgency = "normal"
        if context:
            urgency = context.get("urgency", "normal")

        return await notification_system.notify_new_client(client_message, urgency)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        return []


async def save_conversation_message(
    user_id: int, message_type: str, content: str, metadata: Optional[Dict] = None
) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('user', 'assistant', 'system')
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

    Returns:
        int: ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        conv_message = ConversationMessage(
            user_id=user_id,
            message_type=MessageType(message_type),
            content=content,
            category=metadata.get("category") if metadata else None,
            has_upselling=metadata.get("has_upselling", False) if metadata else False,
            search_type=metadata.get("search_type") if metadata else None,
            relevance_score=metadata.get("relevance_score") if metadata else None,
            response_time_ms=metadata.get("response_time_ms") if metadata else None,
            manager_id=metadata.get("manager_id") if metadata else None,
            is_auto_response=metadata.get("is_auto_response", False) if metadata else False,
            file_info=metadata.get("file_info") if metadata else None,
        )

        return unified_db.save_message(conv_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
        return 0


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
def is_manager_available() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã"""
    try:
        available_managers = unified_db.get_available_managers_now()
        return len(available_managers) > 0
    except:
        return False


def get_available_managers_count() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        available_managers = unified_db.get_available_managers_now()
        return len(available_managers)
    except:
        return 0


# Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class ManagerIntegrationMiddleware:
    """Middleware –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    def __init__(self):
        self.enabled = True

    async def __call__(self, handler, event: types.Message, data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        if not self.enabled or not isinstance(event, types.Message):
            return await handler(event, data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event.from_user and event.text:
            try:
                await save_conversation_message(
                    user_id=event.from_user.id,
                    message_type="user",
                    content=event.text,
                    metadata={
                        "message_id": event.message_id,
                        "chat_type": event.chat.type,
                        "has_entities": bool(event.entities),
                    },
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)


# –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
def get_manager_router() -> Router:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É"""
    return manager_router


# –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def setup_manager_system(bot: Bot) -> bool:
    """
    –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not initialize_manager_system(bot):
            return False

        logger.info("–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        return False


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def health_check() -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_stats = unified_db.get_database_stats()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        active_managers = unified_db.get_active_managers()
        available_now = unified_db.get_available_managers_now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_ready = notification_system is not None

        return {
            "status": "healthy",
            "database_connected": bool(db_stats),
            "total_managers": db_stats.get("managers_total", 0),
            "active_managers": len(active_managers),
            "available_managers": len(available_now),
            "notification_system": notification_ready,
            "active_chats": db_stats.get("active_chats", 0),
            "timestamp": message.date.isoformat() if "message" in locals() else None,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
        return {"status": "error", "error": str(e)}
