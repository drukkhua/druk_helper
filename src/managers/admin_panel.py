"""
–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, time
from typing import List, Dict, Optional
import logging

from src.managers.models import unified_db, Manager, ManagerStatus
from config import Config

logger = logging.getLogger(__name__)
router = Router()


class AdminStates(StatesGroup):
    waiting_manager_name = State()
    waiting_manager_username = State()
    waiting_work_hours = State()
    editing_manager = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in getattr(Config, "ADMIN_USER_IDS", [])


@router.message(Command("admin_managers"))
async def cmd_admin_managers(message: types.Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        active_managers = unified_db.get_active_managers()
        all_managers_count = len(unified_db.get_active_managers()) + len(
            [m for m in unified_db._get_all_managers() if m.status == ManagerStatus.OFFLINE]
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_stats = unified_db.get_database_stats()

        admin_text = f"""üéõÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {all_managers_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {len(active_managers)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {db_stats['active_chats']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {db_stats['total_messages']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats['unique_users']}

üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:**"""

        for manager in active_managers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
            status_emoji = {
                ManagerStatus.ACTIVE: "üü¢",
                ManagerStatus.BUSY: "üü°",
                ManagerStatus.OFFLINE: "üî¥",
                ManagerStatus.VACATION: "üèñÔ∏è",
            }

            emoji = status_emoji.get(manager.status, "‚ùì")
            admin_text += f"\n{emoji} {manager.name} ({manager.active_chats} —á–∞—Ç–æ–≤)"

        if len(active_managers) > 5:
            admin_text += f"\n... –∏ –µ—â–µ {len(active_managers) - 5} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"

        keyboard = create_admin_main_keyboard()
        await message.answer(admin_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


def create_admin_main_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∫–∏"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üë• –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="admin:managers_list"
                ),
                types.InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="admin:add_manager"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:detailed_stats"
                ),
                types.InlineKeyboardButton(
                    text="üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏", callback_data="admin:manage_statuses"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin:system_settings"
                ),
                types.InlineKeyboardButton(
                    text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="admin:active_chats"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üóÇÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin:database_info"
                )
            ],
        ]
    )


@router.callback_query(F.data.startswith("admin:"))
async def process_admin_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∫–∏"""

    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    action = callback.data.split(":")[1]

    try:
        if action == "managers_list":
            await show_managers_list(callback)
        elif action == "add_manager":
            await start_add_manager(callback, state)
        elif action == "detailed_stats":
            await show_detailed_stats(callback)
        elif action == "manage_statuses":
            await show_status_management(callback)
        elif action == "system_settings":
            await show_system_settings(callback)
        elif action == "active_chats":
            await show_active_chats(callback)
        elif action == "database_info":
            await show_database_info(callback)
        elif action == "back":
            await cmd_admin_managers(callback.message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def show_managers_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""

    try:
        all_managers = unified_db._get_all_managers()

        if not all_managers:
            await callback.message.edit_text(
                "üì≠ **–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="admin:add_manager"
                            )
                        ],
                        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")],
                    ]
                ),
                parse_mode="Markdown",
            )
            return

        text = "üë• **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**\n\n"

        for i, manager in enumerate(all_managers, 1):
            status_emoji = {
                ManagerStatus.ACTIVE: "üü¢",
                ManagerStatus.BUSY: "üü°",
                ManagerStatus.OFFLINE: "üî¥",
                ManagerStatus.VACATION: "üèñÔ∏è",
            }

            emoji = status_emoji.get(manager.status, "‚ùì")
            username_text = f"@{manager.username}" if manager.username else "–ë–µ–∑ username"

            text += f"""**{i}. {manager.name}** {emoji}
‚Ä¢ ID: `{manager.telegram_id}`
‚Ä¢ Username: {username_text}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {manager.status.value}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {manager.active_chats}/{manager.max_active_chats}
‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {manager.total_clients}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if manager.notifications_enabled else '‚ùå'}

"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard_buttons = []
        for manager in all_managers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            keyboard_buttons.append(
                [
                    types.InlineKeyboardButton(
                        text=f"‚úèÔ∏è {manager.name}",
                        callback_data=f"admin:edit_manager:{manager.telegram_id}",
                    )
                ]
            )

        keyboard_buttons.append(
            [
                types.InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="admin:add_manager"
                ),
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back"),
            ]
        )

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞", show_alert=True)


async def start_add_manager(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    await callback.message.edit_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: _–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤_\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode="Markdown",
    )

    await state.set_state(AdminStates.waiting_manager_name)


@router.message(AdminStates.waiting_manager_name)
async def process_manager_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    if not is_admin(message.from_user.id):
        return

    if message.text.lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return

    manager_name = message.text.strip()

    if len(manager_name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(manager_name=manager_name)

    await message.answer(
        f"‚úÖ **–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:** {manager_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: _123456789_\n\n"
        f"üí° ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )

    await state.set_state(AdminStates.waiting_manager_username)


@router.message(AdminStates.waiting_manager_username)
async def process_manager_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    if not is_admin(message.from_user.id):
        return

    if message.text.lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return

    try:
        manager_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
    existing_managers = unified_db._get_all_managers()
    if any(m.telegram_id == manager_telegram_id for m in existing_managers):
        await message.answer("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    manager_name = data.get("manager_name")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    try:
        new_manager = Manager(
            telegram_id=manager_telegram_id,
            name=manager_name,
            status=ManagerStatus.OFFLINE,
            notifications_enabled=True,
            notification_sound=True,
            max_active_chats=10,
        )

        manager_id = unified_db.add_manager(new_manager)

        await message.answer(
            f"‚úÖ **–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üë§ **–ò–º—è:** {manager_name}\n"
            f"üÜî **Telegram ID:** `{manager_telegram_id}`\n"
            f"üìä **ID –≤ –ë–î:** {manager_id}\n"
            f"üìç **–°—Ç–∞—Ç—É—Å:** –û—Ñ—Ñ–ª–∞–π–Ω\n\n"
            f"üí° –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /manager_start",
            parse_mode="Markdown",
        )

        logger.info(
            f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_name} ({manager_telegram_id})"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()


async def show_detailed_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""

    try:
        db_stats = unified_db.get_database_stats()
        all_managers = unified_db._get_all_managers()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        status_counts = {}
        for manager in all_managers:
            status = manager.status.value
            status_counts[status] = status_counts.get(status, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active_today = 0
        total_chats_today = 0

        for manager in all_managers:
            if manager.last_activity and manager.last_activity.date() == datetime.now().date():
                active_today += 1
            total_chats_today += manager.active_chats

        text = f"""üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üè¢ **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(all_managers)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {db_stats['active_chats']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {db_stats['total_messages']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats['unique_users']}

üë• **–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**"""

        status_emoji = {"active": "üü¢", "busy": "üü°", "offline": "üî¥", "vacation": "üèñÔ∏è"}

        for status, count in status_counts.items():
            emoji = status_emoji.get(status, "‚ùì")
            text += f"\n{emoji} {status.title()}: {count}"

        text += f"""

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –†–∞–±–æ—Ç–∞–≤—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {active_today}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–µ–π—á–∞—Å: {total_chats_today}

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ü—É—Ç—å: `{db_stats['database_path']}`"""

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:detailed_stats"
                    )
                ],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


async def show_active_chats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        with unified_db._get_connection() as conn:
            active_chats = conn.execute(
                """
                SELECT ac.*, m.name as manager_name
                FROM active_chats ac
                LEFT JOIN managers m ON ac.manager_telegram_id = m.telegram_id
                WHERE ac.status = 'active'
                ORDER BY ac.started_at DESC
                LIMIT 20
            """
            ).fetchall()

        if not active_chats:
            await callback.message.edit_text(
                "üì≠ **–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç**\n\n–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤–æ–±–æ–¥–Ω—ã.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")]
                    ]
                ),
                parse_mode="Markdown",
            )
            return

        text = f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã** ({len(active_chats)})\n\n"

        for i, chat in enumerate(active_chats, 1):
            start_time = datetime.fromisoformat(chat["started_at"]).strftime("%d.%m %H:%M")
            duration = datetime.now() - datetime.fromisoformat(chat["started_at"])
            duration_mins = int(duration.total_seconds() / 60)

            text += f"""**{i}. {chat['client_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}**
‚Ä¢ –ö–ª–∏–µ–Ω—Ç ID: `{chat['client_telegram_id']}`
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: {chat['manager_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
‚Ä¢ –ù–∞—á–∞—Ç: {start_time} ({duration_mins} –º–∏–Ω –Ω–∞–∑–∞–¥)
‚Ä¢ –ó–∞–ø—Ä–æ—Å: _{chat['initial_query'][:50] if chat['initial_query'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}_

"""

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:active_chats")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤", show_alert=True)


async def show_database_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    try:
        db_stats = unified_db.get_database_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_size = unified_db.db_path.stat().st_size if unified_db.db_path.exists() else 0
        db_size_mb = round(db_size / (1024 * 1024), 2)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
        with unified_db._get_connection() as conn:
            tables_info = conn.execute(
                """
                SELECT name FROM sqlite_master WHERE type='table'
            """
            ).fetchall()

            table_stats = {}
            for table in tables_info:
                table_name = table["name"]
                if not table_name.startswith("sqlite_"):
                    # Use explicit table queries to prevent SQL injection
                    if table_name == "user_queries":
                        count = conn.execute(
                            "SELECT COUNT(*) as count FROM user_queries"
                        ).fetchone()
                    elif table_name == "conversation_history":
                        count = conn.execute(
                            "SELECT COUNT(*) as count FROM conversation_history"
                        ).fetchone()
                    elif table_name == "user_states":
                        count = conn.execute("SELECT COUNT(*) as count FROM user_states").fetchone()
                    elif table_name == "system_stats":
                        count = conn.execute(
                            "SELECT COUNT(*) as count FROM system_stats"
                        ).fetchone()
                    else:
                        count = {"count": 0}
                    table_stats[table_name] = count["count"]

        text = f"""üóÇÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**

üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ü—É—Ç—å: `{db_stats['database_path']}`
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {db_size_mb} –ú–ë
‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(table_stats)}

üìã **–ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:**"""

        for table_name, count in table_stats.items():
            text += f"\n‚Ä¢ {table_name}: {count:,}"

        text += f"""

üîó **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {db_stats['managers_total']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {db_stats['active_chats']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {db_stats['total_messages']:,}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats['unique_users']:,}"""

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:database_info"
                    ),
                    types.InlineKeyboardButton(
                        text="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞", callback_data="admin:database_cleanup"
                    ),
                ],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
@router.message(Command("manager_start"))
async def cmd_manager_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–∞–∑–µ
        managers = unified_db._get_all_managers()
        manager = next((m for m in managers if m.telegram_id == user_id), None)

        if not manager:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        unified_db.update_manager_status(user_id, ManagerStatus.ACTIVE)

        await message.answer(
            f"‚úÖ **{manager.name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **–ê–∫—Ç–∏–≤–µ–Ω**\n"
            f"üìû –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /manager_status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            f"‚Ä¢ /manager_busy - –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–Ω—è—Ç\n"
            f"‚Ä¢ /manager_break - —É–π—Ç–∏ –≤ –ø–µ—Ä–µ—Ä—ã–≤\n"
            f"‚Ä¢ /manager_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            parse_mode="Markdown",
        )

        logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager.name} ({user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@router.message(Command("manager_status"))
async def cmd_manager_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    user_id = message.from_user.id

    try:
        stats = unified_db.get_manager_stats(user_id)

        if not stats:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä")
            return

        status_emoji = {"active": "üü¢", "busy": "üü°", "offline": "üî¥", "vacation": "üèñÔ∏è"}

        emoji = status_emoji.get(stats["status"], "‚ùì")

        status_text = f"""üë§ **{stats['name']}**

{emoji} **–°—Ç–∞—Ç—É—Å:** {stats['status'].title()}
üìä **–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:** {stats['active_chats']}
üë• **–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:** {stats['total_clients']}

üìà **–°–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –ù–æ–≤—ã—Ö —á–∞—Ç–æ–≤: {stats['today_chats']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['today_messages']}

üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {stats['last_activity'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üü¢ –ê–∫—Ç–∏–≤–µ–Ω", callback_data="manager:set_active"
                    ),
                    types.InlineKeyboardButton(text="üü° –ó–∞–Ω—è—Ç", callback_data="manager:set_busy"),
                ],
                [
                    types.InlineKeyboardButton(
                        text="üî¥ –û—Ñ—Ñ–ª–∞–π–Ω", callback_data="manager:set_offline"
                    ),
                    types.InlineKeyboardButton(
                        text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="manager:my_stats"
                    ),
                ],
            ]
        )

        await message.answer(status_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("manager:set_"))
async def handle_manager_status_change(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    user_id = callback.from_user.id
    new_status_str = callback.data.split("_")[1]

    status_map = {
        "active": ManagerStatus.ACTIVE,
        "busy": ManagerStatus.BUSY,
        "offline": ManagerStatus.OFFLINE,
    }

    new_status = status_map.get(new_status_str)
    if not new_status:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert=True)
        return

    try:
        unified_db.update_manager_status(user_id, new_status)

        status_names = {
            ManagerStatus.ACTIVE: "üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
            ManagerStatus.BUSY: "üü° –ó–∞–Ω—è—Ç",
            ManagerStatus.OFFLINE: "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω",
        }

        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_names[new_status]}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cmd_manager_status(callback.message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
