"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–≥–¥–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –∞ –∫–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
"""

import os
from datetime import datetime, time
from typing import Dict, List, Optional, Tuple
from zoneinfo import ZoneInfo

import pytz


class BusinessHours:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""

    def __init__(self):
        self.timezone = ZoneInfo(os.getenv("BUSINESS_TIMEZONE", "Europe/Kiev"))

        # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        self.schedule = {
            0: {"start": time(9, 0), "end": time(18, 0)},  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            1: {"start": time(9, 0), "end": time(18, 0)},  # –í—Ç–æ—Ä–Ω–∏–∫
            2: {"start": time(9, 0), "end": time(18, 0)},  # –°—Ä–µ–¥–∞
            3: {"start": time(9, 0), "end": time(18, 0)},  # –ß–µ—Ç–≤–µ—Ä–≥
            4: {"start": time(9, 0), "end": time(18, 0)},  # –ü—è—Ç–Ω–∏—Ü–∞
            5: {"start": time(10, 0), "end": time(15, 0)},  # –°—É–±–±–æ—Ç–∞
            6: None,  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π
        }

        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
        self.holidays = self._load_holidays()

    def _load_holidays(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π"""
        holidays_str = os.getenv("BUSINESS_HOLIDAYS", "")
        if holidays_str:
            return [date.strip() for date in holidays_str.split(",")]

        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ 2024-2025
        return [
            "2024-01-01",  # –ù–æ–≤—ã–π –≥–æ–¥
            "2024-01-07",  # –†–æ–∂–¥–µ—Å—Ç–≤–æ
            "2024-03-08",  # 8 –º–∞—Ä—Ç–∞
            "2024-04-28",  # –ü–∞—Å—Ö–∞ 2024
            "2024-04-29",  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ—Å–ª–µ –ü–∞—Å—Ö–∏
            "2024-05-01",  # –î–µ–Ω—å —Ç—Ä—É–¥–∞
            "2024-05-09",  # –î–µ–Ω—å –ø–æ–±–µ–¥—ã
            "2024-06-16",  # –¢—Ä–æ–∏—Ü–∞ 2024
            "2024-08-24",  # –î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            "2024-10-14",  # –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞
            "2024-12-25",  # –ö–∞—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –†–æ–∂–¥–µ—Å—Ç–≤–æ
            "2025-01-01",  # –ù–æ–≤—ã–π –≥–æ–¥ 2025
            "2025-01-07",  # –†–æ–∂–¥–µ—Å—Ç–≤–æ 2025
        ]

    def is_business_hours(self, dt: Optional[datetime] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏–º

        Args:
            dt: –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

        Returns:
            True –µ—Å–ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, False –∏–Ω–∞—á–µ
        """
        if dt is None:
            dt = datetime.now(self.timezone)
        else:
            dt = dt.astimezone(self.timezone)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        date_str = dt.strftime("%Y-%m-%d")
        if date_str in self.holidays:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday = dt.weekday()
        schedule_day = self.schedule.get(weekday)

        if schedule_day is None:  # –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        current_time = dt.time()
        return schedule_day["start"] <= current_time <= schedule_day["end"]

    def get_next_business_time(self, dt: Optional[datetime] = None) -> datetime:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

        Args:
            dt: –í—Ä–µ–º—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞—Ç—å. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

        Returns:
            Datetime —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        if dt is None:
            dt = datetime.now(self.timezone)
        else:
            dt = dt.astimezone(self.timezone)

        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 14 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
        for days_ahead in range(14):
            check_date = dt.replace(hour=0, minute=0, second=0, microsecond=0)
            check_date = check_date.replace(day=dt.day + days_ahead)

            date_str = check_date.strftime("%Y-%m-%d")
            if date_str in self.holidays:
                continue

            weekday = check_date.weekday()
            schedule_day = self.schedule.get(weekday)

            if schedule_day is None:
                continue

            # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏ –µ—â–µ –Ω–µ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            if days_ahead == 0 and dt.time() < schedule_day["end"]:
                return dt.replace(
                    hour=max(dt.hour, schedule_day["start"].hour),
                    minute=max(
                        dt.minute if dt.hour == schedule_day["start"].hour else 0,
                        schedule_day["start"].minute,
                    ),
                    second=0,
                    microsecond=0,
                )

            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            return check_date.replace(
                hour=schedule_day["start"].hour,
                minute=schedule_day["start"].minute,
                second=0,
                microsecond=0,
            )

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞ 14 –¥–Ω–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 9 —É—Ç—Ä–∞
        return dt.replace(day=dt.day + 7, hour=9, minute=0, second=0, microsecond=0)

    def get_business_status_message(self, lang: str = "ukr") -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±–æ—Ç—ã

        Args:
            lang: –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ("ukr" –∏–ª–∏ "rus")

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        now = datetime.now(self.timezone)

        if self.is_business_hours(now):
            if lang == "ukr":
                return "üü¢ –ó–∞—Ä–∞–∑ —Ä–æ–±–æ—á–∏–π —á–∞—Å. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ–Ω–ª–∞–π–Ω!"
            else:
                return "üü¢ –°–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ–Ω–ª–∞–π–Ω!"

        next_work_time = self.get_next_business_time(now)

        if lang == "ukr":
            return (
                f"üü° –ó–∞—Ä–∞–∑ –Ω–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å.\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ –æ–Ω–ª–∞–π–Ω: {next_work_time.strftime('%d.%m.%Y –æ %H:%M')}"
            )
        else:
            return (
                f"üü° –°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω: {next_work_time.strftime('%d.%m.%Y –≤ %H:%M')}"
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
business_hours = BusinessHours()


def is_business_time() -> bool:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return business_hours.is_business_hours()


def get_business_status(lang: str = "ukr") -> str:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã"""
    return business_hours.get_business_status_message(lang)
