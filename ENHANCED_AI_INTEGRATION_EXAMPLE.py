"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã "–û–ª–µ–Ω—ã"
"""

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional
import asyncio
import logging

# –ò–º–ø–æ—Ä—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI
from src.ai.enhanced_ai_service import enhanced_ai_service
from src.ai.service import ai_service  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
from config import Config

logger = logging.getLogger(__name__)
router = Router()


class EnhancedBotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º AI"""

    enhanced_ai_mode = State()
    comparison_mode = State()


@router.message(Command("enhanced"))
async def cmd_enhanced_mode(message: types.Message, state: FSMContext):
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI
    if not enhanced_ai_service.is_available():
        await message.answer(
            "üòî –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
    service_info = enhanced_ai_service.get_service_info()

    welcome_text = f"""üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ {service_info['persona_name']}!**

–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º.

‚ú® **–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:**
‚Ä¢ –ë–æ–ª–µ–µ –∂–∏–≤–æ–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ü–∞–º—è—Ç—å –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö
‚Ä¢ –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ—é

ü§ñ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –°–µ—Ä–≤–∏—Å: {service_info['service_type']}
‚Ä¢ AI —Ä–µ–∂–∏–º: {'–†–µ–∞–ª—å–Ω—ã–π OpenAI' if service_info['real_ai'] else 'Mock —Ä–µ–∂–∏–º'}
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–ì–æ—Ç–æ–≤–∞' if service_info['knowledge_ready'] else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚Ä¢ –ú–æ–¥–µ–ª—å: {service_info.get('model', 'Unknown')}

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üòä

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /compare - —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –æ–±—ã—á–Ω—ã–º AI
‚Ä¢ /normal - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É
‚Ä¢ /enhanced_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""

    await message.answer(welcome_text, parse_mode="Markdown")
    await state.set_state(EnhancedBotStates.enhanced_ai_mode)


@router.message(Command("compare"))
async def cmd_compare_mode(message: types.Message, state: FSMContext):
    """–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI"""

    await message.answer(
        "üîç **–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è AI**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–∫–∞–∂—É –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI.\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ –ø–æ–¥—Ö–æ–¥–∞—Ö –∫ –æ—Ç–≤–µ—Ç–∞–º.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /normal –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.",
        parse_mode="Markdown",
    )
    await state.set_state(EnhancedBotStates.comparison_mode)


@router.message(Command("enhanced_stats"))
async def cmd_enhanced_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""

    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from src.managers.models import unified_db

        stats = unified_db.get_user_stats_summary(user_id)

        if not stats or stats["total_messages"] == 0:
            await message.answer(
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è.\n"
                "–ó–∞–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è —Å–º–æ–≥—É –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏! üòä"
            )
            return

        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏**

üë§ **–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
‚Ä¢ –í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['user_messages']}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['assistant_messages']}
‚Ä¢ –° –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏: {stats['upselling_messages']}

üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –õ—é–±–∏–º–∞—è —Ç–µ–º–∞: {stats['top_category'] or '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è'}
‚Ä¢ –ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {stats['first_message'] or '–ù–µ–¥–∞–≤–Ω–æ'}

üí° **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:**
‚Ä¢ –û–ª–µ–Ω–∞ –ø–æ–º–Ω–∏—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–µ–π

üöÄ **–ß–µ–º –±–æ–ª—å—à–µ –æ–±—â–∞–µ—Ç–µ—Å—å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ—Ç–≤–µ—Ç—ã!**"""

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(EnhancedBotStates.enhanced_ai_mode)
async def handle_enhanced_ai_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI"""

    user_id = message.from_user.id
    user_text = message.text

    if not user_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòä")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = detect_user_language(message)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "–æ–±–¥—É–º—ã–≤–∞–Ω–∏—è"
        await asyncio.sleep(1)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π AI
        ai_result = await enhanced_ai_service.process_query(user_text, user_id, lang)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = ai_result["answer"]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if user_id in getattr(Config, "ADMIN_USER_IDS", []):
            debug_info = f"""

üîß **Debug info (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):**
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ai_result['confidence']:.1%}
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {ai_result['source']}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {ai_result.get('response_time_ms', 0)}ms
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂: {ai_result.get('persona_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if ai_result.get('context_used') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}"""
            response_text += debug_info

        await message.answer(response_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ enhanced AI —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /normal –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."
        )


@router.message(EnhancedBotStates.comparison_mode)
async def handle_comparison_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è AI"""

    user_id = message.from_user.id
    user_text = message.text

    if not user_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è üòä")
        return

    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        lang = detect_user_language(message)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–±–æ–∏—Ö AI –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = [
            ai_service.process_query(user_text, user_id, lang),
            enhanced_ai_service.process_query(user_text, user_id, lang),
        ]

        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è

        results = await asyncio.gather(*tasks, return_exceptions=True)
        normal_result, enhanced_result = results

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        comparison_text = "üîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–≤**\n\n"

        # –û–±—ã—á–Ω—ã–π AI
        comparison_text += "ü§ñ **–û–±—ã—á–Ω—ã–π AI:**\n"
        if isinstance(normal_result, Exception):
            comparison_text += f"‚ùå –û—à–∏–±–∫–∞: {normal_result}\n\n"
        else:
            comparison_text += f"{normal_result['answer'][:300]}{'...' if len(normal_result['answer']) > 300 else ''}\n"
            comparison_text += f"_–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {normal_result['confidence']:.1%}_\n\n"

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI
        comparison_text += "üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI (–û–ª–µ–Ω–∞):**\n"
        if isinstance(enhanced_result, Exception):
            comparison_text += f"‚ùå –û—à–∏–±–∫–∞: {enhanced_result}\n\n"
        else:
            comparison_text += f"{enhanced_result['answer'][:300]}{'...' if len(enhanced_result['answer']) > 300 else ''}\n"
            comparison_text += f"_–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced_result['confidence']:.1%}_\n\n"

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        comparison_text += "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:**\n"
        if not isinstance(enhanced_result, Exception) and not isinstance(normal_result, Exception):
            if enhanced_result["confidence"] > normal_result["confidence"]:
                comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ\n"
            if len(enhanced_result["answer"]) > len(normal_result["answer"]):
                comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π\n"
            if any(
                word in enhanced_result["answer"].lower()
                for word in ["–æ–ª–µ–Ω–∞", "–¥–æ—Å–≤—ñ–¥", "–ø–∞–º'—è—Ç–∞—é"]
            ):
                comparison_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n"

        comparison_text += "\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!"

        await message.answer(comparison_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è AI: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("normal"))
async def cmd_normal_mode(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É AI"""

    await state.clear()
    await message.answer(
        "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º AI.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /ai - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI —Ä–µ–∂–∏–º\n"
        "‚Ä¢ /enhanced - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI\n"
        "‚Ä¢ /compare - —Ä–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    )


def detect_user_language(message: types.Message) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    text = message.text.lower()

    ukrainian_words = ["—â–æ", "—è–∫", "–¥–µ", "–∫–æ–ª–∏", "—á–æ–º—É", "—Å–∫—ñ–ª—å–∫–∏", "–≤—ñ–∑–∏—Ç–∫–∏", "—Ü—ñ–Ω–∞"]
    russian_words = ["—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "—Å–∫–æ–ª—å–∫–æ", "–≤–∏–∑–∏—Ç–∫–∏", "—Ü–µ–Ω–∞"]

    ukr_count = sum(1 for word in ukrainian_words if word in text)
    rus_count = sum(1 for word in russian_words if word in text)

    return "ukr" if ukr_count >= rus_count else "rus"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
def setup_enhanced_ai_handlers(dp: Dispatcher):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É"""
    dp.include_router(router)
    logger.info("Enhanced AI handlers –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py:
"""
from ENHANCED_AI_INTEGRATION_EXAMPLE import setup_enhanced_ai_handlers

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(main_router)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_enhanced_ai_handlers(dp)

    await dp.start_polling(bot)
"""


# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
async def test_enhancements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è AI"""

    test_queries = [
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?",
        "–ú–Ω–µ –Ω—É–∂–Ω—ã —Ñ—É—Ç–±–æ–ª–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã",
        "–ù–µ –∑–Ω–∞—é —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å, –ø–æ–º–æ–≥–∏—Ç–µ",
        "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –ª–∏—Å—Ç–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!",
        "–ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏ –º–µ–Ω—è –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç",
    ]

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π AI...\n")

    for query in test_queries:
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {query}")

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π AI
            normal_result = await ai_service.process_query(query, 12345, "rus")
            print(f"ü§ñ –û–±—ã—á–Ω—ã–π: {normal_result['answer'][:100]}...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π AI
            enhanced_result = await enhanced_ai_service.process_query(query, 12345, "rus")
            print(f"üé≠ –£–ª—É—á—à–µ–Ω–Ω—ã–π: {enhanced_result['answer'][:100]}...")

            print(
                f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –æ–±—ã—á–Ω—ã–π {normal_result['confidence']:.1%} vs —É–ª—É—á—à–µ–Ω–Ω—ã–π {enhanced_result['confidence']:.1%}"
            )
            print("-" * 80)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            print("-" * 80)

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(test_enhancements())
