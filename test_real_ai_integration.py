#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É AI —Å–µ—Ä–≤–∏—Å–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.ai.service import ai_service
from config import Config


@pytest.mark.asyncio
async def test_real_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ AI –∑–∞–ø—Ä–æ—Å—ã"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI API...")
    print(f"AI –≤–∫–ª—é—á–µ–Ω: {ai_service.enabled}")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π AI: {ai_service.use_real_ai}")
    print(f"AI –¥–æ—Å—Ç—É–ø–µ–Ω: {ai_service.is_available()}")
    print()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        ("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", "ukr"),
        ("–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ñ—É—Ç–±–æ–ª–æ–∫?", "ukr"),
        ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?", "rus"),
        ("–ú–æ–∂–µ—Ç–µ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç —Å –Ω—É–ª—è?", "rus"),
        ("What are your prices?", "ukr"),  # –î–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º
    ]

    print("üìù –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
    print("=" * 50)

    for i, (query, lang) in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: {query}")
        print(f"   –Ø–∑—ã–∫: {lang}")

        try:
            result = await ai_service.process_query(query, 12345, lang)

            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
            print(f"   üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
            print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            print(f"   üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {result['should_contact_manager']}")
            print(
                f"   üí¨ –û—Ç–≤–µ—Ç: {result['answer'][:150]}{'...' if len(result['answer']) > 150 else ''}"
            )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


@pytest.mark.asyncio
async def test_cost_estimation():
    """–ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    print("\nüí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö)
    cost_per_request = 0.000045  # $
    balance = 10.0  # $

    requests_possible = int(balance / cost_per_request)
    print(f"   üí≥ –ë–∞–ª–∞–Ω—Å: ${balance}")
    print(f"   üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ~${cost_per_request}")
    print(f"   üî¢ –í–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ~{requests_possible:,}")


if __name__ == "__main__":
    print("ü§ñ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    print(f"OpenAI API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.OPENAI_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"AI Enabled: {config.AI_ENABLED}")
    print(f"AI Model: {config.AI_MODEL}")
    print()

    asyncio.run(test_real_ai())
    asyncio.run(test_cost_estimation())
