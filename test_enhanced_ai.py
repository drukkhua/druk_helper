#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Enhanced AI Service –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath("."))


@pytest.mark.asyncio
async def test_enhanced_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Enhanced AI Service"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced AI Service...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        from src.ai.enhanced_ai_service import enhanced_ai_service

        print("‚úÖ Enhanced AI Service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        is_available = enhanced_ai_service.is_available()
        print(f"üîç –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {is_available}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
        service_info = enhanced_ai_service.get_service_info()
        print(f"‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ: {service_info}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?'")

        result = await enhanced_ai_service.process_query("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?", 12345, "ukr")

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(f"   –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:100]}...")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.1%}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source', 'unknown')}")
        print(f"   –í—Ä–µ–º—è: {result.get('response_time_ms', 0)}ms")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_enhanced_ai())
