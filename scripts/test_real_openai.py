#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö OpenAI API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º $10
"""

import asyncio
import sys
import os
sys.path.append('..')

import openai
from src.ai.service import ai_service
from config import Config


async def test_basic_openai_request():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç OpenAI API"""
    print("üîë Testing basic OpenAI API request...")

    config = Config()
    if not config.OPENAI_API_KEY:
        print("‚ùå No OpenAI API key found")
        return False

    try:
        client = openai.AsyncOpenAI(api_key=config.OPENAI_API_KEY)

        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "user", "content": "Say 'Hello from OpenAI!' in Ukrainian"}
            ],
            max_tokens=50,
            temperature=0.1
        )

        if response.choices and response.choices[0].message.content:
            print(f"‚úÖ OpenAI API Response: {response.choices[0].message.content}")
            return True
        else:
            print("‚ùå Empty response from OpenAI")
            return False

    except openai.AuthenticationError:
        print("‚ùå Authentication failed - check API key")
        return False
    except openai.RateLimitError:
        print("‚ùå Rate limit exceeded")
        return False
    except openai.APIError as e:
        print(f"‚ùå OpenAI API Error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False


async def test_business_query():
    """–¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ OpenAI"""
    print("\nüíº Testing business query with OpenAI...")

    config = Config()
    client = openai.AsyncOpenAI(api_key=config.OPENAI_API_KEY)

    try:
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": """–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –¥—Ä—É–∫—É —Ç–∞ –¥–∏–∑–∞–π–Ω—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å–ø—Ä–∞–≤—ñ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ.
                    –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ü—ñ–Ω–∏, –∫–∞–∂–∏ —â–æ —Ü–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–∏—Ä–∞–∂—É —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, —ñ —Ç—Ä–µ–±–∞ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞ —Ç–æ—á–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º."""
                },
                {
                    "role": "user",
                    "content": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?"
                }
            ],
            max_tokens=200,
            temperature=0.1
        )

        if response.choices and response.choices[0].message.content:
            print(f"‚úÖ Business Query Response:")
            print(f"   {response.choices[0].message.content}")
            return True
        else:
            print("‚ùå Empty business response")
            return False

    except Exception as e:
        print(f"‚ùå Business query error: {e}")
        return False


async def test_cost_estimation():
    """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüí∞ Testing cost estimation...")

    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è gpt-4o-mini
    input_cost_per_1k = 0.00015  # $0.15 per 1M tokens
    output_cost_per_1k = 0.0006  # $0.60 per 1M tokens

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_input_tokens = 100  # –ø—Ä–∏–º–µ—Ä–Ω–æ
    test_output_tokens = 50  # –ø—Ä–∏–º–µ—Ä–Ω–æ

    cost_per_request = (test_input_tokens * input_cost_per_1k / 1000) + \
        (test_output_tokens * output_cost_per_1k / 1000)

    requests_for_10_dollars = 10 / cost_per_request

    print(f"üìä Cost Analysis:")
    print(f"   ‚Ä¢ Cost per request: ~${cost_per_request:.6f}")
    print(f"   ‚Ä¢ Requests possible with $10: ~{requests_for_10_dollars:.0f}")
    print(f"   ‚Ä¢ Model: gpt-4o-mini (most cost-effective)")


async def test_mock_vs_real_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ mock –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüîÑ Comparing Mock vs Real AI responses...")

    test_query = "–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ñ—É—Ç–±–æ–ª–æ–∫?"

    # Mock response
    print("ü§ñ Mock Response:")
    mock_result = await ai_service.process_query(test_query, 12345, 'ukr')
    if mock_result['success']:
        print(f"   {mock_result['answer'][:100]}...")

    # Real OpenAI response
    print("\nüß† Real OpenAI Response:")
    config = Config()
    try:
        client = openai.AsyncOpenAI(api_key=config.OPENAI_API_KEY)

        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": """–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –¥—Ä—É–∫—É —Ç–∞ –¥–∏–∑–∞–π–Ω—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ.
                    –î–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π 2-3 –¥–Ω—ñ, –∞–ª–µ –º–æ–∂–µ –≤–∞—Ä—ñ—é–≤–∞—Ç–∏—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏—Ä–∞–∂—É."""
                },
                {
                    "role": "user",
                    "content": test_query
                }
            ],
            max_tokens=150,
            temperature=0.1
        )

        if response.choices and response.choices[0].message.content:
            print(f"   {response.choices[0].message.content}")
        else:
            print("   ‚ùå No real response received")

    except Exception as e:
        print(f"   ‚ùå Real API error: {e}")


async def main():
    """Main test function"""
    print("üöÄ TESTING REAL OPENAI API")
    print("=" * 50)

    # Test basic API connectivity
    basic_test = await test_basic_openai_request()
    if not basic_test:
        print("\n‚ùå Basic API test failed. Stopping.")
        return

    # Test business query
    await test_business_query()

    # Cost estimation
    await test_cost_estimation()

    # Mock vs Real comparison
    await test_mock_vs_real_comparison()

    print("\n" + "=" * 50)
    print("üéØ OpenAI API testing complete!")
    print("üí° Ready to integrate real AI into the bot!")


if __name__ == "__main__":
    asyncio.run(main())
