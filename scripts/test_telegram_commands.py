#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö Telegram –∫–æ–º–∞–Ω–¥
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É /analytics, /sync, /suggestions –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import sys
import os
import asyncio
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.bot.handlers.main import cmd_analytics, cmd_sync, cmd_suggestions
from src.core.template_manager import TemplateManager


class MockMessage:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""

    def __init__(self, user_id: int):
        self.from_user = Mock()
        self.from_user.id = user_id
        self.text = ""
        self.responses = []

    async def answer(self, text: str, **kwargs):
        """–ú–æ–∫ –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        self.responses.append(text)
        print(f"üì§ –û—Ç–≤–µ—Ç –±–æ—Ç—É: {text[:100]}{'...' if len(text) > 100 else ''}")


async def test_telegram_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ Telegram –∫–æ–º–∞–Ω–¥—ã"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö Telegram –∫–æ–º–∞–Ω–¥...")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    admin_user_id = 12345  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π admin ID –∏–∑ config
    mock_message = MockMessage(admin_user_id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º template_manager (–º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    template_manager = None

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    commands_to_test = [
        ("analytics", cmd_analytics, "–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ AI"),
        ("sync", cmd_sync, "–£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
        ("suggestions", cmd_suggestions, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"),
    ]

    for cmd_name, cmd_func, description in commands_to_test:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /{cmd_name} - {description}")
        print("-" * 40)

        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
            mock_message.responses = []

            # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            await cmd_func(mock_message, template_manager)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if mock_message.responses:
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{cmd_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(mock_message.responses)}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                for i, response in enumerate(mock_message.responses, 1):
                    print(f"   –û—Ç–≤–µ—Ç {i}: {response[:200]}{'...' if len(response) > 200 else ''}")
            else:
                print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /{cmd_name} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /{cmd_name}: {e}")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

    print("\n" + "=" * 60)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ –≤ —Ä–æ—É—Ç–µ—Ä–µ
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –≤ —Ä–æ—É—Ç–µ—Ä–µ:")
    try:
        from src.bot.routers import BotRouters

        print("‚úÖ BotRouters –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        import inspect

        router_methods = inspect.getmembers(BotRouters, predicate=inspect.ismethod)
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –≤ BotRouters: {len(router_methods)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BotRouters: {e}")

    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    print("      /analytics - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    print("      /sync - —É–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
    print("      /suggestions - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")


if __name__ == "__main__":
    asyncio.run(test_telegram_commands())
