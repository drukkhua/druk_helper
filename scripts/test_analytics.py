#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.analytics.analytics_service import analytics_service
from src.analytics.dashboard import create_simple_report
from src.ai.service import ai_service


async def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?",
        "–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ñ—É—Ç–±–æ–ª–æ–∫?",
        "–ß–∏ –º–æ–∂–Ω–∞ –∑–∞–º–æ–≤–∏—Ç–∏ –ª–∏—Å—Ç—ñ–≤–∫–∏?",
        "–Ø–∫–∞ —Ü—ñ–Ω–∞ –Ω–∞ –±–ª–æ–∫–Ω–æ—Ç–∏?",
        "–ö–æ–ª–∏ –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ?",
        "–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ —â–æ—Å—å –¥–∏–≤–Ω–µ",
        "–©–µ –æ–¥–∏–Ω –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π –∑–∞–ø–∏—Ç",
        "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?",  # –ü–æ–≤—Ç–æ—Ä
    ]

    print(f"üìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {len(test_queries)} –∑–∞–ø—Ä–æ—Å—ñ–≤...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for i, query in enumerate(test_queries, 1):
        user_id = 12345 + (i % 3)  # 3 —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"  {i}. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {query}")

        try:
            result = await ai_service.process_query(query, user_id, "ukr")
            print(f"     ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (confidence: {result.get('confidence', 0):.3f})")
        except Exception as e:
            print(f"     ‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    report = create_simple_report()
    print("\n" + "=" * 60)
    print(report)
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print("\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    suggestions = analytics_service.get_improvement_suggestions()

    if suggestions:
        for i, suggestion in enumerate(suggestions, 1):
            print(f"{i}. [{suggestion['priority'].upper()}] {suggestion['description']}")
            if "examples" in suggestion:
                for example in suggestion["examples"][:2]:
                    print(f"   - –ü—Ä–∏–º–µ—Ä: {example}")
    else:
        print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")

    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ./data/analytics.db")
    print(f"üåê –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-dashboard: python -m src.analytics.dashboard")


if __name__ == "__main__":
    asyncio.run(test_analytics())
