#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.ai.service import ai_service
from config import Config


@pytest.mark.asyncio
async def test_full_rag_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π RAG pipeline —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ RAG pipeline —Å OpenAI...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–∞
    print(f"AI –≤–∫–ª—é—á–µ–Ω: {ai_service.enabled}")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π AI: {ai_service.use_real_ai}")
    print(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞: {ai_service.knowledge_ready}")
    print(f"AI –¥–æ—Å—Ç—É–ø–µ–Ω: {ai_service.is_available()}")

    if ai_service.knowledge_ready:
        stats = ai_service.knowledge_base.get_statistics()
        print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {stats.get('total_documents', 0)}")

    print()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    test_queries = [
        ("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?", "ukr"),
        ("–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ñ—É—Ç–±–æ–ª–æ–∫?", "ukr"),
        ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∏–∑–∏—Ç–∫–∏?", "rus"),
        ("–ú–æ–∂–µ—Ç–µ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç —Å –Ω—É–ª—è?", "rus"),
        ("–ß–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∏–∑–∞–π–Ω?", "ukr"),
    ]

    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("=" * 70)

    for i, (query, lang) in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}' (—è–∑—ã–∫: {lang})")

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
            result = await ai_service.process_query(query, 12345, lang)

            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
            print(f"   üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
            print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            print(f"   üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {result['should_contact_manager']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = result["answer"]
            if len(answer) > 200:
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {answer[:200]}...")
            else:
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {answer}")

            print(f"   üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 70)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


@pytest.mark.asyncio
async def test_rag_vs_mock():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã RAG –∏ mock —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüÜö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ RAG vs Mock –æ—Ç–≤–µ—Ç–æ–≤...")

    test_query = "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—é—Ç—å –≤—ñ–∑–∏—Ç–∫–∏?"
    lang = "ukr"

    print(f"–ó–∞–ø—Ä–æ—Å: '{test_query}' (—è–∑—ã–∫: {lang})")

    try:
        # –ü–æ–ª—É—á–∞–µ–º RAG –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç)
        if ai_service.knowledge_ready and ai_service.use_real_ai:
            print("\nüß† RAG + OpenAI –æ—Ç–≤–µ—Ç:")
            result = await ai_service.process_query(test_query, 12345, lang)
            print(f"   {result['answer'][:300]}...")

        # –ü–æ–ª—É—á–∞–µ–º mock –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print("\nüé≠ Mock –æ—Ç–≤–µ—Ç:")
        mock_result = ai_service._create_mock_ai_response(test_query, lang)
        print(f"   {mock_result['answer'][:300]}...")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    print(f"OpenAI API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.OPENAI_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"AI Enabled: {config.AI_ENABLED}")
    print(f"AI Model: {config.AI_MODEL}")
    print()

    try:
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline
        await test_full_rag_pipeline()

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
        await test_rag_vs_mock()

        print("\n" + "=" * 70)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
